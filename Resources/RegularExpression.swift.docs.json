{
  "key.column": 1,
  "key.diagnostic_stage": "source.diagnostic.stage.swift.parse",
  "key.length": 40577,
  "key.line": 1,
  "key.offset": 0,
  "key.substructure": [
    {
      "key.accessibility": "source.lang.swift.accessibility.public",
      "key.annotated_decl": "<Declaration>public typealias MatchEnumClosure = (<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>?, [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC13MatchingFlagsO\">MatchingFlags<\/Type>], inout <Type usr=\"s:Sb\">Bool<\/Type>) -&gt; <Type usr=\"s:s4Voida\">Void<\/Type><\/Declaration>",
      "key.attributes": [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 29,
          "key.offset": 1169
        }
      ],
      "key.column": 8,
      "key.doc.comment": "",
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.fully_annotated_decl": "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>MatchEnumClosure<\/decl.name> = (<decl.var.parameter><decl.var.parameter.type><ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC13MatchingFlagsO\">MatchingFlags<\/ref.enum>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:s4Voida\">Void<\/ref.typealias><\/decl.function.returntype><\/decl.typealias>",
      "key.kind": "source.lang.swift.decl.typealias",
      "key.length": 110,
      "key.line": 29,
      "key.name": "MatchEnumClosure",
      "key.namecolumn": 18,
      "key.namelength": 16,
      "key.nameline": 29,
      "key.nameoffset": 1186,
      "key.offset": 1176,
      "key.parsed_declaration": "public typealias MatchEnumClosure = (RegularExpression.Match?, [RegularExpression.MatchingFlags], inout Bool) -> Void",
      "key.parsed_scope.end": 29,
      "key.parsed_scope.start": 29,
      "key.typename": "((RegularExpression.Match?, [RegularExpression.MatchingFlags], inout Bool) -> ()).Type",
      "key.typeusr": "$sy7Rubicon17RegularExpressionC5MatchCSg_SayAC13MatchingFlagsOGSbztcmD",
      "key.usr": "s:7Rubicon16MatchEnumClosurea"
    },
    {
      "key.accessibility": "source.lang.swift.accessibility.open",
      "key.annotated_decl": "<Declaration>open class RegularExpression<\/Declaration>",
      "key.attributes": [
        {
          "key.attribute": "source.decl.attribute.open",
          "key.column": 1,
          "key.length": 4,
          "key.line": 42,
          "key.offset": 2116
        }
      ],
      "key.bodycolumn": 31,
      "key.bodylength": 33214,
      "key.bodyline": 42,
      "key.bodyoffset": 2146,
      "key.column": 6,
      "key.doc.column": 12,
      "key.doc.comment": "RegularExpression is a replacement for NSRegularExpression that is much more Swift friendly.\n\nA Note about the methods that take closures: I know that having these methods as throws rather than a rethrows\nis not ideal but given that NSRegularExpression, which we’re actually using underneath, doesn’t allow it’s\nclosure to be throws sort of leaves us no choice. At least I haven’t found an easy way around it. So I decided\nto have these methods as throws and in the future, if we can fix this issue, make them rethrows then.\n\nBLOG Post with Examples: [I, Introvert - A Better\nRegularExpression](https:\/\/blog.projectgalen.com\/2021\/02\/12\/a-better-regularexpression\/)",
      "key.doc.declaration": "open class RegularExpression",
      "key.doc.discussion": [
        {
          "Para": "A Note about the methods that take closures: I know that having these methods as throws rather than a rethrows is not ideal but given that NSRegularExpression, which we’re actually using underneath, doesn’t allow it’s closure to be throws sort of leaves us no choice. At least I haven’t found an easy way around it. So I decided to have these methods as throws and in the future, if we can fix this issue, make them rethrows then."
        },
        {
          "Para": "BLOG Post with Examples: "
        }
      ],
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.doc.full_as_xml": "<Class file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"42\" column=\"12\"><Name>RegularExpression<\/Name><USR>s:7Rubicon17RegularExpressionC<\/USR><Declaration>open class RegularExpression<\/Declaration><CommentParts><Abstract><Para>RegularExpression is a replacement for NSRegularExpression that is much more Swift friendly.<\/Para><\/Abstract><Discussion><Para>A Note about the methods that take closures: I know that having these methods as throws rather than a rethrows is not ideal but given that NSRegularExpression, which we’re actually using underneath, doesn’t allow it’s closure to be throws sort of leaves us no choice. At least I haven’t found an easy way around it. So I decided to have these methods as throws and in the future, if we can fix this issue, make them rethrows then.<\/Para><Para>BLOG Post with Examples: <Link href=\"https:\/\/blog.projectgalen.com\/2021\/02\/12\/a-better-regularexpression\/\">I, Introvert - A Better RegularExpression<\/Link><\/Para><\/Discussion><\/CommentParts><\/Class>",
      "key.doc.line": 42,
      "key.doc.name": "RegularExpression",
      "key.doc.type": "Class",
      "key.doccolumn": 1,
      "key.doclength": 713,
      "key.docline": 32,
      "key.docoffset": 1403,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.fully_annotated_decl": "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>RegularExpression<\/decl.name><\/decl.class>",
      "key.kind": "source.lang.swift.decl.class",
      "key.length": 33240,
      "key.line": 42,
      "key.name": "RegularExpression",
      "key.namecolumn": 12,
      "key.namelength": 17,
      "key.nameline": 42,
      "key.nameoffset": 2127,
      "key.offset": 2121,
      "key.parsed_declaration": "open class RegularExpression",
      "key.parsed_scope.end": 617,
      "key.parsed_scope.start": 42,
      "key.substructure": [
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>public enum <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.Options<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 5,
              "key.length": 6,
              "key.line": 48,
              "key.offset": 2400
            }
          ],
          "key.bodycolumn": 26,
          "key.bodylength": 1684,
          "key.bodyline": 48,
          "key.bodyoffset": 2421,
          "key.column": 12,
          "key.doc.column": 17,
          "key.doc.comment": "These constants define the regular expression options. These constants are used by\n`init(pattern:options:)`.",
          "key.doc.declaration": "public enum Rubicon.RegularExpression.Options",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"48\" column=\"17\"><Name>Options<\/Name><USR>s:7Rubicon17RegularExpressionC7OptionsO<\/USR><Declaration>public enum Rubicon.RegularExpression.Options<\/Declaration><CommentParts><Abstract><Para>These constants define the regular expression options. These constants are used by <codeVoice>init(pattern:options:)<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line": 48,
          "key.doc.name": "Options",
          "key.doc.type": "Other",
          "key.doccolumn": 5,
          "key.doclength": 129,
          "key.docline": 45,
          "key.docoffset": 2267,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<decl.name>Options<\/decl.name><\/decl.enum>",
          "key.kind": "source.lang.swift.decl.enum",
          "key.length": 1699,
          "key.line": 48,
          "key.name": "Options",
          "key.namecolumn": 17,
          "key.namelength": 7,
          "key.nameline": 48,
          "key.nameoffset": 2412,
          "key.offset": 2407,
          "key.parsed_declaration": "public enum Options",
          "key.parsed_scope.end": 78,
          "key.parsed_scope.start": 48,
          "key.substructure": [
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 20,
              "key.line": 52,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 2603,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case caseInsensitive<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "All matches are case-insensitive.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"52\" column=\"14\"><Name>caseInsensitive<\/Name><USR>s:7Rubicon17RegularExpressionC7OptionsO15caseInsensitiveyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>All matches are case-insensitive.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 52,
                  "key.doc.name": "caseInsensitive",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 50,
                  "key.docline": 50,
                  "key.docoffset": 2545,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>caseInsensitive<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 15,
                  "key.line": 52,
                  "key.name": "caseInsensitive",
                  "key.namecolumn": 14,
                  "key.namelength": 15,
                  "key.nameline": 52,
                  "key.nameoffset": 2608,
                  "key.offset": 2608,
                  "key.parsed_declaration": "case caseInsensitive",
                  "key.parsed_scope.end": 52,
                  "key.parsed_scope.start": 52,
                  "key.typename": "(RegularExpression.Options.Type) -> RegularExpression.Options",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC7OptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO15caseInsensitiveyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 31,
              "key.line": 56,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 2829,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case allowCommentsAndWhitespace<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Ignore whitespace and #-prefixed comments in the pattern.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"56\" column=\"14\"><Name>allowCommentsAndWhitespace<\/Name><USR>s:7Rubicon17RegularExpressionC7OptionsO26allowCommentsAndWhitespaceyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Ignore whitespace and #-prefixed comments in the pattern.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 56,
                  "key.doc.name": "allowCommentsAndWhitespace",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 74,
                  "key.docline": 54,
                  "key.docoffset": 2747,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>allowCommentsAndWhitespace<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 26,
                  "key.line": 56,
                  "key.name": "allowCommentsAndWhitespace",
                  "key.namecolumn": 14,
                  "key.namelength": 26,
                  "key.nameline": 56,
                  "key.nameoffset": 2834,
                  "key.offset": 2834,
                  "key.parsed_declaration": "case allowCommentsAndWhitespace",
                  "key.parsed_scope.end": 56,
                  "key.parsed_scope.start": 56,
                  "key.typename": "(RegularExpression.Options.Type) -> RegularExpression.Options",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC7OptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO26allowCommentsAndWhitespaceyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 25,
              "key.line": 60,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 3054,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case ignoreMetacharacters<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Treat the entire pattern as a literal string.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"60\" column=\"14\"><Name>ignoreMetacharacters<\/Name><USR>s:7Rubicon17RegularExpressionC7OptionsO20ignoreMetacharactersyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Treat the entire pattern as a literal string.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 60,
                  "key.doc.name": "ignoreMetacharacters",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 62,
                  "key.docline": 58,
                  "key.docoffset": 2984,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>ignoreMetacharacters<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 20,
                  "key.line": 60,
                  "key.name": "ignoreMetacharacters",
                  "key.namecolumn": 14,
                  "key.namelength": 20,
                  "key.nameline": 60,
                  "key.nameoffset": 3059,
                  "key.offset": 3059,
                  "key.parsed_declaration": "case ignoreMetacharacters",
                  "key.parsed_scope.end": 60,
                  "key.parsed_scope.start": 60,
                  "key.typename": "(RegularExpression.Options.Type) -> RegularExpression.Options",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC7OptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO20ignoreMetacharactersyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 29,
              "key.line": 64,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 3286,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case dotMatchesLineSeparators<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Allow . to match any character, including line separators.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"64\" column=\"14\"><Name>dotMatchesLineSeparators<\/Name><USR>s:7Rubicon17RegularExpressionC7OptionsO24dotMatchesLineSeparatorsyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Allow . to match any character, including line separators.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 64,
                  "key.doc.name": "dotMatchesLineSeparators",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 75,
                  "key.docline": 62,
                  "key.docoffset": 3203,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>dotMatchesLineSeparators<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 24,
                  "key.line": 64,
                  "key.name": "dotMatchesLineSeparators",
                  "key.namecolumn": 14,
                  "key.namelength": 24,
                  "key.nameline": 64,
                  "key.nameoffset": 3291,
                  "key.offset": 3291,
                  "key.parsed_declaration": "case dotMatchesLineSeparators",
                  "key.parsed_scope.end": 64,
                  "key.parsed_scope.start": 64,
                  "key.typename": "(RegularExpression.Options.Type) -> RegularExpression.Options",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC7OptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO24dotMatchesLineSeparatorsyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 22,
              "key.line": 68,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 3514,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case anchorsMatchLines<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Allow ^ and $ to match the start and end of lines.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"68\" column=\"14\"><Name>anchorsMatchLines<\/Name><USR>s:7Rubicon17RegularExpressionC7OptionsO17anchorsMatchLinesyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Allow ^ and $ to match the start and end of lines.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 68,
                  "key.doc.name": "anchorsMatchLines",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 67,
                  "key.docline": 66,
                  "key.docoffset": 3439,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>anchorsMatchLines<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 17,
                  "key.line": 68,
                  "key.name": "anchorsMatchLines",
                  "key.namecolumn": 14,
                  "key.namelength": 17,
                  "key.nameline": 68,
                  "key.nameoffset": 3519,
                  "key.offset": 3519,
                  "key.parsed_declaration": "case anchorsMatchLines",
                  "key.parsed_scope.end": 68,
                  "key.parsed_scope.start": 68,
                  "key.typename": "(RegularExpression.Options.Type) -> RegularExpression.Options",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC7OptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO17anchorsMatchLinesyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 26,
              "key.line": 72,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 3770,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case useUnixLineSeparators<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Treat only \\n as a line separator (otherwise, all standard line separators are used).",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"72\" column=\"14\"><Name>useUnixLineSeparators<\/Name><USR>s:7Rubicon17RegularExpressionC7OptionsO21useUnixLineSeparatorsyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Treat only \\n as a line separator (otherwise, all standard line separators are used).<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 72,
                  "key.doc.name": "useUnixLineSeparators",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 102,
                  "key.docline": 70,
                  "key.docoffset": 3660,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>useUnixLineSeparators<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 21,
                  "key.line": 72,
                  "key.name": "useUnixLineSeparators",
                  "key.namecolumn": 14,
                  "key.namelength": 21,
                  "key.nameline": 72,
                  "key.nameoffset": 3775,
                  "key.offset": 3775,
                  "key.parsed_declaration": "case useUnixLineSeparators",
                  "key.parsed_scope.end": 72,
                  "key.parsed_scope.start": 72,
                  "key.typename": "(RegularExpression.Options.Type) -> RegularExpression.Options",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC7OptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO21useUnixLineSeparatorsyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 29,
              "key.line": 77,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 4071,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case useUnicodeWordBoundaries<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Use Unicode TR#29 to specify word boundaries (otherwise, traditional regular expression word\nboundaries are used).",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"77\" column=\"14\"><Name>useUnicodeWordBoundaries<\/Name><USR>s:7Rubicon17RegularExpressionC7OptionsO24useUnicodeWordBoundariesyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Use Unicode TR#29 to specify word boundaries (otherwise, traditional regular expression word boundaries are used).<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 77,
                  "key.doc.name": "useUnicodeWordBoundaries",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 143,
                  "key.docline": 74,
                  "key.docoffset": 3920,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>useUnicodeWordBoundaries<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 24,
                  "key.line": 77,
                  "key.name": "useUnicodeWordBoundaries",
                  "key.namecolumn": 14,
                  "key.namelength": 24,
                  "key.nameline": 77,
                  "key.nameoffset": 4076,
                  "key.offset": 4076,
                  "key.parsed_declaration": "case useUnicodeWordBoundaries",
                  "key.parsed_scope.end": 77,
                  "key.parsed_scope.start": 77,
                  "key.typename": "(RegularExpression.Options.Type) -> RegularExpression.Options",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC7OptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO24useUnicodeWordBoundariesyA2EmF"
                }
              ]
            }
          ],
          "key.typename": "RegularExpression.Options.Type",
          "key.typeusr": "$s7Rubicon17RegularExpressionC7OptionsOmD",
          "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>public enum <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.MatchingOptions<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 5,
              "key.length": 6,
              "key.line": 85,
              "key.offset": 4483
            }
          ],
          "key.bodycolumn": 34,
          "key.bodylength": 2284,
          "key.bodyline": 85,
          "key.bodyoffset": 4512,
          "key.column": 12,
          "key.doc.column": 17,
          "key.doc.comment": "The matching options constants specify the reporting, completion and matching rules to the expression\nmatching methods. These constants are used by all methods that search for, or replace values, using a\nregular expression.",
          "key.doc.declaration": "public enum Rubicon.RegularExpression.MatchingOptions",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"85\" column=\"17\"><Name>MatchingOptions<\/Name><USR>s:7Rubicon17RegularExpressionC15MatchingOptionsO<\/USR><Declaration>public enum Rubicon.RegularExpression.MatchingOptions<\/Declaration><CommentParts><Abstract><Para>The matching options constants specify the reporting, completion and matching rules to the expression matching methods. These constants are used by all methods that search for, or replace values, using a regular expression.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line": 85,
          "key.doc.name": "MatchingOptions",
          "key.doc.type": "Other",
          "key.doccolumn": 5,
          "key.doclength": 252,
          "key.docline": 81,
          "key.docoffset": 4227,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<decl.name>MatchingOptions<\/decl.name><\/decl.enum>",
          "key.kind": "source.lang.swift.decl.enum",
          "key.length": 2307,
          "key.line": 85,
          "key.name": "MatchingOptions",
          "key.namecolumn": 17,
          "key.namelength": 15,
          "key.nameline": 85,
          "key.nameoffset": 4495,
          "key.offset": 4490,
          "key.parsed_declaration": "public enum MatchingOptions",
          "key.parsed_scope.end": 117,
          "key.parsed_scope.start": 85,
          "key.substructure": [
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 19,
              "key.line": 91,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 4930,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case reportProgress<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Call the Block periodically during long-running match operations. This option has no effect for\nmethods other than `forEachMatch(in:options:range:using:)`. See\n`forEachMatch(in:options:range:using:)` for a description of the constant in context.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"91\" column=\"14\"><Name>reportProgress<\/Name><USR>s:7Rubicon17RegularExpressionC15MatchingOptionsO14reportProgressyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Call the Block periodically during long-running match operations. This option has no effect for methods other than <codeVoice>forEachMatch(in:options:range:using:)<\/codeVoice>. See <codeVoice>forEachMatch(in:options:range:using:)<\/codeVoice> for a description of the constant in context.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 91,
                  "key.doc.name": "reportProgress",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 286,
                  "key.docline": 87,
                  "key.docoffset": 4636,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>reportProgress<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 14,
                  "key.line": 91,
                  "key.name": "reportProgress",
                  "key.namecolumn": 14,
                  "key.namelength": 14,
                  "key.nameline": 91,
                  "key.nameoffset": 4935,
                  "key.offset": 4935,
                  "key.parsed_declaration": "case reportProgress",
                  "key.parsed_scope.end": 91,
                  "key.parsed_scope.start": 91,
                  "key.typename": "(RegularExpression.MatchingOptions.Type) -> RegularExpression.MatchingOptions",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC15MatchingOptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC15MatchingOptionsO14reportProgressyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 21,
              "key.line": 97,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 5359,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case reportCompletion<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Call the Block once after the completion of any matching. This option has no effect for methods other\nthan `forEachMatch(in:options:range:using:)`. See `forEachMatch(in:options:range:using:)` for a\ndescription of the constant in context.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"97\" column=\"14\"><Name>reportCompletion<\/Name><USR>s:7Rubicon17RegularExpressionC15MatchingOptionsO16reportCompletionyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Call the Block once after the completion of any matching. This option has no effect for methods other than <codeVoice>forEachMatch(in:options:range:using:)<\/codeVoice>. See <codeVoice>forEachMatch(in:options:range:using:)<\/codeVoice> for a description of the constant in context.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 97,
                  "key.doc.name": "reportCompletion",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 278,
                  "key.docline": 93,
                  "key.docoffset": 5073,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>reportCompletion<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 16,
                  "key.line": 97,
                  "key.name": "reportCompletion",
                  "key.namecolumn": 14,
                  "key.namelength": 16,
                  "key.nameline": 97,
                  "key.nameoffset": 5364,
                  "key.offset": 5364,
                  "key.parsed_declaration": "case reportCompletion",
                  "key.parsed_scope.end": 97,
                  "key.parsed_scope.start": 97,
                  "key.typename": "(RegularExpression.MatchingOptions.Type) -> RegularExpression.MatchingOptions",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC15MatchingOptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC15MatchingOptionsO16reportCompletionyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 13,
              "key.line": 102,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 5708,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case anchored<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Specifies that matches are limited to those at the start of the search range. See\n`forEachMatch(in:options:range:using:)` for a description of the constant in context.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"102\" column=\"14\"><Name>anchored<\/Name><USR>s:7Rubicon17RegularExpressionC15MatchingOptionsO8anchoredyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Specifies that matches are limited to those at the start of the search range. See <codeVoice>forEachMatch(in:options:range:using:)<\/codeVoice> for a description of the constant in context.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 102,
                  "key.doc.name": "anchored",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 196,
                  "key.docline": 99,
                  "key.docoffset": 5504,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>anchored<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 8,
                  "key.line": 102,
                  "key.name": "anchored",
                  "key.namecolumn": 14,
                  "key.namelength": 8,
                  "key.nameline": 102,
                  "key.nameoffset": 5713,
                  "key.offset": 5713,
                  "key.parsed_declaration": "case anchored",
                  "key.parsed_scope.end": 102,
                  "key.parsed_scope.start": 102,
                  "key.typename": "(RegularExpression.MatchingOptions.Type) -> RegularExpression.MatchingOptions",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC15MatchingOptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC15MatchingOptionsO8anchoredyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 26,
              "key.line": 109,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 6228,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case withTransparentBounds<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Specifies that matching may examine parts of the string beyond the bounds of the search range, for\npurposes such as word boundary detection, lookahead, etc. This constant has no effect if the search\nrange contains the entire string. See `forEachMatch(in:options:range:using:)` for a description of the\nconstant in context.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"109\" column=\"14\"><Name>withTransparentBounds<\/Name><USR>s:7Rubicon17RegularExpressionC15MatchingOptionsO21withTransparentBoundsyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Specifies that matching may examine parts of the string beyond the bounds of the search range, for purposes such as word boundary detection, lookahead, etc. This constant has no effect if the search range contains the entire string. See <codeVoice>forEachMatch(in:options:range:using:)<\/codeVoice> for a description of the constant in context.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 109,
                  "key.doc.name": "withTransparentBounds",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 375,
                  "key.docline": 104,
                  "key.docoffset": 5845,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>withTransparentBounds<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 21,
                  "key.line": 109,
                  "key.name": "withTransparentBounds",
                  "key.namecolumn": 14,
                  "key.namelength": 21,
                  "key.nameline": 109,
                  "key.nameoffset": 6233,
                  "key.offset": 6233,
                  "key.parsed_declaration": "case withTransparentBounds",
                  "key.parsed_scope.end": 109,
                  "key.parsed_scope.start": 109,
                  "key.typename": "(RegularExpression.MatchingOptions.Type) -> RegularExpression.MatchingOptions",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC15MatchingOptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC15MatchingOptionsO21withTransparentBoundsyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 27,
              "key.line": 116,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 6764,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case withoutAnchoringBounds<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Specifies that ^ and $ will not automatically match the beginning and end of the search range, but\nwill still match the beginning and end of the entire string. This constant has no effect if the search\nrange contains the entire string. See `forEachMatch(in:options:range:using:)` for a description of the\nconstant in context.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"116\" column=\"14\"><Name>withoutAnchoringBounds<\/Name><USR>s:7Rubicon17RegularExpressionC15MatchingOptionsO22withoutAnchoringBoundsyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Specifies that ^ and $ will not automatically match the beginning and end of the search range, but will still match the beginning and end of the entire string. This constant has no effect if the search range contains the entire string. See <codeVoice>forEachMatch(in:options:range:using:)<\/codeVoice> for a description of the constant in context.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 116,
                  "key.doc.name": "withoutAnchoringBounds",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 378,
                  "key.docline": 111,
                  "key.docoffset": 6378,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>withoutAnchoringBounds<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 22,
                  "key.line": 116,
                  "key.name": "withoutAnchoringBounds",
                  "key.namecolumn": 14,
                  "key.namelength": 22,
                  "key.nameline": 116,
                  "key.nameoffset": 6769,
                  "key.offset": 6769,
                  "key.parsed_declaration": "case withoutAnchoringBounds",
                  "key.parsed_scope.end": 116,
                  "key.parsed_scope.start": 116,
                  "key.typename": "(RegularExpression.MatchingOptions.Type) -> RegularExpression.MatchingOptions",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC15MatchingOptionsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC15MatchingOptionsO22withoutAnchoringBoundsyA2EmF"
                }
              ]
            }
          ],
          "key.typename": "RegularExpression.MatchingOptions.Type",
          "key.typeusr": "$s7Rubicon17RegularExpressionC15MatchingOptionsOmD",
          "key.usr": "s:7Rubicon17RegularExpressionC15MatchingOptionsO"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>public enum <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.MatchingFlags<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 5,
              "key.length": 6,
              "key.line": 123,
              "key.offset": 7068
            }
          ],
          "key.bodycolumn": 32,
          "key.bodylength": 1172,
          "key.bodyline": 123,
          "key.bodyoffset": 7095,
          "key.column": 12,
          "key.doc.column": 17,
          "key.doc.comment": "Set by the Block as the matching progresses, completes, or fails. Used by the method\n`forEachMatch(in:options:range:using:)`.",
          "key.doc.declaration": "public enum Rubicon.RegularExpression.MatchingFlags",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"123\" column=\"17\"><Name>MatchingFlags<\/Name><USR>s:7Rubicon17RegularExpressionC13MatchingFlagsO<\/USR><Declaration>public enum Rubicon.RegularExpression.MatchingFlags<\/Declaration><CommentParts><Abstract><Para>Set by the Block as the matching progresses, completes, or fails. Used by the method <codeVoice>forEachMatch(in:options:range:using:)<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line": 123,
          "key.doc.name": "MatchingFlags",
          "key.doc.type": "Other",
          "key.doccolumn": 5,
          "key.doclength": 146,
          "key.docline": 120,
          "key.docoffset": 6918,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<decl.name>MatchingFlags<\/decl.name><\/decl.enum>",
          "key.kind": "source.lang.swift.decl.enum",
          "key.length": 1193,
          "key.line": 123,
          "key.name": "MatchingFlags",
          "key.namecolumn": 17,
          "key.namelength": 13,
          "key.nameline": 123,
          "key.nameoffset": 7080,
          "key.offset": 7075,
          "key.parsed_declaration": "public enum MatchingFlags",
          "key.parsed_scope.end": 144,
          "key.parsed_scope.start": 123,
          "key.substructure": [
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 13,
              "key.line": 127,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 7330,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case progress<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Set when the Block is called to report progress during a long-running match operation.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"127\" column=\"14\"><Name>progress<\/Name><USR>s:7Rubicon17RegularExpressionC13MatchingFlagsO8progressyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Set when the Block is called to report progress during a long-running match operation.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 127,
                  "key.doc.name": "progress",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 103,
                  "key.docline": 125,
                  "key.docoffset": 7219,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>progress<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 8,
                  "key.line": 127,
                  "key.name": "progress",
                  "key.namecolumn": 14,
                  "key.namelength": 8,
                  "key.nameline": 127,
                  "key.nameoffset": 7335,
                  "key.offset": 7335,
                  "key.parsed_declaration": "case progress",
                  "key.parsed_scope.end": 127,
                  "key.parsed_scope.start": 127,
                  "key.typename": "(RegularExpression.MatchingFlags.Type) -> RegularExpression.MatchingFlags",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC13MatchingFlagsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC13MatchingFlagsO8progressyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 14,
              "key.line": 131,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 7550,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case completed<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Set when the Block is called after matching has completed.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"131\" column=\"14\"><Name>completed<\/Name><USR>s:7Rubicon17RegularExpressionC13MatchingFlagsO9completedyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Set when the Block is called after matching has completed.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 131,
                  "key.doc.name": "completed",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 75,
                  "key.docline": 129,
                  "key.docoffset": 7467,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>completed<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 9,
                  "key.line": 131,
                  "key.name": "completed",
                  "key.namecolumn": 14,
                  "key.namelength": 9,
                  "key.nameline": 131,
                  "key.nameoffset": 7555,
                  "key.offset": 7555,
                  "key.parsed_declaration": "case completed",
                  "key.parsed_scope.end": 131,
                  "key.parsed_scope.start": 131,
                  "key.typename": "(RegularExpression.MatchingFlags.Type) -> RegularExpression.MatchingFlags",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC13MatchingFlagsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC13MatchingFlagsO9completedyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 11,
              "key.line": 135,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 7786,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case hitEnd<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Set when the current match operation reached the end of the search range.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"135\" column=\"14\"><Name>hitEnd<\/Name><USR>s:7Rubicon17RegularExpressionC13MatchingFlagsO6hitEndyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Set when the current match operation reached the end of the search range.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 135,
                  "key.doc.name": "hitEnd",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 90,
                  "key.docline": 133,
                  "key.docoffset": 7688,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>hitEnd<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 6,
                  "key.line": 135,
                  "key.name": "hitEnd",
                  "key.namecolumn": 14,
                  "key.namelength": 6,
                  "key.nameline": 135,
                  "key.nameoffset": 7791,
                  "key.offset": 7791,
                  "key.parsed_declaration": "case hitEnd",
                  "key.parsed_scope.end": 135,
                  "key.parsed_scope.start": 135,
                  "key.typename": "(RegularExpression.MatchingFlags.Type) -> RegularExpression.MatchingFlags",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC13MatchingFlagsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC13MatchingFlagsO6hitEndyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 16,
              "key.line": 139,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 8029,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case requiredEnd<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Set when the current match depended on the location of the end of the search range.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"139\" column=\"14\"><Name>requiredEnd<\/Name><USR>s:7Rubicon17RegularExpressionC13MatchingFlagsO11requiredEndyA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Set when the current match depended on the location of the end of the search range.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 139,
                  "key.doc.name": "requiredEnd",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 100,
                  "key.docline": 137,
                  "key.docoffset": 7921,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>requiredEnd<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 11,
                  "key.line": 139,
                  "key.name": "requiredEnd",
                  "key.namecolumn": 14,
                  "key.namelength": 11,
                  "key.nameline": 139,
                  "key.nameoffset": 8034,
                  "key.offset": 8034,
                  "key.parsed_declaration": "case requiredEnd",
                  "key.parsed_scope.end": 139,
                  "key.parsed_scope.start": 139,
                  "key.typename": "(RegularExpression.MatchingFlags.Type) -> RegularExpression.MatchingFlags",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC13MatchingFlagsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC13MatchingFlagsO11requiredEndyA2EmF"
                }
              ]
            },
            {
              "key.column": 9,
              "key.kind": "source.lang.swift.decl.enumcase",
              "key.length": 18,
              "key.line": 143,
              "key.namelength": 0,
              "key.nameoffset": 0,
              "key.offset": 8244,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>case internalError<\/Declaration>",
                  "key.column": 14,
                  "key.doc.column": 14,
                  "key.doc.comment": "Set when matching failed due to an internal error.",
                  "key.doc.declaration": "",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"143\" column=\"14\"><Name>internalError<\/Name><USR>s:7Rubicon17RegularExpressionC13MatchingFlagsO13internalErroryA2EmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Set when matching failed due to an internal error.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                  "key.doc.line": 143,
                  "key.doc.name": "internalError",
                  "key.doc.type": "Other",
                  "key.doccolumn": 9,
                  "key.doclength": 67,
                  "key.docline": 141,
                  "key.docoffset": 8169,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>internalError<\/decl.name><\/decl.enumelement>",
                  "key.kind": "source.lang.swift.decl.enumelement",
                  "key.length": 13,
                  "key.line": 143,
                  "key.name": "internalError",
                  "key.namecolumn": 14,
                  "key.namelength": 13,
                  "key.nameline": 143,
                  "key.nameoffset": 8249,
                  "key.offset": 8249,
                  "key.parsed_declaration": "case internalError",
                  "key.parsed_scope.end": 143,
                  "key.parsed_scope.start": 143,
                  "key.typename": "(RegularExpression.MatchingFlags.Type) -> RegularExpression.MatchingFlags",
                  "key.typeusr": "$sy7Rubicon17RegularExpressionC13MatchingFlagsOAEmcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC13MatchingFlagsO13internalErroryA2EmF"
                }
              ]
            }
          ],
          "key.typename": "RegularExpression.MatchingFlags.Type",
          "key.typeusr": "$s7Rubicon17RegularExpressionC13MatchingFlagsOmD",
          "key.usr": "s:7Rubicon17RegularExpressionC13MatchingFlagsO"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>public let options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/Type>]<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 5,
              "key.length": 6,
              "key.line": 149,
              "key.offset": 8444
            }
          ],
          "key.column": 12,
          "key.doc.column": 16,
          "key.doc.comment": "The options specified during creation.",
          "key.doc.declaration": "public let options: [RegularExpression.Options]",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"149\" column=\"16\"><Name>options<\/Name><USR>s:7Rubicon17RegularExpressionC7optionsSayAC7OptionsOGvp<\/USR><Declaration>public let options: [RegularExpression.Options]<\/Declaration><CommentParts><Abstract><Para>The options specified during creation.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line": 149,
          "key.doc.name": "options",
          "key.doc.type": "Other",
          "key.doccolumn": 5,
          "key.doclength": 51,
          "key.docline": 147,
          "key.docoffset": 8389,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>options<\/decl.name>: <decl.var.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/ref.enum>]<\/decl.var.type><\/decl.var.instance>",
          "key.kind": "source.lang.swift.decl.var.instance",
          "key.length": 40,
          "key.line": 149,
          "key.name": "options",
          "key.namecolumn": 16,
          "key.namelength": 7,
          "key.nameline": 149,
          "key.nameoffset": 8455,
          "key.offset": 8451,
          "key.parsed_declaration": "public let options: [RegularExpression.Options]",
          "key.parsed_scope.end": 149,
          "key.parsed_scope.start": 149,
          "key.typename": "[RegularExpression.Options]",
          "key.typeusr": "$sSay7Rubicon17RegularExpressionC7OptionsOGD",
          "key.usr": "s:7Rubicon17RegularExpressionC7optionsSayAC7OptionsOGvp"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open private(set) lazy var pattern: <Type usr=\"s:SS\">String<\/Type> { get set }<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.lazy",
              "key.column": 23,
              "key.length": 4,
              "key.line": 153,
              "key.offset": 8684
            },
            {
              "key.attribute": "source.decl.attribute.setter_access.private",
              "key.column": 10,
              "key.length": 12,
              "key.line": 153,
              "key.offset": 8671
            },
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 153,
              "key.offset": 8666
            }
          ],
          "key.column": 28,
          "key.doc.column": 32,
          "key.doc.comment": "The pattern specified during creation.",
          "key.doc.declaration": "open private(set) lazy var pattern: String { get set }",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"153\" column=\"32\"><Name>pattern<\/Name><USR>s:7Rubicon17RegularExpressionC7patternSSvp<\/USR><Declaration>open private(set) lazy var pattern: String { get set }<\/Declaration><CommentParts><Abstract><Para>The pattern specified during creation.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line": 153,
          "key.doc.name": "pattern",
          "key.doc.type": "Other",
          "key.doccolumn": 5,
          "key.doclength": 51,
          "key.docline": 151,
          "key.docoffset": 8611,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>private<\/syntaxtype.keyword>(set) <syntaxtype.keyword>lazy<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>pattern<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind": "source.lang.swift.decl.var.instance",
          "key.length": 51,
          "key.line": 153,
          "key.name": "pattern",
          "key.namecolumn": 32,
          "key.namelength": 7,
          "key.nameline": 153,
          "key.nameoffset": 8693,
          "key.offset": 8689,
          "key.parsed_declaration": "open private(set) lazy var pattern:               String = nsRegex.pattern",
          "key.parsed_scope.end": 153,
          "key.parsed_scope.start": 153,
          "key.setter_accessibility": "source.lang.swift.accessibility.private",
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon17RegularExpressionC7patternSSvp"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open private(set) lazy var numberOfCaptureGroups: <Type usr=\"s:Si\">Int<\/Type> { get set }<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.lazy",
              "key.column": 23,
              "key.length": 4,
              "key.line": 157,
              "key.offset": 8939
            },
            {
              "key.attribute": "source.decl.attribute.setter_access.private",
              "key.column": 10,
              "key.length": 12,
              "key.line": 157,
              "key.offset": 8926
            },
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 157,
              "key.offset": 8921
            }
          ],
          "key.column": 28,
          "key.doc.column": 32,
          "key.doc.comment": "The number of capture groups in the pattern.",
          "key.doc.declaration": "open private(set) lazy var numberOfCaptureGroups: Int { get set }",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"157\" column=\"32\"><Name>numberOfCaptureGroups<\/Name><USR>s:7Rubicon17RegularExpressionC21numberOfCaptureGroupsSivp<\/USR><Declaration>open private(set) lazy var numberOfCaptureGroups: Int { get set }<\/Declaration><CommentParts><Abstract><Para>The number of capture groups in the pattern.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line": 157,
          "key.doc.name": "numberOfCaptureGroups",
          "key.doc.type": "Other",
          "key.doccolumn": 5,
          "key.doclength": 57,
          "key.docline": 155,
          "key.docoffset": 8860,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>private<\/syntaxtype.keyword>(set) <syntaxtype.keyword>lazy<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>numberOfCaptureGroups<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind": "source.lang.swift.decl.var.instance",
          "key.length": 65,
          "key.line": 157,
          "key.name": "numberOfCaptureGroups",
          "key.namecolumn": 32,
          "key.namelength": 21,
          "key.nameline": 157,
          "key.nameoffset": 8948,
          "key.offset": 8944,
          "key.parsed_declaration": "open private(set) lazy var numberOfCaptureGroups: Int    = nsRegex.numberOfCaptureGroups",
          "key.parsed_scope.end": 157,
          "key.parsed_scope.start": 157,
          "key.setter_accessibility": "source.lang.swift.accessibility.private",
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon17RegularExpressionC21numberOfCaptureGroupsSivp"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.private",
          "key.annotated_decl": "<Declaration>private let nsRegex: <Type usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.private",
              "key.column": 5,
              "key.length": 7,
              "key.line": 162,
              "key.offset": 9290
            }
          ],
          "key.column": 13,
          "key.doc.column": 17,
          "key.doc.comment": "The underlying instance of\n<code>[NSRegularExpression](https:\/\/developer.apple.com\/documentation\/foundation\/NSRegularExpression)<\/code>.",
          "key.doc.declaration": "private let nsRegex: NSRegularExpression",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"162\" column=\"17\"><Name>nsRegex<\/Name><USR>s:7Rubicon17RegularExpressionC7nsRegex33_D2E85E0BC80DB5B8693346241D8D33ECLLSo09NSRegularC0Cvp<\/USR><Declaration>private let nsRegex: NSRegularExpression<\/Declaration><CommentParts><Abstract><Para>The underlying instance of <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/foundation\/NSRegularExpression\">NSRegularExpression<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line": 162,
          "key.doc.name": "nsRegex",
          "key.doc.type": "Other",
          "key.doccolumn": 5,
          "key.doclength": 157,
          "key.docline": 159,
          "key.docoffset": 9129,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>nsRegex<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/ref.class><\/decl.var.type><\/decl.var.instance>",
          "key.kind": "source.lang.swift.decl.var.instance",
          "key.length": 32,
          "key.line": 162,
          "key.name": "nsRegex",
          "key.namecolumn": 17,
          "key.namelength": 7,
          "key.nameline": 162,
          "key.nameoffset": 9302,
          "key.offset": 9298,
          "key.parsed_declaration": "private let nsRegex: NSRegularExpression",
          "key.parsed_scope.end": 162,
          "key.parsed_scope.start": 162,
          "key.typename": "NSRegularExpression",
          "key.typeusr": "$sSo19NSRegularExpressionCD",
          "key.usr": "s:7Rubicon17RegularExpressionC7nsRegex33_D2E85E0BC80DB5B8693346241D8D33ECLLSo09NSRegularC0Cvp"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>public init?(pattern: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/Type>] = [], error: inout <Type usr=\"s:s5ErrorP\">Error<\/Type>?)<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 5,
              "key.length": 6,
              "key.line": 173,
              "key.offset": 9836
            }
          ],
          "key.bodycolumn": 100,
          "key.bodylength": 245,
          "key.bodyline": 173,
          "key.bodyoffset": 9931,
          "key.column": 12,
          "key.doc.column": 12,
          "key.doc.comment": "Returns an initialized `RegularExpression` instance with the specified regular expression pattern and\noptions. If an error occurs then `nil` is returned.\n\n- Parameters:\n  - pattern: The regular expression pattern.\n  - options: The options.\n  - error: If initialization fails then this parameter will be set to the error.",
          "key.doc.declaration": "public init?(pattern: String, options: [RegularExpression.Options] = [], error: inout Error?)",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"173\" column=\"12\"><Name>init(pattern:options:error:)<\/Name><USR>s:7Rubicon17RegularExpressionC7pattern7options5errorACSgSS_SayAC7OptionsOGs5Error_pSgztcfc<\/USR><Declaration>public init?(pattern: String, options: [RegularExpression.Options] = [], error: inout Error?)<\/Declaration><CommentParts><Abstract><Para>Returns an initialized <codeVoice>RegularExpression<\/codeVoice> instance with the specified regular expression pattern and options. If an error occurs then <codeVoice>nil<\/codeVoice> is returned.<\/Para><\/Abstract><Parameters><Parameter><Name>pattern<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The regular expression pattern.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The options.<\/Para><\/Discussion><\/Parameter><Parameter><Name>error<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>If initialization fails then this parameter will be set to the error.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line": 173,
          "key.doc.name": "init(pattern:options:error:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The regular expression pattern."
                }
              ],
              "name": "pattern"
            },
            {
              "discussion": [
                {
                  "Para": "The options."
                }
              ],
              "name": "options"
            },
            {
              "discussion": [
                {
                  "Para": "If initialization fails then this parameter will be set to the error."
                }
              ],
              "name": "error"
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 381,
          "key.docline": 165,
          "key.docoffset": 9451,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>?(<decl.var.parameter><decl.var.parameter.argument_label>pattern<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>error<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol>?<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 334,
          "key.line": 173,
          "key.name": "init(pattern:options:error:)",
          "key.namecolumn": 12,
          "key.namelength": 86,
          "key.nameline": 173,
          "key.nameoffset": 9843,
          "key.offset": 9843,
          "key.parsed_declaration": "public init?(pattern: String, options: [RegularExpression.Options] = [], error: inout Error?)",
          "key.parsed_scope.end": 182,
          "key.parsed_scope.start": 173,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon17RegularExpressionC7pattern7optionsACSgSS_SayAC7OptionsOGtcfc\">init(pattern:options:)<\/RelatedName>"
            }
          ],
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression.Type) -> (String, [RegularExpression.Options], inout Error?) -> RegularExpression?",
          "key.typeusr": "$s7pattern7options5error7Rubicon17RegularExpressionCSgSS_SayAF7OptionsOGs5Error_pSgztcD",
          "key.usr": "s:7Rubicon17RegularExpressionC7pattern7options5errorACSgSS_SayAC7OptionsOGs5Error_pSgztcfc"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>public convenience init?(pattern: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/Type>] = [])<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.convenience",
              "key.column": 12,
              "key.length": 11,
              "key.line": 192,
              "key.offset": 10601
            },
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 5,
              "key.length": 6,
              "key.line": 192,
              "key.offset": 10594
            }
          ],
          "key.bodycolumn": 91,
          "key.bodylength": 98,
          "key.bodyline": 192,
          "key.bodyoffset": 10680,
          "key.column": 24,
          "key.doc.column": 24,
          "key.doc.comment": "Returns an initialized `RegularExpression` instance with the specified regular expression pattern and\noptions. If an error occurs then `nil` is returned.\n\n- Parameters:\n  - pattern: The regular expression pattern.\n  - options: The options.",
          "key.doc.declaration": "public convenience init?(pattern: String, options: [RegularExpression.Options] = [])",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"192\" column=\"24\"><Name>init(pattern:options:)<\/Name><USR>s:7Rubicon17RegularExpressionC7pattern7optionsACSgSS_SayAC7OptionsOGtcfc<\/USR><Declaration>public convenience init?(pattern: String, options: [RegularExpression.Options] = [])<\/Declaration><CommentParts><Abstract><Para>Returns an initialized <codeVoice>RegularExpression<\/codeVoice> instance with the specified regular expression pattern and options. If an error occurs then <codeVoice>nil<\/codeVoice> is returned.<\/Para><\/Abstract><Parameters><Parameter><Name>pattern<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The regular expression pattern.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The options.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line": 192,
          "key.doc.name": "init(pattern:options:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The regular expression pattern."
                }
              ],
              "name": "pattern"
            },
            {
              "discussion": [
                {
                  "Para": "The options."
                }
              ],
              "name": "options"
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 292,
          "key.docline": 185,
          "key.docoffset": 10298,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>convenience<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>?(<decl.var.parameter><decl.var.parameter.argument_label>pattern<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>)<\/decl.function.constructor>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 166,
          "key.line": 192,
          "key.name": "init(pattern:options:)",
          "key.namecolumn": 24,
          "key.namelength": 65,
          "key.nameline": 192,
          "key.nameoffset": 10613,
          "key.offset": 10613,
          "key.parsed_declaration": "public convenience init?(pattern: String, options: [RegularExpression.Options] = [])",
          "key.parsed_scope.end": 195,
          "key.parsed_scope.start": 192,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon17RegularExpressionC7pattern7options5errorACSgSS_SayAC7OptionsOGs5Error_pSgztcfc\">init(pattern:options:error:)<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>var e: <Type usr=\"s:s5ErrorP\">Error<\/Type>?<\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>e<\/decl.name>: <decl.var.type><ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol>?<\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 19,
              "key.line": 193,
              "key.name": "e",
              "key.namecolumn": 13,
              "key.namelength": 1,
              "key.nameline": 193,
              "key.nameoffset": 10693,
              "key.offset": 10689,
              "key.parsed_declaration": "var e: Error? = nil",
              "key.parsed_scope.end": 193,
              "key.parsed_scope.start": 193,
              "key.typename": "Error?",
              "key.typeusr": "$ss5Error_pSgD",
              "key.usr": "s:7Rubicon17RegularExpressionC7pattern7optionsACSgSS_SayAC7OptionsOGtcfc1eL_s5Error_pSgvp"
            }
          ],
          "key.typename": "(RegularExpression.Type) -> (String, [RegularExpression.Options]) -> RegularExpression?",
          "key.typeusr": "$s7pattern7options7Rubicon17RegularExpressionCSgSS_SayAE7OptionsOGtcD",
          "key.usr": "s:7Rubicon17RegularExpressionC7pattern7optionsACSgSS_SayAC7OptionsOGtcfc"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open class func escapedPattern(for string: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 211,
              "key.offset": 11601
            }
          ],
          "key.bodycolumn": 67,
          "key.bodylength": 49,
          "key.bodyline": 211,
          "key.bodyoffset": 11663,
          "key.column": 10,
          "key.doc.column": 21,
          "key.doc.comment": "Returns a string by adding backslash escapes as necessary to protect any characters that would match as\npattern metacharacters.\n\nReturns a string by adding backslash escapes as necessary to the given string, to escape any characters\nthat would otherwise be treated as pattern metacharacters. You typically use this method to match on a\nparticular string within a larger pattern.\n\nFor example, the string \"(N\/A)\" contains the pattern metacharacters (, \/, and ). The result of adding\nbackslash escapes to this string is \"\\\\(N\\\\\/A\\\\)\".\n\n- Parameter string: the string.\n- Returns: The escaped string.",
          "key.doc.declaration": "open class func escapedPattern(for string: String) -> String",
          "key.doc.discussion": [
            {
              "Para": "Returns a string by adding backslash escapes as necessary to the given string, to escape any characters that would otherwise be treated as pattern metacharacters. You typically use this method to match on a particular string within a larger pattern."
            },
            {
              "Para": "For example, the string “(N\/A)” contains the pattern metacharacters (, \/, and ). The result of adding backslash escapes to this string is “\\(N\\\/A\\)”."
            }
          ],
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"211\" column=\"21\"><Name>escapedPattern(for:)<\/Name><USR>s:7Rubicon17RegularExpressionC14escapedPattern3forS2S_tFZ<\/USR><Declaration>open class func escapedPattern(for string: String) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Returns a string by adding backslash escapes as necessary to protect any characters that would match as pattern metacharacters.<\/Para><\/Abstract><Parameters><Parameter><Name>string<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the string.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The escaped string.<\/Para><\/ResultDiscussion><Discussion><Para>Returns a string by adding backslash escapes as necessary to the given string, to escape any characters that would otherwise be treated as pattern metacharacters. You typically use this method to match on a particular string within a larger pattern.<\/Para><Para>For example, the string “(N\/A)” contains the pattern metacharacters (, \/, and ). The result of adding backslash escapes to this string is “\\(N\\\/A\\)”.<\/Para><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.line": 211,
          "key.doc.name": "escapedPattern(for:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "the string."
                }
              ],
              "name": "string"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The escaped string."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 697,
          "key.docline": 198,
          "key.docoffset": 10900,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>escapedPattern<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>for<\/decl.var.parameter.argument_label> <decl.var.parameter.name>string<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.class>",
          "key.kind": "source.lang.swift.decl.function.method.class",
          "key.length": 107,
          "key.line": 211,
          "key.name": "escapedPattern(for:)",
          "key.namecolumn": 21,
          "key.namelength": 34,
          "key.nameline": 211,
          "key.nameoffset": 11617,
          "key.offset": 11606,
          "key.parsed_declaration": "open class func escapedPattern(for string: String) -> String",
          "key.parsed_scope.end": 211,
          "key.parsed_scope.start": 211,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression.Type) -> (String) -> String",
          "key.typeusr": "$s3forS2S_tcD",
          "key.usr": "s:7Rubicon17RegularExpressionC14escapedPattern3forS2S_tFZ"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open class func escapedTemplate(for string: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 229,
              "key.offset": 12644
            }
          ],
          "key.bodycolumn": 68,
          "key.bodylength": 50,
          "key.bodyline": 229,
          "key.bodyoffset": 12707,
          "key.column": 10,
          "key.doc.column": 21,
          "key.doc.comment": "Returns a template string by adding backslash escapes as necessary to protect any characters that would\nmatch as pattern metacharacters\n\nReturns a string by adding backslash escapes as necessary to the given string, to escape any characters\nthat would otherwise be treated as pattern metacharacters. You typically use this method to match on a\nparticular string within a larger pattern.\n\nFor example, the string \"(N\/A)\" contains the pattern metacharacters (, \/, and ). The result of adding\nbackslash escapes to this string is \"\\\\(N\\\\\/A\\\\)\".\n\nSee Flag Options for the format of the resulting template string.\n\n- Parameter string: the template string.\n- Returns: The escaped template string.",
          "key.doc.declaration": "open class func escapedTemplate(for string: String) -> String",
          "key.doc.discussion": [
            {
              "Para": "Returns a string by adding backslash escapes as necessary to the given string, to escape any characters that would otherwise be treated as pattern metacharacters. You typically use this method to match on a particular string within a larger pattern."
            },
            {
              "Para": "For example, the string “(N\/A)” contains the pattern metacharacters (, \/, and ). The result of adding backslash escapes to this string is “\\(N\\\/A\\)”."
            },
            {
              "Para": "See Flag Options for the format of the resulting template string."
            }
          ],
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"229\" column=\"21\"><Name>escapedTemplate(for:)<\/Name><USR>s:7Rubicon17RegularExpressionC15escapedTemplate3forS2S_tFZ<\/USR><Declaration>open class func escapedTemplate(for string: String) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Returns a template string by adding backslash escapes as necessary to protect any characters that would match as pattern metacharacters<\/Para><\/Abstract><Parameters><Parameter><Name>string<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the template string.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The escaped template string.<\/Para><\/ResultDiscussion><Discussion><Para>Returns a string by adding backslash escapes as necessary to the given string, to escape any characters that would otherwise be treated as pattern metacharacters. You typically use this method to match on a particular string within a larger pattern.<\/Para><Para>For example, the string “(N\/A)” contains the pattern metacharacters (, \/, and ). The result of adding backslash escapes to this string is “\\(N\\\/A\\)”.<\/Para><Para>See Flag Options for the format of the resulting template string.<\/Para><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.line": 229,
          "key.doc.name": "escapedTemplate(for:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "the template string."
                }
              ],
              "name": "string"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The escaped template string."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 806,
          "key.docline": 214,
          "key.docoffset": 11834,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>escapedTemplate<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>for<\/decl.var.parameter.argument_label> <decl.var.parameter.name>string<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.class>",
          "key.kind": "source.lang.swift.decl.function.method.class",
          "key.length": 109,
          "key.line": 229,
          "key.name": "escapedTemplate(for:)",
          "key.namecolumn": 21,
          "key.namelength": 35,
          "key.nameline": 229,
          "key.nameoffset": 12660,
          "key.offset": 12649,
          "key.parsed_declaration": "open class func escapedTemplate(for string: String) -> String",
          "key.parsed_scope.end": 229,
          "key.parsed_scope.start": 229,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression.Type) -> (String) -> String",
          "key.typeusr": "$s3forS2S_tcD",
          "key.usr": "s:7Rubicon17RegularExpressionC15escapedTemplate3forS2S_tFZ"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open func numberOfMatches(in str: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>] = [], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;? = nil) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 240,
              "key.offset": 13293
            }
          ],
          "key.bodycolumn": 141,
          "key.bodylength": 131,
          "key.bodyline": 240,
          "key.bodyoffset": 13429,
          "key.column": 10,
          "key.doc.column": 15,
          "key.doc.comment": "Returns the number of matches of the regular expression within the specified range of the string.\n\n- Parameters:\n  - str: The search string.\n  - options: The matching options to use. See `RegularExpression.MatchingOptions` for possible values.\n  - range: The range of the string to search.\n- Returns: The number of matches of the regular expression.",
          "key.doc.declaration": "open func numberOfMatches(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil) -> Int",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"240\" column=\"15\"><Name>numberOfMatches(in:options:range:)<\/Name><USR>s:7Rubicon17RegularExpressionC15numberOfMatches2in7options5rangeSiSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgtF<\/USR><Declaration>open func numberOfMatches(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range&lt;String.Index&gt;? = nil) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Returns the number of matches of the regular expression within the specified range of the string.<\/Para><\/Abstract><Parameters><Parameter><Name>str<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The search string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The matching options to use. See <codeVoice>RegularExpression.MatchingOptions<\/codeVoice> for possible values.<\/Para><\/Discussion><\/Parameter><Parameter><Name>range<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The range of the string to search.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The number of matches of the regular expression.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 240,
          "key.doc.name": "numberOfMatches(in:options:range:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The search string."
                }
              ],
              "name": "str"
            },
            {
              "discussion": [
                {
                  "Para": "The matching options to use. See `RegularExpression.MatchingOptions` for possible values."
                }
              ],
              "name": "options"
            },
            {
              "discussion": [
                {
                  "Para": "The range of the string to search."
                }
              ],
              "name": "range"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The number of matches of the regular expression."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 410,
          "key.docline": 232,
          "key.docoffset": 12879,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>numberOfMatches<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 263,
          "key.line": 240,
          "key.name": "numberOfMatches(in:options:range:)",
          "key.namecolumn": 15,
          "key.namelength": 117,
          "key.nameline": 240,
          "key.nameoffset": 13303,
          "key.offset": 13298,
          "key.parsed_declaration": "open func numberOfMatches(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil) -> Int",
          "key.parsed_scope.end": 242,
          "key.parsed_scope.start": 240,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression) -> (String, [RegularExpression.MatchingOptions], Range<String.Index>?) -> Int",
          "key.typeusr": "$s2in7options5rangeSiSS_Say7Rubicon17RegularExpressionC15MatchingOptionsOGSnySS5IndexVGSgtcD",
          "key.usr": "s:7Rubicon17RegularExpressionC15numberOfMatches2in7options5rangeSiSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgtF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open func rangeOfFirstMatch(in str: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>] = [], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;? = nil) -&gt; <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;?<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 253,
              "key.offset": 14053
            }
          ],
          "key.bodycolumn": 160,
          "key.bodylength": 153,
          "key.bodyline": 253,
          "key.bodyoffset": 14208,
          "key.column": 10,
          "key.doc.column": 15,
          "key.doc.comment": "Returns the range of the first match.\n\n- Parameters:\n  - str: The search string.\n  - options: The matching options to use. See `RegularExpression.MatchingOptions` for possible values.\n  - range: The range of the string to search.\n- Returns: The range of the first match of `nil` if the match was not found.",
          "key.doc.declaration": "open func rangeOfFirstMatch(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil) -> Range<String.Index>?",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"253\" column=\"15\"><Name>rangeOfFirstMatch(in:options:range:)<\/Name><USR>s:7Rubicon17RegularExpressionC17rangeOfFirstMatch2in7options0D0SnySS5IndexVGSgSS_SayAC15MatchingOptionsOGAKtF<\/USR><Declaration>open func rangeOfFirstMatch(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range&lt;String.Index&gt;? = nil) -&gt; Range&lt;String.Index&gt;?<\/Declaration><CommentParts><Abstract><Para>Returns the range of the first match.<\/Para><\/Abstract><Parameters><Parameter><Name>str<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The search string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The matching options to use. See <codeVoice>RegularExpression.MatchingOptions<\/codeVoice> for possible values.<\/Para><\/Discussion><\/Parameter><Parameter><Name>range<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The range of the string to search.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The range of the first match of <codeVoice>nil<\/codeVoice> if the match was not found.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 253,
          "key.doc.name": "rangeOfFirstMatch(in:options:range:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The search string."
                }
              ],
              "name": "str"
            },
            {
              "discussion": [
                {
                  "Para": "The matching options to use. See `RegularExpression.MatchingOptions` for possible values."
                }
              ],
              "name": "options"
            },
            {
              "discussion": [
                {
                  "Para": "The range of the string to search."
                }
              ],
              "name": "range"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The range of the first match of `nil` if the match was not found."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 367,
          "key.docline": 245,
          "key.docoffset": 13682,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>rangeOfFirstMatch<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 304,
          "key.line": 253,
          "key.name": "rangeOfFirstMatch(in:options:range:)",
          "key.namecolumn": 15,
          "key.namelength": 119,
          "key.nameline": 253,
          "key.nameoffset": 14063,
          "key.offset": 14058,
          "key.parsed_declaration": "open func rangeOfFirstMatch(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil) -> Range<String.Index>?",
          "key.parsed_scope.end": 255,
          "key.parsed_scope.start": 253,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression) -> (String, [RegularExpression.MatchingOptions], Range<String.Index>?) -> Range<String.Index>?",
          "key.typeusr": "$s2in7options5rangeSnySS5IndexVGSgSS_Say7Rubicon17RegularExpressionC15MatchingOptionsOGAGtcD",
          "key.usr": "s:7Rubicon17RegularExpressionC17rangeOfFirstMatch2in7options0D0SnySS5IndexVGSgSS_SayAC15MatchingOptionsOGAKtF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open func firstMatch(in str: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>] = [], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;? = nil) -&gt; <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>?<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 267,
              "key.offset": 14941
            }
          ],
          "key.bodycolumn": 139,
          "key.bodylength": 204,
          "key.bodyline": 267,
          "key.bodyoffset": 15075,
          "key.column": 10,
          "key.doc.column": 15,
          "key.doc.comment": "Returns the first `RegularExpression.Match` found in the search string.\n\n- Parameters:\n  - str: The search string.\n  - options: The matching options to use. See `RegularExpression.MatchingOptions` for possible values.\n  - range: The range of the string to search.\n- Returns: The first `RegularExpression.Match` found in the search string or `nil` if the match was not\n           found.",
          "key.doc.declaration": "open func firstMatch(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil) -> Match?",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"267\" column=\"15\"><Name>firstMatch(in:options:range:)<\/Name><USR>s:7Rubicon17RegularExpressionC10firstMatch2in7options5rangeAC0E0CSgSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgtF<\/USR><Declaration>open func firstMatch(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range&lt;String.Index&gt;? = nil) -&gt; Match?<\/Declaration><CommentParts><Abstract><Para>Returns the first <codeVoice>RegularExpression.Match<\/codeVoice> found in the search string.<\/Para><\/Abstract><Parameters><Parameter><Name>str<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The search string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The matching options to use. See <codeVoice>RegularExpression.MatchingOptions<\/codeVoice> for possible values.<\/Para><\/Discussion><\/Parameter><Parameter><Name>range<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The range of the string to search.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The first <codeVoice>RegularExpression.Match<\/codeVoice> found in the search string or <codeVoice>nil<\/codeVoice> if the match was not found.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 267,
          "key.doc.name": "firstMatch(in:options:range:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The search string."
                }
              ],
              "name": "str"
            },
            {
              "discussion": [
                {
                  "Para": "The matching options to use. See `RegularExpression.MatchingOptions` for possible values."
                }
              ],
              "name": "options"
            },
            {
              "discussion": [
                {
                  "Para": "The range of the string to search."
                }
              ],
              "name": "range"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The first `RegularExpression.Match` found in the search string or `nil` if the match was not found."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 454,
          "key.docline": 258,
          "key.docoffset": 14483,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>firstMatch<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 334,
          "key.line": 267,
          "key.name": "firstMatch(in:options:range:)",
          "key.namecolumn": 15,
          "key.namelength": 112,
          "key.nameline": 267,
          "key.nameoffset": 14951,
          "key.offset": 14946,
          "key.parsed_declaration": "open func firstMatch(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil) -> Match?",
          "key.parsed_scope.end": 270,
          "key.parsed_scope.start": 267,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression) -> (String, [RegularExpression.MatchingOptions], Range<String.Index>?) -> RegularExpression.Match?",
          "key.typeusr": "$s2in7options5range7Rubicon17RegularExpressionC5MatchCSgSS_SayAF15MatchingOptionsOGSnySS5IndexVGSgtcD",
          "key.usr": "s:7Rubicon17RegularExpressionC10firstMatch2in7options5rangeAC0E0CSgSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgtF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open func matches(in str: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>] = [], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;? = nil) -&gt; [<Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>]<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 282,
              "key.offset": 15873
            }
          ],
          "key.bodycolumn": 137,
          "key.bodylength": 153,
          "key.bodyline": 282,
          "key.bodyoffset": 16005,
          "key.column": 10,
          "key.doc.column": 15,
          "key.doc.comment": "Returns all of the `RegularExpression.Match`s found in the search string.\n\n- Parameters:\n  - str: The search string.\n  - options: The matching options to use. See `RegularExpression.MatchingOptions` for possible values.\n  - range: The range of the string to search.\n- Returns: An array of `RegularExpression.Match`s found in the search string or an empty array if the\n           match was not found.",
          "key.doc.declaration": "open func matches(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil) -> [Match]",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"282\" column=\"15\"><Name>matches(in:options:range:)<\/Name><USR>s:7Rubicon17RegularExpressionC7matches2in7options5rangeSayAC5MatchCGSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgtF<\/USR><Declaration>open func matches(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range&lt;String.Index&gt;? = nil) -&gt; [Match]<\/Declaration><CommentParts><Abstract><Para>Returns all of the <codeVoice>RegularExpression.Match<\/codeVoice>s found in the search string.<\/Para><\/Abstract><Parameters><Parameter><Name>str<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The search string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The matching options to use. See <codeVoice>RegularExpression.MatchingOptions<\/codeVoice> for possible values.<\/Para><\/Discussion><\/Parameter><Parameter><Name>range<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The range of the string to search.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>An array of <codeVoice>RegularExpression.Match<\/codeVoice>s found in the search string or an empty array if the match was not found.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 282,
          "key.doc.name": "matches(in:options:range:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The search string."
                }
              ],
              "name": "str"
            },
            {
              "discussion": [
                {
                  "Para": "The matching options to use. See `RegularExpression.MatchingOptions` for possible values."
                }
              ],
              "name": "options"
            },
            {
              "discussion": [
                {
                  "Para": "The range of the string to search."
                }
              ],
              "name": "range"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "An array of `RegularExpression.Match`s found in the search string or an empty array if the match was not found."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 468,
          "key.docline": 273,
          "key.docoffset": 15401,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>matches<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class>]<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 281,
          "key.line": 282,
          "key.name": "matches(in:options:range:)",
          "key.namecolumn": 15,
          "key.namelength": 109,
          "key.nameline": 282,
          "key.nameoffset": 15883,
          "key.offset": 15878,
          "key.parsed_declaration": "open func matches(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil) -> [Match]",
          "key.parsed_scope.end": 284,
          "key.parsed_scope.start": 282,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression) -> (String, [RegularExpression.MatchingOptions], Range<String.Index>?) -> [RegularExpression.Match]",
          "key.typeusr": "$s2in7options5rangeSay7Rubicon17RegularExpressionC5MatchCGSS_SayAF15MatchingOptionsOGSnySS5IndexVGSgtcD",
          "key.usr": "s:7Rubicon17RegularExpressionC7matches2in7options5rangeSayAC5MatchCGSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgtF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open func forEachMatch(in str: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>] = [], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;? = nil, using body: <Type usr=\"s:7Rubicon16MatchEnumClosurea\">MatchEnumClosure<\/Type>)<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 9,
              "key.length": 4,
              "key.line": 358,
              "key.offset": 21377
            }
          ],
          "key.bodycolumn": 165,
          "key.bodylength": 402,
          "key.bodyline": 358,
          "key.bodyoffset": 21533,
          "key.column": 14,
          "key.doc.comment": "Enumerates the string allowing the Block to handle each regular expression match.\n\n<b>NOTE:<\/b> Having this as a throwing function rather than a rethrowing function is not ideal but given\nthat NSRegularExpression doesn't allow the closure to throw anything sort of removes that option from us.\nAt least I haven't found an easy way around it. So I decided to have to have this method `throws` and in\nthe future, if we can fix this issue, make it `rethrows` then.\n\nThis method is the fundamental matching method for regular expressions and is suitable for overriding by\nsubclassers. There are additional convenience methods for returning all the matches as an array, the total\nnumber of matches, the first match, and the range of the first match.\n\nBy default, the Block iterator method calls the Block precisely once for each match, with a non-`nil`\nmatch and the appropriate flags. The client may then stop the operation by returning `true` from the block\ninstead of `false`.\n\nIf the `RegularExpression.MatchingOptions.reportProgress` matching option is specified, the Block will\nalso be called periodically during long-running match operations, with `nil` result and progress matching\nflag set in the Block’s flags parameter, at which point the client may again stop the operation by\nreturning `true` instead of `false`.\n\nIf the `RegularExpression.MatchingOptions.reportCompletion` matching option is specified, the Block object\nwill be called once after matching is complete, with `nil` result and the completed matching flag is set\nin the flags passed to the Block, plus any additional relevant `RegularExpression.MatchingFlags` from\namong `RegularExpression.MatchingFlags.hitEnd`, `RegularExpression.MatchingFlags.requiredEnd`, or\n`RegularExpression.MatchingFlags.internalError`.\n\n`RegularExpression.MatchingFlags.progress` and `RegularExpression.MatchingFlags.completed` matching flags\nhave no effect for methods other than this method.\n\nThe `RegularExpression.MatchingFlags.hitEnd` matching flag is set in the flags passed to the Block if the\ncurrent match operation reached the end of the search range. The\n`RegularExpression.MatchingFlags.requiredEnd` matching flag is set in the flags passed to the Block if the\ncurrent match depended on the location of the end of the search range.\n\nThe `RegularExpression.MatchingFlags` matching flag is set in the flags passed to the block if matching\nfailed due to an internal error (such as an expression requiring exponential memory allocations) without\nexamining the entire search range.\n\nThe `RegularExpression.Options.anchored`, `RegularExpression.Options.withTransparentBounds`, and\n`RegularExpression.Options.withoutAnchoringBounds` regular expression options, specified in the options\nproperty specified when the regular expression instance is created, can apply to any match or replace\nmethod.\n\nIf `RegularExpression.Options.anchored` matching option is specified, matches are limited to those at the\nstart of the search range.\n\nIf `RegularExpression.Options.withTransparentBounds` matching option is specified, matching may examine\nparts of the string beyond the bounds of the search range, for purposes such as word boundary detection,\nlookahead, etc.\n\nIf `RegularExpression.Options.withoutAnchoringBounds` matching option is specified, ^ and $ will not\nautomatically match the beginning and end of the search range, but will still match the beginning and end\nof the entire string.\n\n`RegularExpression.Options.withTransparentBounds` and `RegularExpression.Options.withoutAnchoringBounds`\nmatching options have no effect if the search range covers the entire string.\n\n- Parameters:\n  - str: The search string.\n  - options: The matching options to report. See `RegularExpression.MatchingOptions` for the supported\n             values.\n  - range: The range of the string to search.\n  - body: The Block that is called for each match found in the search string. The Block takes two (2)\n          parameters&#58; <dl><dt><b><i>match<\/i><\/b><\/dt><dd>An instance of `RegularExpression.Match` or\n          `nil` if the Block is simply being called with the flags\n          `RegularExpression.MatchingFlags.completed`, `RegularExpression.MatchingFlags.hitEnd`, or\n          `RegularExpression.MatchingFlags.internalError`<\/dd> <dt><b><i>flags<\/i><\/b><\/dt><dd>An array of\n          `RegularExpression.MatchingFlags`.<\/dd><\/dl> The closure returns `true` to stop the enumeration\n          or `false` to continue to the next match.",
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>forEachMatch<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>using<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon16MatchEnumClosurea\">MatchEnumClosure<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 554,
          "key.line": 358,
          "key.name": "forEachMatch(in:options:range:using:)",
          "key.namecolumn": 19,
          "key.namelength": 144,
          "key.nameline": 358,
          "key.nameoffset": 21387,
          "key.offset": 21382,
          "key.parsed_declaration": "open func forEachMatch(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil, using body: MatchEnumClosure)",
          "key.parsed_scope.end": 364,
          "key.parsed_scope.start": 358,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression) -> (String, [RegularExpression.MatchingOptions], Range<String.Index>?, (RegularExpression.Match?, [RegularExpression.MatchingFlags], inout Bool) -> ()) -> ()",
          "key.typeusr": "$s2in7options5range5usingySS_Say7Rubicon17RegularExpressionC15MatchingOptionsOGSnySS5IndexVGSgyAG5MatchCSg_SayAG0H5FlagsOGSbztXEtcD",
          "key.usr": "s:7Rubicon17RegularExpressionC12forEachMatch2in7options5range5usingySS_SayAC15MatchingOptionsOGSnySS5IndexVGSgyAC0F0CSg_SayAC0K5FlagsOGSbztXEtF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 9,
              "key.length": 4,
              "key.line": 366,
              "key.offset": 21955
            }
          ],
          "key.bodycolumn": 165,
          "key.bodylength": 137,
          "key.bodyline": 366,
          "key.bodyoffset": 22111,
          "key.column": 14,
          "key.internal_diagnostic": "Unable to resolve cursor info.",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 289,
          "key.line": 366,
          "key.name": "forEachMatch(in:options:range:using:)",
          "key.namecolumn": 19,
          "key.namelength": 144,
          "key.nameline": 366,
          "key.nameoffset": 21965,
          "key.offset": 21960,
          "key.substructure": [
          ]
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.private",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.private",
              "key.column": 9,
              "key.length": 7,
              "key.line": 370,
              "key.offset": 22259
            }
          ],
          "key.bodycolumn": 168,
          "key.bodylength": 402,
          "key.bodyline": 370,
          "key.bodyoffset": 22418,
          "key.column": 17,
          "key.internal_diagnostic": "Unable to resolve cursor info.",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 554,
          "key.line": 370,
          "key.name": "_forEachMatch(in:options:range:using:)",
          "key.namecolumn": 22,
          "key.namelength": 144,
          "key.nameline": 370,
          "key.nameoffset": 22272,
          "key.offset": 22267,
          "key.substructure": [
          ]
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open func forEachMatchGroup(in str: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>] = [], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;? = nil, using body: ([<Type usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/Type>], inout <Type usr=\"s:Sb\">Bool<\/Type>) -&gt; <Type usr=\"s:s4Voida\">Void<\/Type>)<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 399,
              "key.offset": 24248
            }
          ],
          "key.bodycolumn": 179,
          "key.bodylength": 132,
          "key.bodyline": 399,
          "key.bodyoffset": 24422,
          "key.column": 10,
          "key.doc.column": 15,
          "key.doc.comment": "Enumerates the string allowing the Block to handle each regular expression match.\n\nThis method is the fundamental matching method for regular expressions and is suitable for overriding by\nsubclassers. There are additional convenience methods for returning all the matches as an array, the total\nnumber of matches, the first match, and the range of the first match.\n\nBy default, the Block iterator method calls the Block precisely once for each match, with an array of the\n`RegularExpression.Group`s representing each capture group. The client may then stop the operation by\nreturning `true` from the block instead of `false`.\n\n- Parameters:\n  - str: The search string.\n  - options: The matching options to report. See `RegularExpression.MatchingOptions` for the supported\n             values.\n  - range: The range of the string to search.\n  - body: The closure that is called for each match found in the search string. The closure takes one\n          parameter which is an array of `RegularExpression.Group` objects representing each capture group\n          and returns `true` to stop the enumeration or `false` to continue to the next match.",
          "key.doc.declaration": "open func forEachMatchGroup(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil, using body: ([Group], inout Bool) -> Void)",
          "key.doc.discussion": [
            {
              "Para": "This method is the fundamental matching method for regular expressions and is suitable for overriding by subclassers. There are additional convenience methods for returning all the matches as an array, the total number of matches, the first match, and the range of the first match."
            },
            {
              "Para": "By default, the Block iterator method calls the Block precisely once for each match, with an array of the `RegularExpression.Group`s representing each capture group. The client may then stop the operation by returning `true` from the block instead of `false`."
            }
          ],
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"399\" column=\"15\"><Name>forEachMatchGroup(in:options:range:using:)<\/Name><USR>s:7Rubicon17RegularExpressionC17forEachMatchGroup2in7options5range5usingySS_SayAC15MatchingOptionsOGSnySS5IndexVGSgySayAC0G0CG_SbztXEtF<\/USR><Declaration>open func forEachMatchGroup(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range&lt;String.Index&gt;? = nil, using body: ([Group], inout Bool) -&gt; Void)<\/Declaration><CommentParts><Abstract><Para>Enumerates the string allowing the Block to handle each regular expression match.<\/Para><\/Abstract><Parameters><Parameter><Name>str<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The search string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The matching options to report. See <codeVoice>RegularExpression.MatchingOptions<\/codeVoice> for the supported values.<\/Para><\/Discussion><\/Parameter><Parameter><Name>range<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The range of the string to search.<\/Para><\/Discussion><\/Parameter><Parameter><Name>body<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure that is called for each match found in the search string. The closure takes one parameter which is an array of <codeVoice>RegularExpression.Group<\/codeVoice> objects representing each capture group and returns <codeVoice>true<\/codeVoice> to stop the enumeration or <codeVoice>false<\/codeVoice> to continue to the next match.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>This method is the fundamental matching method for regular expressions and is suitable for overriding by subclassers. There are additional convenience methods for returning all the matches as an array, the total number of matches, the first match, and the range of the first match.<\/Para><Para>By default, the Block iterator method calls the Block precisely once for each match, with an array of the <codeVoice>RegularExpression.Group<\/codeVoice>s representing each capture group. The client may then stop the operation by returning <codeVoice>true<\/codeVoice> from the block instead of <codeVoice>false<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.line": 399,
          "key.doc.name": "forEachMatchGroup(in:options:range:using:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The search string."
                }
              ],
              "name": "str"
            },
            {
              "discussion": [
                {
                  "Para": "The matching options to report. See `RegularExpression.MatchingOptions` for the supported values."
                }
              ],
              "name": "options"
            },
            {
              "discussion": [
                {
                  "Para": "The range of the string to search."
                }
              ],
              "name": "range"
            },
            {
              "discussion": [
                {
                  "Para": "The closure that is called for each match found in the search string. The closure takes one parameter which is an array of `RegularExpression.Group` objects representing each capture group and returns `true` to stop the enumeration or `false` to continue to the next match."
                }
              ],
              "name": "body"
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 1291,
          "key.docline": 380,
          "key.docoffset": 22953,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>forEachMatchGroup<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>using<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/ref.class>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:s4Voida\">Void<\/ref.typealias><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 302,
          "key.line": 399,
          "key.name": "forEachMatchGroup(in:options:range:using:)",
          "key.namecolumn": 15,
          "key.namelength": 162,
          "key.nameline": 399,
          "key.nameoffset": 24258,
          "key.offset": 24253,
          "key.parsed_declaration": "open func forEachMatchGroup(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil, using body: ([Group], inout Bool) -> Void)",
          "key.parsed_scope.end": 401,
          "key.parsed_scope.start": 399,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression) -> (String, [RegularExpression.MatchingOptions], Range<String.Index>?, ([RegularExpression.Group], inout Bool) -> ()) -> ()",
          "key.typeusr": "$s2in7options5range5usingySS_Say7Rubicon17RegularExpressionC15MatchingOptionsOGSnySS5IndexVGSgySayAG5GroupCG_SbztXEtcD",
          "key.usr": "s:7Rubicon17RegularExpressionC17forEachMatchGroup2in7options5range5usingySS_SayAC15MatchingOptionsOGSnySS5IndexVGSgySayAC0G0CG_SbztXEtF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open func forEachMatchString(in str: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>] = [], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;? = nil, using body: ([<Type usr=\"s:SS\">String<\/Type>?], inout <Type usr=\"s:Sb\">Bool<\/Type>) -&gt; <Type usr=\"s:s4Voida\">Void<\/Type>)<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 416,
              "key.offset": 25456
            }
          ],
          "key.bodycolumn": 182,
          "key.bodylength": 133,
          "key.bodyline": 416,
          "key.bodyoffset": 25633,
          "key.column": 10,
          "key.doc.column": 15,
          "key.doc.comment": "Enumerates the string allowing the Block to handle each regular expression match.\n\n- Parameters:\n  - str: The search string.\n  - options: The matching options to report. See `RegularExpression.MatchingOptions` for the supported\n             values.\n  - range: The range of the string to search.\n  - body: The closure that is called for each match found in the search string. The closure takes one\n          parameter which is an array of Strings representing each capture group and returns `true` to\n          stop the enumeration or `false` to continue to the next match. Any of the strings in the array\n          may be `nil` if that capture group did not participate in the match.",
          "key.doc.declaration": "open func forEachMatchString(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil, using body: ([String?], inout Bool) -> Void)",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"416\" column=\"15\"><Name>forEachMatchString(in:options:range:using:)<\/Name><USR>s:7Rubicon17RegularExpressionC18forEachMatchString2in7options5range5usingySS_SayAC15MatchingOptionsOGSnySS5IndexVGSgySaySSSgG_SbztXEtF<\/USR><Declaration>open func forEachMatchString(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range&lt;String.Index&gt;? = nil, using body: ([String?], inout Bool) -&gt; Void)<\/Declaration><CommentParts><Abstract><Para>Enumerates the string allowing the Block to handle each regular expression match.<\/Para><\/Abstract><Parameters><Parameter><Name>str<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The search string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The matching options to report. See <codeVoice>RegularExpression.MatchingOptions<\/codeVoice> for the supported values.<\/Para><\/Discussion><\/Parameter><Parameter><Name>range<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The range of the string to search.<\/Para><\/Discussion><\/Parameter><Parameter><Name>body<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure that is called for each match found in the search string. The closure takes one parameter which is an array of Strings representing each capture group and returns <codeVoice>true<\/codeVoice> to stop the enumeration or <codeVoice>false<\/codeVoice> to continue to the next match. Any of the strings in the array may be <codeVoice>nil<\/codeVoice> if that capture group did not participate in the match.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line": 416,
          "key.doc.name": "forEachMatchString(in:options:range:using:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The search string."
                }
              ],
              "name": "str"
            },
            {
              "discussion": [
                {
                  "Para": "The matching options to report. See `RegularExpression.MatchingOptions` for the supported values."
                }
              ],
              "name": "options"
            },
            {
              "discussion": [
                {
                  "Para": "The range of the string to search."
                }
              ],
              "name": "range"
            },
            {
              "discussion": [
                {
                  "Para": "The closure that is called for each match found in the search string. The closure takes one parameter which is an array of Strings representing each capture group and returns `true` to stop the enumeration or `false` to continue to the next match. Any of the strings in the array may be `nil` if that capture group did not participate in the match."
                }
              ],
              "name": "body"
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 776,
          "key.docline": 404,
          "key.docoffset": 24676,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>forEachMatchString<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>using<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>?]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:s4Voida\">Void<\/ref.typealias><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 306,
          "key.line": 416,
          "key.name": "forEachMatchString(in:options:range:using:)",
          "key.namecolumn": 15,
          "key.namelength": 165,
          "key.nameline": 416,
          "key.nameoffset": 25466,
          "key.offset": 25461,
          "key.parsed_declaration": "open func forEachMatchString(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil, using body: ([String?], inout Bool) -> Void)",
          "key.parsed_scope.end": 418,
          "key.parsed_scope.start": 416,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression) -> (String, [RegularExpression.MatchingOptions], Range<String.Index>?, ([String?], inout Bool) -> ()) -> ()",
          "key.typeusr": "$s2in7options5range5usingySS_Say7Rubicon17RegularExpressionC15MatchingOptionsOGSnySS5IndexVGSgySaySSSgG_SbztXEtcD",
          "key.usr": "s:7Rubicon17RegularExpressionC18forEachMatchString2in7options5range5usingySS_SayAC15MatchingOptionsOGSnySS5IndexVGSgySaySSSgG_SbztXEtF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open func stringByReplacingMatches(in str: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>] = [], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;? = nil, withTemplate templ: <Type usr=\"s:SS\">String<\/Type>) -&gt; (<Type usr=\"s:SS\">String<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 434,
              "key.offset": 26663
            }
          ],
          "key.bodycolumn": 188,
          "key.bodylength": 245,
          "key.bodyline": 434,
          "key.bodyoffset": 26846,
          "key.column": 10,
          "key.doc.column": 15,
          "key.doc.comment": "RegularExpression also provides a find-and-replace method strings. The replacement is treated as a\ntemplate, with $0 being replaced by the contents of the matched range, $1 by the contents of the first\ncapture group, and so on. Additional digits beyond the maximum required to represent the number of capture\ngroups will be treated as ordinary characters, as will a $ not followed by digits. Backslash will escape\nboth $ and itself.\n\n- Parameters:\n  - string: The string.\n  - options: The match options.\n  - range: The range of the string to search in.\n  - templ: The replacement template.\n- Returns: A tuple with the modified string and the number of replacements made.",
          "key.doc.declaration": "open func stringByReplacingMatches(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil, withTemplate templ: String) -> (String, Int)",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"434\" column=\"15\"><Name>stringByReplacingMatches(in:options:range:withTemplate:)<\/Name><USR>s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range12withTemplateSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSStF<\/USR><Declaration>open func stringByReplacingMatches(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range&lt;String.Index&gt;? = nil, withTemplate templ: String) -&gt; (String, Int)<\/Declaration><CommentParts><Abstract><Para>RegularExpression also provides a find-and-replace method strings. The replacement is treated as a template, with $0 being replaced by the contents of the matched range, $1 by the contents of the first capture group, and so on. Additional digits beyond the maximum required to represent the number of capture groups will be treated as ordinary characters, as will a $ not followed by digits. Backslash will escape both $ and itself.<\/Para><\/Abstract><Parameters><Parameter><Name>string<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The match options.<\/Para><\/Discussion><\/Parameter><Parameter><Name>range<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The range of the string to search in.<\/Para><\/Discussion><\/Parameter><Parameter><Name>templ<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The replacement template.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A tuple with the modified string and the number of replacements made.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 434,
          "key.doc.name": "stringByReplacingMatches(in:options:range:withTemplate:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The string."
                }
              ],
              "name": "string"
            },
            {
              "discussion": [
                {
                  "Para": "The match options."
                }
              ],
              "name": "options"
            },
            {
              "discussion": [
                {
                  "Para": "The range of the string to search in."
                }
              ],
              "name": "range"
            },
            {
              "discussion": [
                {
                  "Para": "The replacement template."
                }
              ],
              "name": "templ"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "A tuple with the modified string and the number of replacements made."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 771,
          "key.docline": 421,
          "key.docoffset": 25888,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>stringByReplacingMatches<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>withTemplate<\/decl.var.parameter.argument_label> <decl.var.parameter.name>templ<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 424,
          "key.line": 434,
          "key.name": "stringByReplacingMatches(in:options:range:withTemplate:)",
          "key.namecolumn": 15,
          "key.namelength": 154,
          "key.nameline": 434,
          "key.nameoffset": 26673,
          "key.offset": 26668,
          "key.parsed_declaration": "open func stringByReplacingMatches(in str: String, options: [RegularExpression.MatchingOptions] = [], range: Range<String.Index>? = nil, withTemplate templ: String) -> (String, Int)",
          "key.parsed_scope.end": 438,
          "key.parsed_scope.start": 434,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range5usingSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSSAC5MatchCXEtF\">stringByReplacingMatches(in:options:range:using:)<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>let mStr: <Type usr=\"c:objc(cs)NSMutableString\">NSMutableString<\/Type><\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>mStr<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSMutableString\">NSMutableString<\/ref.class><\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 39,
              "key.line": 435,
              "key.name": "mStr",
              "key.namecolumn": 13,
              "key.namelength": 4,
              "key.nameline": 435,
              "key.nameoffset": 26859,
              "key.offset": 26855,
              "key.parsed_declaration": "let mStr = NSMutableString(string: str)",
              "key.parsed_scope.end": 435,
              "key.parsed_scope.start": 435,
              "key.typename": "NSMutableString",
              "key.typeusr": "$sSo15NSMutableStringCD",
              "key.usr": "s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range12withTemplateSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSStF4mStrL_So15NSMutableStringCvp"
            },
            {
              "key.annotated_decl": "<Declaration>let cc: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cc<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 149,
              "key.line": 436,
              "key.name": "cc",
              "key.namecolumn": 13,
              "key.namelength": 2,
              "key.nameline": 436,
              "key.nameoffset": 26907,
              "key.offset": 26903,
              "key.parsed_declaration": "let cc   = nsRegex.replaceMatches(in: mStr, options: MatchingOptions.convert(from: options), range: nsRange(range, string: str), withTemplate: templ)",
              "key.parsed_scope.end": 436,
              "key.parsed_scope.start": 436,
              "key.typename": "Int",
              "key.typeusr": "$sSiD",
              "key.usr": "s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range12withTemplateSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSStF2ccL_Sivp"
            }
          ],
          "key.typename": "(RegularExpression) -> (String, [RegularExpression.MatchingOptions], Range<String.Index>?, String) -> (String, Int)",
          "key.typeusr": "$s2in7options5range12withTemplateSS_SitSS_Say7Rubicon17RegularExpressionC15MatchingOptionsOGSnySS5IndexVGSgSStcD",
          "key.usr": "s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range12withTemplateSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSStF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.open",
          "key.annotated_decl": "<Declaration>open func stringByReplacingMatches(in str: <Type usr=\"s:SS\">String<\/Type>, options: [<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>] = [], range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;? = nil, using body: (<Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type>) -&gt; (<Type usr=\"s:SS\">String<\/Type>, <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.open",
              "key.column": 5,
              "key.length": 4,
              "key.line": 453,
              "key.offset": 27930
            }
          ],
          "key.bodycolumn": 173,
          "key.bodylength": 543,
          "key.bodyline": 453,
          "key.bodyoffset": 28098,
          "key.column": 10,
          "key.doc.column": 15,
          "key.doc.comment": "This method will perform a find-and-replace on the provided string by calling the closure for each match\nfound in the source string and replacing it with the string returned by the closure.\n\n- Parameters:\n  - str: The source string.\n  - options: The match options.\n  - range: The range of the string to search in. If `nil` then the entire string will be searched.\n  - body: The closure that will return the replacement string. It is called once for each match found in\n          the source string.\n- Returns: A tuple with the modified string and the number of replacements made.\n- Throws: If the closure throws an error.",
          "key.doc.declaration": "open func stringByReplacingMatches(in str: String, options: [MatchingOptions] = [], range: Range<String.Index>? = nil, using body: (Match) -> String) -> (String, Int)",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"453\" column=\"15\"><Name>stringByReplacingMatches(in:options:range:using:)<\/Name><USR>s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range5usingSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSSAC5MatchCXEtF<\/USR><Declaration>open func stringByReplacingMatches(in str: String, options: [MatchingOptions] = [], range: Range&lt;String.Index&gt;? = nil, using body: (Match) -&gt; String) -&gt; (String, Int)<\/Declaration><CommentParts><Abstract><Para>This method will perform a find-and-replace on the provided string by calling the closure for each match found in the source string and replacing it with the string returned by the closure.<\/Para><\/Abstract><Parameters><Parameter><Name>str<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The source string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>options<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The match options.<\/Para><\/Discussion><\/Parameter><Parameter><Name>range<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The range of the string to search in. If <codeVoice>nil<\/codeVoice> then the entire string will be searched.<\/Para><\/Discussion><\/Parameter><Parameter><Name>body<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure that will return the replacement string. It is called once for each match found in the source string.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A tuple with the modified string and the number of replacements made.<\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>If the closure throws an error.<\/Para><\/ThrowsDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 453,
          "key.doc.name": "stringByReplacingMatches(in:options:range:using:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The source string."
                }
              ],
              "name": "str"
            },
            {
              "discussion": [
                {
                  "Para": "The match options."
                }
              ],
              "name": "options"
            },
            {
              "discussion": [
                {
                  "Para": "The range of the string to search in. If `nil` then the entire string will be searched."
                }
              ],
              "name": "range"
            },
            {
              "discussion": [
                {
                  "Para": "The closure that will return the replacement string. It is called once for each match found in the source string."
                }
              ],
              "name": "body"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "A tuple with the modified string and the number of replacements made."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 713,
          "key.docline": 441,
          "key.docoffset": 27213,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>stringByReplacingMatches<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>options<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type> = []<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>using<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 707,
          "key.line": 453,
          "key.name": "stringByReplacingMatches(in:options:range:using:)",
          "key.namecolumn": 15,
          "key.namelength": 139,
          "key.nameline": 453,
          "key.nameoffset": 27940,
          "key.offset": 27935,
          "key.parsed_declaration": "open func stringByReplacingMatches(in str: String, options: [MatchingOptions] = [], range: Range<String.Index>? = nil, using body: (Match) -> String) -> (String, Int)",
          "key.parsed_scope.end": 469,
          "key.parsed_scope.start": 453,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range12withTemplateSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSStF\">stringByReplacingMatches(in:options:range:withTemplate:)<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>var out: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>out<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 26,
              "key.line": 454,
              "key.name": "out",
              "key.namecolumn": 13,
              "key.namelength": 3,
              "key.nameline": 454,
              "key.nameoffset": 28111,
              "key.offset": 28107,
              "key.parsed_declaration": "var out: String       = \"\"",
              "key.parsed_scope.end": 454,
              "key.parsed_scope.start": 454,
              "key.typename": "String",
              "key.typeusr": "$sSSD",
              "key.usr": "s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range5usingSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSSAC5MatchCXEtF3outL_SSvp"
            },
            {
              "key.annotated_decl": "<Declaration>var cc: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cc<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 25,
              "key.line": 455,
              "key.name": "cc",
              "key.namecolumn": 13,
              "key.namelength": 2,
              "key.nameline": 455,
              "key.nameoffset": 28146,
              "key.offset": 28142,
              "key.parsed_declaration": "var cc:  Int          = 0",
              "key.parsed_scope.end": 455,
              "key.parsed_scope.start": 455,
              "key.typename": "Int",
              "key.typeusr": "$sSiD",
              "key.usr": "s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range5usingSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSSAC5MatchCXEtF2ccL_Sivp"
            },
            {
              "key.annotated_decl": "<Declaration>var idx: <Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type><\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>idx<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 38,
              "key.line": 456,
              "key.name": "idx",
              "key.namecolumn": 13,
              "key.namelength": 3,
              "key.nameline": 456,
              "key.nameoffset": 28180,
              "key.offset": 28176,
              "key.parsed_declaration": "var idx: String.Index = str.startIndex",
              "key.parsed_scope.end": 456,
              "key.parsed_scope.start": 456,
              "key.typename": "String.Index",
              "key.typeusr": "$sSS5IndexVD",
              "key.usr": "s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range5usingSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSSAC5MatchCXEtF3idxL_AMvp"
            }
          ],
          "key.typename": "(RegularExpression) -> (String, [RegularExpression.MatchingOptions], Range<String.Index>?, (RegularExpression.Match) -> String) -> (String, Int)",
          "key.typeusr": "$s2in7options5range5usingSS_SitSS_Say7Rubicon17RegularExpressionC15MatchingOptionsOGSnySS5IndexVGSgSSAG5MatchCXEtcD",
          "key.usr": "s:7Rubicon17RegularExpressionC24stringByReplacingMatches2in7options5range5usingSS_SitSS_SayAC15MatchingOptionsOGSnySS5IndexVGSgSSAC5MatchCXEtF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>public final class <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.Match : <Type usr=\"s:ST\">Sequence<\/Type>, <Type usr=\"s:Sl\">Collection<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.final",
              "key.column": 12,
              "key.length": 5,
              "key.line": 474,
              "key.offset": 28855
            },
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 5,
              "key.length": 6,
              "key.line": 474,
              "key.offset": 28848
            }
          ],
          "key.bodycolumn": 53,
          "key.bodylength": 4589,
          "key.bodyline": 474,
          "key.bodyoffset": 28896,
          "key.column": 18,
          "key.doc.column": 24,
          "key.doc.comment": "This class encapsulates all of the capture groups of a single match.",
          "key.doc.declaration": "public final class Rubicon.RegularExpression.Match : Sequence, Collection",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Class file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"474\" column=\"24\"><Name>Match<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC<\/USR><Declaration>public final class Rubicon.RegularExpression.Match : Sequence, Collection<\/Declaration><CommentParts><Abstract><Para>This class encapsulates all of the capture groups of a single match.<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line": 474,
          "key.doc.name": "Match",
          "key.doc.type": "Class",
          "key.doccolumn": 5,
          "key.doclength": 81,
          "key.docline": 472,
          "key.docoffset": 28763,
          "key.elements": [
            {
              "key.column": 31,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 8,
              "key.line": 474,
              "key.offset": 28874
            },
            {
              "key.column": 41,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 10,
              "key.line": 474,
              "key.offset": 28884
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<decl.name>Match<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol>, <ref.protocol usr=\"s:Sl\">Collection<\/ref.protocol><\/decl.class>",
          "key.inheritedtypes": [
            {
              "key.name": "Sequence"
            },
            {
              "key.name": "Collection"
            }
          ],
          "key.kind": "source.lang.swift.decl.class",
          "key.length": 4625,
          "key.line": 474,
          "key.name": "Match",
          "key.namecolumn": 24,
          "key.namelength": 5,
          "key.nameline": 474,
          "key.nameoffset": 28867,
          "key.offset": 28861,
          "key.parsed_declaration": "public final class Match: Sequence, Collection",
          "key.parsed_scope.end": 576,
          "key.parsed_scope.start": 474,
          "key.substructure": [
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public typealias <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>.Element = <Type usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/Type><\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 475,
                  "key.offset": 28905
                }
              ],
              "key.column": 16,
              "key.doc.declaration": "associatedtype Element where Self.Element == Self.Iterator.Element",
              "key.doc.discussion": [
                {
                  "Note": ""
                }
              ],
              "key.doc.full_as_xml": "<Other><Name>Element<\/Name><USR>s:ST7ElementQa<\/USR><Declaration>associatedtype Element where Self.Element == Self.Iterator.Element<\/Declaration><CommentParts><Abstract><Para>A type representing the sequence’s elements.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Sequence<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name": "Element",
              "key.doc.type": "Other",
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class>.<decl.name>Element<\/decl.name> = <ref.class usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/ref.class><\/decl.typealias>",
              "key.kind": "source.lang.swift.decl.typealias",
              "key.length": 25,
              "key.line": 475,
              "key.name": "Element",
              "key.namecolumn": 26,
              "key.namelength": 7,
              "key.nameline": 475,
              "key.nameoffset": 28922,
              "key.offset": 28912,
              "key.overrides": [
                {
                  "key.usr": "s:ST7ElementQa"
                },
                {
                  "key.usr": "s:Sl7ElementQa"
                }
              ],
              "key.parsed_declaration": "public typealias Element = Group",
              "key.parsed_scope.end": 475,
              "key.parsed_scope.start": 475,
              "key.typename": "RegularExpression.Group.Type",
              "key.typeusr": "$s7Rubicon17RegularExpressionC5GroupCmD",
              "key.usr": "s:ST7ElementQa"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public typealias <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>.Index = <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 476,
                  "key.offset": 28946
                }
              ],
              "key.column": 16,
              "key.doc.declaration": "associatedtype Index : Comparable where Self.Index == Self.Indices.Element, Self.Indices.Element == Self.Indices.Index, Self.Indices.Index == Self.SubSequence.Index, Self.SubSequence.Index == Self.Indices.Indices.Element, Self.Indices.Indices.Element == Self.Indices.Indices.Index, Self.Indices.Indices.Index == Self.SubSequence.Indices.Element, Self.SubSequence.Indices.Element == Self.SubSequence.Indices.Index, Self.SubSequence.Indices.Index == Self.Indices.Indices.Indices.Element, Self.Indices.Indices.Indices.Element == Self.Indices.Indices.Indices.Index, Self.Indices.Indices.Indices.Index == Self.SubSequence.Indices.Indices.Element, Self.SubSequence.Indices.Indices.Element == Self.SubSequence.Indices.Indices.Index, Self.SubSequence.Indices.Indices.Index == Self.SubSequence.Indices.Indices.Indices.Element, Self.SubSequence.Indices.Indices.Indices.Element == Self.SubSequence.Indices.Indices.Indices.Index",
              "key.doc.discussion": [
                {
                  "Para": "Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
                },
                {
                  "Note": ""
                }
              ],
              "key.doc.full_as_xml": "<Other><Name>Index<\/Name><USR>s:Sl5IndexQa<\/USR><Declaration>associatedtype Index : Comparable where Self.Index == Self.Indices.Element, Self.Indices.Element == Self.Indices.Index, Self.Indices.Index == Self.SubSequence.Index, Self.SubSequence.Index == Self.Indices.Indices.Element, Self.Indices.Indices.Element == Self.Indices.Indices.Index, Self.Indices.Indices.Index == Self.SubSequence.Indices.Element, Self.SubSequence.Indices.Element == Self.SubSequence.Indices.Index, Self.SubSequence.Indices.Index == Self.Indices.Indices.Indices.Element, Self.Indices.Indices.Indices.Element == Self.Indices.Indices.Indices.Index, Self.Indices.Indices.Indices.Index == Self.SubSequence.Indices.Indices.Element, Self.SubSequence.Indices.Indices.Element == Self.SubSequence.Indices.Indices.Index, Self.SubSequence.Indices.Indices.Index == Self.SubSequence.Indices.Indices.Indices.Element, Self.SubSequence.Indices.Indices.Indices.Element == Self.SubSequence.Indices.Indices.Indices.Index<\/Declaration><CommentParts><Abstract><Para>A type that represents a position in the collection.<\/Para><\/Abstract><Discussion><Para>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name": "Index",
              "key.doc.type": "Other",
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class>.<decl.name>Index<\/decl.name> = <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.typealias>",
              "key.kind": "source.lang.swift.decl.typealias",
              "key.length": 21,
              "key.line": 476,
              "key.name": "Index",
              "key.namecolumn": 26,
              "key.namelength": 5,
              "key.nameline": 476,
              "key.nameoffset": 28963,
              "key.offset": 28953,
              "key.overrides": [
                {
                  "key.usr": "s:Sl5IndexQa"
                }
              ],
              "key.parsed_declaration": "public typealias Index = Int",
              "key.parsed_scope.end": 476,
              "key.parsed_scope.start": 476,
              "key.typename": "Int.Type",
              "key.typeusr": "$sSimD",
              "key.usr": "s:Sl5IndexQa"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public let string: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 481,
                  "key.offset": 29142
                }
              ],
              "key.column": 16,
              "key.doc.column": 20,
              "key.doc.comment": "The search string.",
              "key.doc.declaration": "public let string: String",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"481\" column=\"20\"><Name>string<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC6stringSSvp<\/USR><Declaration>public let string: String<\/Declaration><CommentParts><Abstract><Para>The search string.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 481,
              "key.doc.name": "string",
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 35,
              "key.docline": 479,
              "key.docoffset": 29099,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>string<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 22,
              "key.line": 481,
              "key.name": "string",
              "key.namecolumn": 20,
              "key.namelength": 6,
              "key.nameline": 481,
              "key.nameoffset": 29153,
              "key.offset": 29149,
              "key.parsed_declaration": "public let string:     String",
              "key.parsed_scope.end": 481,
              "key.parsed_scope.start": 481,
              "key.typename": "String",
              "key.typeusr": "$sSSD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC6stringSSvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public var startIndex: <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/Type> { get }<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 485,
                  "key.offset": 29355
                }
              ],
              "key.bodycolumn": 39,
              "key.bodylength": 19,
              "key.bodyline": 485,
              "key.bodyoffset": 29385,
              "key.column": 16,
              "key.doc.column": 20,
              "key.doc.comment": "The index of the first group group.",
              "key.doc.declaration": "public var startIndex: Index { get }",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"485\" column=\"20\"><Name>startIndex<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC10startIndexSivp<\/USR><Declaration>public var startIndex: Index { get }<\/Declaration><CommentParts><Abstract><Para>The index of the first group group.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 485,
              "key.doc.name": "startIndex",
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 52,
              "key.docline": 483,
              "key.docoffset": 29295,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>startIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 43,
              "key.line": 485,
              "key.name": "startIndex",
              "key.namecolumn": 20,
              "key.namelength": 10,
              "key.nameline": 485,
              "key.nameoffset": 29366,
              "key.offset": 29362,
              "key.overrides": [
                {
                  "key.usr": "s:Sl10startIndex0B0Qzvp"
                }
              ],
              "key.parsed_declaration": "public var startIndex: Index",
              "key.parsed_scope.end": 485,
              "key.parsed_scope.start": 485,
              "key.typename": "Int",
              "key.typeusr": "$sSiD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC10startIndexSivp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public var endIndex: <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/Type> { get }<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 489,
                  "key.offset": 29597
                }
              ],
              "key.bodycolumn": 39,
              "key.bodylength": 17,
              "key.bodyline": 489,
              "key.bodyoffset": 29627,
              "key.column": 16,
              "key.doc.column": 20,
              "key.doc.comment": "The index just past the last capture group.",
              "key.doc.declaration": "public var endIndex: Index { get }",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"489\" column=\"20\"><Name>endIndex<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC8endIndexSivp<\/USR><Declaration>public var endIndex: Index { get }<\/Declaration><CommentParts><Abstract><Para>The index just past the last capture group.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 489,
              "key.doc.name": "endIndex",
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 60,
              "key.docline": 487,
              "key.docoffset": 29529,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>endIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 41,
              "key.line": 489,
              "key.name": "endIndex",
              "key.namecolumn": 20,
              "key.namelength": 8,
              "key.nameline": 489,
              "key.nameoffset": 29608,
              "key.offset": 29604,
              "key.overrides": [
                {
                  "key.usr": "s:Sl8endIndex0B0Qzvp"
                }
              ],
              "key.parsed_declaration": "public var endIndex:   Index",
              "key.parsed_scope.end": 489,
              "key.parsed_scope.start": 489,
              "key.typename": "Int",
              "key.typeusr": "$sSiD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC8endIndexSivp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public var count: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 493,
                  "key.offset": 29823
                }
              ],
              "key.bodycolumn": 37,
              "key.bodylength": 14,
              "key.bodyline": 493,
              "key.bodyoffset": 29851,
              "key.column": 16,
              "key.doc.column": 20,
              "key.doc.comment": "The number of capture groups.",
              "key.doc.declaration": "public var count: Int { get }",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"493\" column=\"20\"><Name>count<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC5countSivp<\/USR><Declaration>public var count: Int { get }<\/Declaration><CommentParts><Abstract><Para>The number of capture groups.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 493,
              "key.doc.name": "count",
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 46,
              "key.docline": 491,
              "key.docoffset": 29769,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 36,
              "key.line": 493,
              "key.name": "count",
              "key.namecolumn": 20,
              "key.namelength": 5,
              "key.nameline": 493,
              "key.nameoffset": 29834,
              "key.offset": 29830,
              "key.overrides": [
                {
                  "key.usr": "s:Sl5countSivp"
                }
              ],
              "key.parsed_declaration": "public var count:      Int",
              "key.parsed_scope.end": 493,
              "key.parsed_scope.start": 493,
              "key.typename": "Int",
              "key.typeusr": "$sSiD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC5countSivp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public lazy var range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt; { get set }<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.lazy",
                  "key.column": 16,
                  "key.length": 4,
                  "key.line": 497,
                  "key.offset": 30078
                },
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 497,
                  "key.offset": 30071
                }
              ],
              "key.column": 21,
              "key.doc.column": 25,
              "key.doc.comment": "The range within the search string for the entire match.",
              "key.doc.declaration": "public lazy var range: Range<String.Index> { get set }",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"497\" column=\"25\"><Name>range<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC5rangeSnySS5IndexVGvp<\/USR><Declaration>public lazy var range: Range&lt;String.Index&gt; { get set }<\/Declaration><CommentParts><Abstract><Para>The range within the search string for the entire match.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 497,
              "key.doc.name": "range",
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 73,
              "key.docline": 495,
              "key.docoffset": 29990,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>lazy<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>range<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 105,
              "key.line": 497,
              "key.name": "range",
              "key.namecolumn": 25,
              "key.namelength": 5,
              "key.nameline": 497,
              "key.nameoffset": 30087,
              "key.offset": 30083,
              "key.parsed_declaration": "public lazy var range:     Range<String.Index> = (Range<String.Index>(nsMatch.range, in: string) ?? string.fullRange)",
              "key.parsed_scope.end": 497,
              "key.parsed_scope.start": 497,
              "key.setter_accessibility": "source.lang.swift.accessibility.public",
              "key.typename": "Range<String.Index>",
              "key.typeusr": "$sSnySS5IndexVGD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC5rangeSnySS5IndexVGvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public lazy var subString: <Type usr=\"s:SS\">String<\/Type> { get set }<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.lazy",
                  "key.column": 16,
                  "key.length": 4,
                  "key.line": 501,
                  "key.offset": 30386
                },
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 501,
                  "key.offset": 30379
                }
              ],
              "key.column": 21,
              "key.doc.column": 25,
              "key.doc.comment": "The sub-string of the entire match region.",
              "key.doc.declaration": "public lazy var subString: String { get set }",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"501\" column=\"25\"><Name>subString<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC9subStringSSvp<\/USR><Declaration>public lazy var subString: String { get set }<\/Declaration><CommentParts><Abstract><Para>The sub-string of the entire match region.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 501,
              "key.doc.name": "subString",
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 59,
              "key.docline": 499,
              "key.docoffset": 30312,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>lazy<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>subString<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 58,
              "key.line": 501,
              "key.name": "subString",
              "key.namecolumn": 25,
              "key.namelength": 9,
              "key.nameline": 501,
              "key.nameoffset": 30395,
              "key.offset": 30391,
              "key.parsed_declaration": "public lazy var subString: String              = String(string[range])",
              "key.parsed_scope.end": 501,
              "key.parsed_scope.start": 501,
              "key.setter_accessibility": "source.lang.swift.accessibility.public",
              "key.typename": "String",
              "key.typeusr": "$sSSD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC9subStringSSvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.internal",
              "key.annotated_decl": "<Declaration>let nsMatch: <Type usr=\"c:objc(cs)NSTextCheckingResult\">NSTextCheckingResult<\/Type><\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>nsMatch<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSTextCheckingResult\">NSTextCheckingResult<\/ref.class><\/decl.var.type><\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 36,
              "key.line": 503,
              "key.name": "nsMatch",
              "key.namecolumn": 13,
              "key.namelength": 7,
              "key.nameline": 503,
              "key.nameoffset": 30463,
              "key.offset": 30459,
              "key.parsed_declaration": "let nsMatch:    NSTextCheckingResult",
              "key.parsed_scope.end": 503,
              "key.parsed_scope.start": 503,
              "key.typename": "NSTextCheckingResult",
              "key.typeusr": "$sSo20NSTextCheckingResultCD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC02nsD0So20NSTextCheckingResultCvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.internal",
              "key.annotated_decl": "<Declaration>var namedCache: [<Type usr=\"s:SS\">String<\/Type> : <Type usr=\"s:7Rubicon17RegularExpressionC10NamedGroupC\">NamedGroup<\/Type>]<\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>namedCache<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct> : <ref.class usr=\"s:7Rubicon17RegularExpressionC10NamedGroupC\">NamedGroup<\/ref.class>]<\/decl.var.type><\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 42,
              "key.line": 504,
              "key.name": "namedCache",
              "key.namecolumn": 13,
              "key.namelength": 10,
              "key.nameline": 504,
              "key.nameoffset": 30508,
              "key.offset": 30504,
              "key.parsed_declaration": "var namedCache: [String: NamedGroup] = [:]",
              "key.parsed_scope.end": 504,
              "key.parsed_scope.start": 504,
              "key.setter_accessibility": "source.lang.swift.accessibility.internal",
              "key.typename": "[String : RegularExpression.NamedGroup]",
              "key.typeusr": "$sSDySS7Rubicon17RegularExpressionC10NamedGroupCGD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC10namedCacheSDySSAC10NamedGroupCGvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.internal",
              "key.annotated_decl": "<Declaration>lazy var groups: [<Type usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/Type>] { get set }<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.lazy",
                  "key.column": 9,
                  "key.length": 4,
                  "key.line": 505,
                  "key.offset": 30555
                }
              ],
              "key.column": 14,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>lazy<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>groups<\/decl.name>: <decl.var.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/ref.class>]<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 33,
              "key.line": 505,
              "key.name": "groups",
              "key.namecolumn": 18,
              "key.namelength": 6,
              "key.nameline": 505,
              "key.nameoffset": 30564,
              "key.offset": 30560,
              "key.parsed_declaration": "lazy var groups: [Group] = getGroups()",
              "key.parsed_scope.end": 505,
              "key.parsed_scope.start": 505,
              "key.setter_accessibility": "source.lang.swift.accessibility.internal",
              "key.typename": "[RegularExpression.Group]",
              "key.typeusr": "$sSay7Rubicon17RegularExpressionC5GroupCGD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC6groupsSayAC5GroupCGvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.internal",
              "key.annotated_decl": "<Declaration>init(_ str: <Type usr=\"s:SS\">String<\/Type>, match: <Type usr=\"c:objc(cs)NSTextCheckingResult\">NSTextCheckingResult<\/Type>)<\/Declaration>",
              "key.bodycolumn": 59,
              "key.bodylength": 72,
              "key.bodyline": 507,
              "key.bodyoffset": 30653,
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>match<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"c:objc(cs)NSTextCheckingResult\">NSTextCheckingResult<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
              "key.kind": "source.lang.swift.decl.function.method.instance",
              "key.length": 123,
              "key.line": 507,
              "key.name": "init(_:match:)",
              "key.namecolumn": 9,
              "key.namelength": 48,
              "key.nameline": 507,
              "key.nameoffset": 30603,
              "key.offset": 30603,
              "key.parsed_declaration": "init(_ str: String, match: NSTextCheckingResult)",
              "key.parsed_scope.end": 510,
              "key.parsed_scope.start": 507,
              "key.substructure": [
              ],
              "key.typename": "(RegularExpression.Match.Type) -> (String, NSTextCheckingResult) -> RegularExpression.Match",
              "key.typeusr": "$s_5match7Rubicon17RegularExpressionC5MatchCSS_So20NSTextCheckingResultCtcD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC_5matchAESS_So20NSTextCheckingResultCtcfc"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.internal",
              "key.annotated_decl": "<Declaration>func getGroups() -&gt; [<Type usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/Type>]<\/Declaration>",
              "key.bodycolumn": 38,
              "key.bodylength": 178,
              "key.bodyline": 512,
              "key.bodyoffset": 30765,
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getGroups<\/decl.name>() -&gt; <decl.function.returntype>[<ref.class usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/ref.class>]<\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind": "source.lang.swift.decl.function.method.instance",
              "key.length": 208,
              "key.line": 512,
              "key.name": "getGroups()",
              "key.namecolumn": 14,
              "key.namelength": 11,
              "key.nameline": 512,
              "key.nameoffset": 30741,
              "key.offset": 30736,
              "key.parsed_declaration": "func getGroups() -> [Group]",
              "key.parsed_scope.end": 516,
              "key.parsed_scope.start": 512,
              "key.substructure": [
                {
                  "key.annotated_decl": "<Declaration>var grps: [<Type usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/Type>]<\/Declaration>",
                  "key.column": 13,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>grps<\/decl.name>: <decl.var.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/ref.class>]<\/decl.var.type><\/decl.var.local>",
                  "key.kind": "source.lang.swift.decl.var.local",
                  "key.length": 22,
                  "key.line": 513,
                  "key.name": "grps",
                  "key.namecolumn": 17,
                  "key.namelength": 4,
                  "key.nameline": 513,
                  "key.nameoffset": 30782,
                  "key.offset": 30778,
                  "key.parsed_declaration": "var grps: [Group] = []",
                  "key.parsed_scope.end": 513,
                  "key.parsed_scope.start": 513,
                  "key.typename": "[RegularExpression.Group]",
                  "key.typeusr": "$sSay7Rubicon17RegularExpressionC5GroupCGD",
                  "key.usr": "s:7Rubicon17RegularExpressionC5MatchC9getGroupsSayAC5GroupCGyF4grpsL_AIvp"
                }
              ],
              "key.typename": "(RegularExpression.Match) -> () -> [RegularExpression.Group]",
              "key.typeusr": "$sSay7Rubicon17RegularExpressionC5GroupCGycD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC9getGroupsSayAC5GroupCGyF"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public subscript(name: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:7Rubicon17RegularExpressionC10NamedGroupC\">NamedGroup<\/Type>? { get }<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 524,
                  "key.offset": 31290
                }
              ],
              "key.bodycolumn": 56,
              "key.bodylength": 307,
              "key.bodyline": 524,
              "key.bodyoffset": 31337,
              "key.column": 16,
              "key.doc.column": 16,
              "key.doc.comment": "Returns a named capture group.\n\n- Parameter name: the name of the capture group\n- Returns: The named capture group or `nil` if the capture group does not exist.",
              "key.doc.declaration": "public subscript(name: String) -> NamedGroup? { get }",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"524\" column=\"16\"><Name>subscript(_:)<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchCyAC10NamedGroupCSgSScip<\/USR><Declaration>public subscript(name: String) -&gt; NamedGroup? { get }<\/Declaration><CommentParts><Abstract><Para>Returns a named capture group.<\/Para><\/Abstract><Parameters><Parameter><Name>name<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the name of the capture group<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The named capture group or <codeVoice>nil<\/codeVoice> if the capture group does not exist.<\/Para><\/ResultDiscussion><\/CommentParts><\/Other>",
              "key.doc.line": 524,
              "key.doc.name": "subscript(_:)",
              "key.doc.parameters": [
                {
                  "discussion": [
                    {
                      "Para": "the name of the capture group"
                    }
                  ],
                  "name": "name"
                }
              ],
              "key.doc.result_discussion": [
                {
                  "Para": "The named capture group or `nil` if the capture group does not exist."
                }
              ],
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 213,
              "key.docline": 519,
              "key.docoffset": 31069,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>name<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:7Rubicon17RegularExpressionC10NamedGroupC\">NamedGroup<\/ref.class>?<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.function.subscript>",
              "key.kind": "source.lang.swift.decl.function.subscript",
              "key.length": 348,
              "key.line": 524,
              "key.name": "subscript(_:)",
              "key.namecolumn": 16,
              "key.namelength": 23,
              "key.nameline": 524,
              "key.nameoffset": 31297,
              "key.offset": 31297,
              "key.parsed_declaration": "public subscript(name: String) -> NamedGroup?",
              "key.parsed_scope.end": 533,
              "key.parsed_scope.start": 524,
              "key.related_decls": [
                {
                  "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon17RegularExpressionC5MatchCyAC5GroupCSicip\">subscript(_:)<\/RelatedName>"
                }
              ],
              "key.substructure": [
              ],
              "key.typename": "(String) -> RegularExpression.NamedGroup?",
              "key.typeusr": "$sy7Rubicon17RegularExpressionC10NamedGroupCSgSScD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchCyAC10NamedGroupCSgSScip"
            },
            {
              "key.annotated_decl": "<Declaration>let range: <Type usr=\"c:@T@NSRange\">NSRange<\/Type><\/Declaration>",
              "key.column": 13,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>range<\/decl.name>: <decl.var.type><ref.typealias usr=\"c:@T@NSRange\">NSRange<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 41,
              "key.line": 526,
              "key.name": "range",
              "key.namecolumn": 17,
              "key.namelength": 5,
              "key.nameline": 526,
              "key.nameoffset": 31409,
              "key.offset": 31405,
              "key.parsed_declaration": "let range = nsMatch.range(withName: name)",
              "key.parsed_scope.end": 526,
              "key.parsed_scope.start": 526,
              "key.typename": "_NSRange",
              "key.typeusr": "$sSo8_NSRangeVD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchCyAC10NamedGroupCSgSScig5rangeL_So8_NSRangeVvp"
            },
            {
              "key.annotated_decl": "<Declaration>let ng: <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC10NamedGroupC\">NamedGroup<\/Type><\/Declaration>",
              "key.column": 13,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ng<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.class usr=\"s:7Rubicon17RegularExpressionC10NamedGroupC\">NamedGroup<\/ref.class><\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 51,
              "key.line": 530,
              "key.name": "ng",
              "key.namecolumn": 17,
              "key.namelength": 2,
              "key.nameline": 530,
              "key.nameoffset": 31532,
              "key.offset": 31528,
              "key.parsed_declaration": "let ng = NamedGroup(self, name: name, range: range)",
              "key.parsed_scope.end": 530,
              "key.parsed_scope.start": 530,
              "key.typename": "RegularExpression.NamedGroup",
              "key.typeusr": "$s7Rubicon17RegularExpressionC10NamedGroupCD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchCyAC10NamedGroupCSgSScig2ngL0_AGvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public subscript(position: <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC7Elementa\">Element<\/Type> { get }<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 541,
                  "key.offset": 31998
                }
              ],
              "key.bodycolumn": 55,
              "key.bodylength": 18,
              "key.bodyline": 541,
              "key.bodyoffset": 32044,
              "key.column": 16,
              "key.doc.column": 16,
              "key.doc.comment": "Returns the capture group for the given index.\n\n- Parameter position: the index which must be between `startIndex` <= index < `endIndex`.\n- Returns: The capture group.",
              "key.doc.declaration": "public subscript(position: Index) -> Element { get }",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"541\" column=\"16\"><Name>subscript(_:)<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchCyAC5GroupCSicip<\/USR><Declaration>public subscript(position: Index) -&gt; Element { get }<\/Declaration><CommentParts><Abstract><Para>Returns the capture group for the given index.<\/Para><\/Abstract><Parameters><Parameter><Name>position<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the index which must be between <codeVoice>startIndex<\/codeVoice> &lt;= index &lt; <codeVoice>endIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The capture group.<\/Para><\/ResultDiscussion><\/CommentParts><\/Other>",
              "key.doc.line": 541,
              "key.doc.name": "subscript(_:)",
              "key.doc.parameters": [
                {
                  "discussion": [
                    {
                      "Para": "the index which must be between `startIndex` <= index < `endIndex`."
                    }
                  ],
                  "name": "position"
                }
              ],
              "key.doc.result_discussion": [
                {
                  "Para": "The capture group."
                }
              ],
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 220,
              "key.docline": 536,
              "key.docoffset": 31770,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>position<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon17RegularExpressionC5MatchC7Elementa\">Element<\/ref.typealias><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.function.subscript>",
              "key.kind": "source.lang.swift.decl.function.subscript",
              "key.length": 58,
              "key.line": 541,
              "key.name": "subscript(_:)",
              "key.namecolumn": 16,
              "key.namelength": 26,
              "key.nameline": 541,
              "key.nameoffset": 32005,
              "key.offset": 32005,
              "key.overrides": [
                {
                  "key.usr": "s:Sly7ElementQz5IndexQzcip"
                }
              ],
              "key.parsed_declaration": "public subscript(position: Index) -> Element",
              "key.parsed_scope.end": 541,
              "key.parsed_scope.start": 541,
              "key.related_decls": [
                {
                  "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon17RegularExpressionC5MatchCyAC10NamedGroupCSgSScip\">subscript(_:)<\/RelatedName>"
                }
              ],
              "key.substructure": [
              ],
              "key.typename": "(Int) -> RegularExpression.Group",
              "key.typeusr": "$sy7Rubicon17RegularExpressionC5GroupCSicD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchCyAC5GroupCSicip"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public func index(after i: <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/Type><\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 549,
                  "key.offset": 32333
                }
              ],
              "key.bodycolumn": 53,
              "key.bodylength": 24,
              "key.bodyline": 549,
              "key.bodyoffset": 32377,
              "key.column": 16,
              "key.doc.column": 21,
              "key.doc.comment": "The index after the one given.\n\n- Parameter i: the index.\n- Returns: The next index.",
              "key.doc.declaration": "public func index(after i: Index) -> Index",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"549\" column=\"21\"><Name>index(after:)<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC5index5afterS2i_tF<\/USR><Declaration>public func index(after i: Index) -&gt; Index<\/Declaration><CommentParts><Abstract><Para>The index after the one given.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the index.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The next index.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
              "key.doc.line": 549,
              "key.doc.name": "index(after:)",
              "key.doc.parameters": [
                {
                  "discussion": [
                    {
                      "Para": "the index."
                    }
                  ],
                  "name": "i"
                }
              ],
              "key.doc.result_discussion": [
                {
                  "Para": "The next index."
                }
              ],
              "key.doc.type": "Function",
              "key.doccolumn": 9,
              "key.doclength": 137,
              "key.docline": 544,
              "key.docoffset": 32188,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>index<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>after<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon17RegularExpressionC5MatchC5Indexa\">Index<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind": "source.lang.swift.decl.function.method.instance",
              "key.length": 62,
              "key.line": 549,
              "key.name": "index(after:)",
              "key.namecolumn": 21,
              "key.namelength": 21,
              "key.nameline": 549,
              "key.nameoffset": 32345,
              "key.offset": 32340,
              "key.overrides": [
                {
                  "key.usr": "s:Sl5index5after5IndexQzAD_tF"
                }
              ],
              "key.parsed_declaration": "public func index(after i: Index) -> Index",
              "key.parsed_scope.end": 549,
              "key.parsed_scope.start": 549,
              "key.substructure": [
              ],
              "key.typename": "(RegularExpression.Match) -> (Int) -> Int",
              "key.typeusr": "$s5afterS2i_tcD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC5index5afterS2i_tF"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public func makeIterator() -&gt; <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC8IteratorC\">Iterator<\/Type><\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 556,
                  "key.offset": 32649
                }
              ],
              "key.bodycolumn": 49,
              "key.bodylength": 23,
              "key.bodyline": 556,
              "key.bodyoffset": 32689,
              "key.column": 16,
              "key.doc.column": 21,
              "key.doc.comment": "Returns an iterator over all the capture groups.\n\n- Returns: An iterator.",
              "key.doc.declaration": "public func makeIterator() -> Iterator",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"556\" column=\"21\"><Name>makeIterator()<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC12makeIteratorAE0F0CyF<\/USR><Declaration>public func makeIterator() -&gt; Iterator<\/Declaration><CommentParts><Abstract><Para>Returns an iterator over all the capture groups.<\/Para><\/Abstract><ResultDiscussion><Para>An iterator.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
              "key.doc.line": 556,
              "key.doc.name": "makeIterator()",
              "key.doc.result_discussion": [
                {
                  "Para": "An iterator."
                }
              ],
              "key.doc.type": "Function",
              "key.doccolumn": 9,
              "key.doclength": 114,
              "key.docline": 552,
              "key.docoffset": 32527,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>makeIterator<\/decl.name>() -&gt; <decl.function.returntype><ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC8IteratorC\">Iterator<\/ref.class><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind": "source.lang.swift.decl.function.method.instance",
              "key.length": 57,
              "key.line": 556,
              "key.name": "makeIterator()",
              "key.namecolumn": 21,
              "key.namelength": 14,
              "key.nameline": 556,
              "key.nameoffset": 32661,
              "key.offset": 32656,
              "key.overrides": [
                {
                  "key.usr": "s:ST12makeIterator0B0QzyF"
                },
                {
                  "key.usr": "s:Sl12makeIterator0B0QzyF"
                }
              ],
              "key.parsed_declaration": "public func makeIterator() -> Iterator",
              "key.parsed_scope.end": 556,
              "key.parsed_scope.start": 556,
              "key.substructure": [
              ],
              "key.typename": "(RegularExpression.Match) -> () -> RegularExpression.Match.Iterator",
              "key.typeusr": "$s7Rubicon17RegularExpressionC5MatchC8IteratorCycD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC12makeIteratorAE0F0CyF"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public final class <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>.Iterator : <Type usr=\"s:St\">IteratorProtocol<\/Type><\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.final",
                  "key.column": 16,
                  "key.length": 5,
                  "key.line": 561,
                  "key.offset": 32889
                },
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 561,
                  "key.offset": 32882
                }
              ],
              "key.bodycolumn": 56,
              "key.bodylength": 550,
              "key.bodyline": 561,
              "key.bodyoffset": 32929,
              "key.column": 22,
              "key.doc.column": 28,
              "key.doc.comment": "The iterator class.",
              "key.doc.declaration": "public final class Rubicon.RegularExpression.Match.Iterator : IteratorProtocol",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Class file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"561\" column=\"28\"><Name>Iterator<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC8IteratorC<\/USR><Declaration>public final class Rubicon.RegularExpression.Match.Iterator : IteratorProtocol<\/Declaration><CommentParts><Abstract><Para>The iterator class.<\/Para><\/Abstract><\/CommentParts><\/Class>",
              "key.doc.line": 561,
              "key.doc.name": "Iterator",
              "key.doc.type": "Class",
              "key.doccolumn": 9,
              "key.doclength": 36,
              "key.docline": 559,
              "key.docoffset": 32838,
              "key.elements": [
                {
                  "key.column": 38,
                  "key.kind": "source.lang.swift.structure.elem.typeref",
                  "key.length": 16,
                  "key.line": 561,
                  "key.offset": 32911
                }
              ],
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class>.<decl.name>Iterator<\/decl.name> : <ref.protocol usr=\"s:St\">IteratorProtocol<\/ref.protocol><\/decl.class>",
              "key.inheritedtypes": [
                {
                  "key.name": "IteratorProtocol"
                }
              ],
              "key.kind": "source.lang.swift.decl.class",
              "key.length": 585,
              "key.line": 561,
              "key.name": "Iterator",
              "key.namecolumn": 28,
              "key.namelength": 8,
              "key.nameline": 561,
              "key.nameoffset": 32901,
              "key.offset": 32895,
              "key.overrides": [
                {
                  "key.usr": "s:ST8IteratorQa"
                },
                {
                  "key.usr": "s:Sl8IteratorQa"
                }
              ],
              "key.parsed_declaration": "public final class Iterator: IteratorProtocol",
              "key.parsed_scope.end": 575,
              "key.parsed_scope.start": 561,
              "key.substructure": [
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>public typealias <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC5MatchC8IteratorC\">Iterator<\/Type>.Element = <Type usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/Type><\/Declaration>",
                  "key.attributes": [
                    {
                      "key.attribute": "source.decl.attribute.public",
                      "key.column": 13,
                      "key.length": 6,
                      "key.line": 562,
                      "key.offset": 32942
                    }
                  ],
                  "key.column": 20,
                  "key.doc.declaration": "associatedtype Element",
                  "key.doc.discussion": [
                    {
                      "Note": ""
                    }
                  ],
                  "key.doc.full_as_xml": "<Other><Name>Element<\/Name><USR>s:St7ElementQa<\/USR><Declaration>associatedtype Element<\/Declaration><CommentParts><Abstract><Para>The type of element traversed by the iterator.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>IteratorProtocol<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
                  "key.doc.name": "Element",
                  "key.doc.type": "Other",
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class>.<ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC8IteratorC\">Iterator<\/ref.class>.<decl.name>Element<\/decl.name> = <ref.class usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/ref.class><\/decl.typealias>",
                  "key.kind": "source.lang.swift.decl.typealias",
                  "key.length": 25,
                  "key.line": 562,
                  "key.name": "Element",
                  "key.namecolumn": 30,
                  "key.namelength": 7,
                  "key.nameline": 562,
                  "key.nameoffset": 32959,
                  "key.offset": 32949,
                  "key.overrides": [
                    {
                      "key.usr": "s:St7ElementQa"
                    }
                  ],
                  "key.parsed_declaration": "public typealias Element = Group",
                  "key.parsed_scope.end": 562,
                  "key.parsed_scope.start": 562,
                  "key.typename": "RegularExpression.Group.Type",
                  "key.typeusr": "$s7Rubicon17RegularExpressionC5GroupCmD",
                  "key.usr": "s:St7ElementQa"
                },
                {
                  "key.accessibility": "source.lang.swift.accessibility.internal",
                  "key.annotated_decl": "<Declaration>var index: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                  "key.column": 13,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>index<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
                  "key.kind": "source.lang.swift.decl.var.instance",
                  "key.length": 18,
                  "key.line": 564,
                  "key.name": "index",
                  "key.namecolumn": 17,
                  "key.namelength": 5,
                  "key.nameline": 564,
                  "key.nameoffset": 32992,
                  "key.offset": 32988,
                  "key.parsed_declaration": "var index: Int = 0",
                  "key.parsed_scope.end": 564,
                  "key.parsed_scope.start": 564,
                  "key.setter_accessibility": "source.lang.swift.accessibility.internal",
                  "key.typename": "Int",
                  "key.typeusr": "$sSiD",
                  "key.usr": "s:7Rubicon17RegularExpressionC5MatchC8IteratorC5indexSivp"
                },
                {
                  "key.accessibility": "source.lang.swift.accessibility.internal",
                  "key.annotated_decl": "<Declaration>let match: <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type><\/Declaration>",
                  "key.column": 13,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>match<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class><\/decl.var.type><\/decl.var.instance>",
                  "key.kind": "source.lang.swift.decl.var.instance",
                  "key.length": 16,
                  "key.line": 565,
                  "key.name": "match",
                  "key.namecolumn": 17,
                  "key.namelength": 5,
                  "key.nameline": 565,
                  "key.nameoffset": 33023,
                  "key.offset": 33019,
                  "key.parsed_declaration": "let match: Match",
                  "key.parsed_scope.end": 565,
                  "key.parsed_scope.start": 565,
                  "key.typename": "RegularExpression.Match",
                  "key.typeusr": "$s7Rubicon17RegularExpressionC5MatchCD",
                  "key.usr": "s:7Rubicon17RegularExpressionC5MatchC8IteratorC5matchAEvp"
                },
                {
                  "key.accessibility": "source.lang.swift.accessibility.internal",
                  "key.annotated_decl": "<Declaration>init(match: <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>)<\/Declaration>",
                  "key.bodycolumn": 33,
                  "key.bodylength": 20,
                  "key.bodyline": 567,
                  "key.bodyoffset": 33069,
                  "key.column": 13,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>match<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
                  "key.kind": "source.lang.swift.decl.function.method.instance",
                  "key.length": 41,
                  "key.line": 567,
                  "key.name": "init(match:)",
                  "key.namecolumn": 13,
                  "key.namelength": 18,
                  "key.nameline": 567,
                  "key.nameoffset": 33049,
                  "key.offset": 33049,
                  "key.parsed_declaration": "init(match: Match)",
                  "key.parsed_scope.end": 567,
                  "key.parsed_scope.start": 567,
                  "key.substructure": [
                  ],
                  "key.typename": "(RegularExpression.Match.Iterator.Type) -> (RegularExpression.Match) -> RegularExpression.Match.Iterator",
                  "key.typeusr": "$s5match7Rubicon17RegularExpressionC5MatchC8IteratorCAF_tcD",
                  "key.usr": "s:7Rubicon17RegularExpressionC5MatchC8IteratorC5matchAgE_tcfc"
                },
                {
                  "key.accessibility": "source.lang.swift.accessibility.public",
                  "key.annotated_decl": "<Declaration>public func next() -&gt; <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC8IteratorC7Elementa\">Element<\/Type>?<\/Declaration>",
                  "key.attributes": [
                    {
                      "key.attribute": "source.decl.attribute.public",
                      "key.column": 13,
                      "key.length": 6,
                      "key.line": 574,
                      "key.offset": 33374
                    }
                  ],
                  "key.bodycolumn": 45,
                  "key.bodylength": 63,
                  "key.bodyline": 574,
                  "key.bodyoffset": 33406,
                  "key.column": 20,
                  "key.doc.column": 25,
                  "key.doc.comment": "Get the next element.\n\n- Returns: The next element or `nil` if there are no more elements.",
                  "key.doc.declaration": "public func next() -> Element?",
                  "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"574\" column=\"25\"><Name>next()<\/Name><USR>s:7Rubicon17RegularExpressionC5MatchC8IteratorC4nextAC5GroupCSgyF<\/USR><Declaration>public func next() -&gt; Element?<\/Declaration><CommentParts><Abstract><Para>Get the next element.<\/Para><\/Abstract><ResultDiscussion><Para>The next element or <codeVoice>nil<\/codeVoice> if there are no more elements.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
                  "key.doc.line": 574,
                  "key.doc.name": "next()",
                  "key.doc.result_discussion": [
                    {
                      "Para": "The next element or `nil` if there are no more elements."
                    }
                  ],
                  "key.doc.type": "Function",
                  "key.doccolumn": 13,
                  "key.doclength": 143,
                  "key.docline": 570,
                  "key.docoffset": 33219,
                  "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
                  "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>next<\/decl.name>() -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon17RegularExpressionC5MatchC8IteratorC7Elementa\">Element<\/ref.typealias>?<\/decl.function.returntype><\/decl.function.method.instance>",
                  "key.kind": "source.lang.swift.decl.function.method.instance",
                  "key.length": 89,
                  "key.line": 574,
                  "key.name": "next()",
                  "key.namecolumn": 25,
                  "key.namelength": 6,
                  "key.nameline": 574,
                  "key.nameoffset": 33386,
                  "key.offset": 33381,
                  "key.overrides": [
                    {
                      "key.usr": "s:St4next7ElementQzSgyF"
                    }
                  ],
                  "key.parsed_declaration": "public func next() -> Element?",
                  "key.parsed_scope.end": 574,
                  "key.parsed_scope.start": 574,
                  "key.typename": "(RegularExpression.Match.Iterator) -> () -> RegularExpression.Group?",
                  "key.typeusr": "$s7Rubicon17RegularExpressionC5GroupCSgycD",
                  "key.usr": "s:7Rubicon17RegularExpressionC5MatchC8IteratorC4nextAC5GroupCSgyF"
                }
              ],
              "key.typename": "RegularExpression.Match.Iterator.Type",
              "key.typeusr": "$s7Rubicon17RegularExpressionC5MatchC8IteratorCmD",
              "key.usr": "s:7Rubicon17RegularExpressionC5MatchC8IteratorC"
            }
          ],
          "key.typename": "RegularExpression.Match.Type",
          "key.typeusr": "$s7Rubicon17RegularExpressionC5MatchCmD",
          "key.usr": "s:7Rubicon17RegularExpressionC5MatchC"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>public class <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.Group<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 5,
              "key.length": 6,
              "key.line": 581,
              "key.offset": 33671
            }
          ],
          "key.bodycolumn": 25,
          "key.bodylength": 935,
          "key.bodyline": 581,
          "key.bodyoffset": 33691,
          "key.column": 12,
          "key.doc.column": 18,
          "key.doc.comment": "This class encapsulates a single capture group.",
          "key.doc.declaration": "public class Rubicon.RegularExpression.Group",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Class file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"581\" column=\"18\"><Name>Group<\/Name><USR>s:7Rubicon17RegularExpressionC5GroupC<\/USR><Declaration>public class Rubicon.RegularExpression.Group<\/Declaration><CommentParts><Abstract><Para>This class encapsulates a single capture group.<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line": 581,
          "key.doc.name": "Group",
          "key.doc.type": "Class",
          "key.doccolumn": 5,
          "key.doclength": 60,
          "key.docline": 579,
          "key.docoffset": 33607,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<decl.name>Group<\/decl.name><\/decl.class>",
          "key.kind": "source.lang.swift.decl.class",
          "key.length": 949,
          "key.line": 581,
          "key.name": "Group",
          "key.namecolumn": 18,
          "key.namelength": 5,
          "key.nameline": 581,
          "key.nameoffset": 33684,
          "key.offset": 33678,
          "key.parsed_declaration": "public class Group",
          "key.parsed_scope.end": 599,
          "key.parsed_scope.start": 581,
          "key.substructure": [
            {
              "key.accessibility": "source.lang.swift.accessibility.internal",
              "key.annotated_decl": "<Declaration>let match: <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type><\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>match<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class><\/decl.var.type><\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 16,
              "key.line": 582,
              "key.name": "match",
              "key.namecolumn": 13,
              "key.namelength": 5,
              "key.nameline": 582,
              "key.nameoffset": 33704,
              "key.offset": 33700,
              "key.parsed_declaration": "let match: Match",
              "key.parsed_scope.end": 582,
              "key.parsed_scope.start": 582,
              "key.typename": "RegularExpression.Match",
              "key.typeusr": "$s7Rubicon17RegularExpressionC5MatchCD",
              "key.usr": "s:7Rubicon17RegularExpressionC5GroupC5matchAC5MatchCvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public let range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;?<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 588,
                  "key.offset": 33996
                }
              ],
              "key.column": 16,
              "key.doc.column": 20,
              "key.doc.comment": "The range of the search string for this capture group of `nil` if this capture group did not\nparticipate in the match.",
              "key.doc.declaration": "public let range: Range<String.Index>?",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"588\" column=\"20\"><Name>range<\/Name><USR>s:7Rubicon17RegularExpressionC5GroupC5rangeSnySS5IndexVGSgvp<\/USR><Declaration>public let range: Range&lt;String.Index&gt;?<\/Declaration><CommentParts><Abstract><Para>The range of the search string for this capture group of <codeVoice>nil<\/codeVoice> if this capture group did not participate in the match.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 588,
              "key.doc.name": "range",
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 147,
              "key.docline": 585,
              "key.docoffset": 33841,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>range<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.type><\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 31,
              "key.line": 588,
              "key.name": "range",
              "key.namecolumn": 20,
              "key.namelength": 5,
              "key.nameline": 588,
              "key.nameoffset": 34007,
              "key.offset": 34003,
              "key.parsed_declaration": "public let range: Range<String.Index>?",
              "key.parsed_scope.end": 588,
              "key.parsed_scope.start": 588,
              "key.typename": "Range<String.Index>?",
              "key.typeusr": "$sSnySS5IndexVGSgD",
              "key.usr": "s:7Rubicon17RegularExpressionC5GroupC5rangeSnySS5IndexVGSgvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public internal(set) lazy var subString: <Type usr=\"s:SS\">String<\/Type>? { get set }<\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.lazy",
                  "key.column": 30,
                  "key.length": 4,
                  "key.line": 593,
                  "key.offset": 34338
                },
                {
                  "key.attribute": "source.decl.attribute.setter_access.internal",
                  "key.column": 16,
                  "key.length": 13,
                  "key.line": 593,
                  "key.offset": 34324
                },
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 593,
                  "key.offset": 34317
                }
              ],
              "key.column": 35,
              "key.doc.column": 39,
              "key.doc.comment": "The substring of the search string for this capture group of `nil` if this capture group did not\nparticipate in the match.",
              "key.doc.declaration": "public internal(set) lazy var subString: String? { get set }",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"593\" column=\"39\"><Name>subString<\/Name><USR>s:7Rubicon17RegularExpressionC5GroupC9subStringSSSgvp<\/USR><Declaration>public internal(set) lazy var subString: String? { get set }<\/Declaration><CommentParts><Abstract><Para>The substring of the search string for this capture group of <codeVoice>nil<\/codeVoice> if this capture group did not participate in the match.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 593,
              "key.doc.name": "subString",
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 151,
              "key.docline": 590,
              "key.docoffset": 34158,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>internal<\/syntaxtype.keyword>(set) <syntaxtype.keyword>lazy<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>subString<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 78,
              "key.line": 593,
              "key.name": "subString",
              "key.namecolumn": 39,
              "key.namelength": 9,
              "key.nameline": 593,
              "key.nameoffset": 34347,
              "key.offset": 34343,
              "key.parsed_declaration": "public internal(set) lazy var subString: String? = ((range == nil) ? nil : String(match.string[range!]))",
              "key.parsed_scope.end": 593,
              "key.parsed_scope.start": 593,
              "key.setter_accessibility": "source.lang.swift.accessibility.internal",
              "key.typename": "String?",
              "key.typeusr": "$sSSSgD",
              "key.usr": "s:7Rubicon17RegularExpressionC5GroupC9subStringSSSgvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.internal",
              "key.annotated_decl": "<Declaration>init(_ match: <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>, range: <Type usr=\"c:@T@NSRange\">NSRange<\/Type>)<\/Declaration>",
              "key.bodycolumn": 47,
              "key.bodylength": 151,
              "key.bodyline": 595,
              "key.bodyoffset": 34469,
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>match<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"c:@T@NSRange\">NSRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
              "key.kind": "source.lang.swift.decl.function.method.instance",
              "key.length": 190,
              "key.line": 595,
              "key.name": "init(_:range:)",
              "key.namecolumn": 9,
              "key.namelength": 36,
              "key.nameline": 595,
              "key.nameoffset": 34431,
              "key.offset": 34431,
              "key.parsed_declaration": "init(_ match: Match, range: NSRange)",
              "key.parsed_scope.end": 598,
              "key.parsed_scope.start": 595,
              "key.substructure": [
              ],
              "key.typename": "(RegularExpression.Group.Type) -> (RegularExpression.Match, _NSRange) -> RegularExpression.Group",
              "key.typeusr": "$s_5range7Rubicon17RegularExpressionC5GroupCAD5MatchC_So8_NSRangeVtcD",
              "key.usr": "s:7Rubicon17RegularExpressionC5GroupC_5rangeAeC5MatchC_So8_NSRangeVtcfc"
            }
          ],
          "key.typename": "RegularExpression.Group.Type",
          "key.typeusr": "$s7Rubicon17RegularExpressionC5GroupCmD",
          "key.usr": "s:7Rubicon17RegularExpressionC5GroupC"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>public class <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.NamedGroup : <Type usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 5,
              "key.length": 6,
              "key.line": 604,
              "key.offset": 34818
            }
          ],
          "key.bodycolumn": 37,
          "key.bodylength": 352,
          "key.bodyline": 604,
          "key.bodyoffset": 34850,
          "key.column": 12,
          "key.doc.column": 18,
          "key.doc.comment": "This class encapsulates a single named capture group.",
          "key.doc.declaration": "public class Rubicon.RegularExpression.NamedGroup : Group",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.doc.full_as_xml": "<Class file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"604\" column=\"18\"><Name>NamedGroup<\/Name><USR>s:7Rubicon17RegularExpressionC10NamedGroupC<\/USR><Declaration>public class Rubicon.RegularExpression.NamedGroup : Group<\/Declaration><CommentParts><Abstract><Para>This class encapsulates a single named capture group.<\/Para><\/Abstract><\/CommentParts><\/Class>",
          "key.doc.line": 604,
          "key.doc.name": "NamedGroup",
          "key.doc.type": "Class",
          "key.doccolumn": 5,
          "key.doclength": 66,
          "key.docline": 602,
          "key.docoffset": 34748,
          "key.elements": [
            {
              "key.column": 30,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 5,
              "key.line": 604,
              "key.offset": 34843
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<decl.name>NamedGroup<\/decl.name> : <ref.class usr=\"s:7Rubicon17RegularExpressionC5GroupC\">Group<\/ref.class><\/decl.class>",
          "key.inheritedtypes": [
            {
              "key.name": "Group"
            }
          ],
          "key.kind": "source.lang.swift.decl.class",
          "key.length": 378,
          "key.line": 604,
          "key.name": "NamedGroup",
          "key.namecolumn": 18,
          "key.namelength": 10,
          "key.nameline": 604,
          "key.nameoffset": 34831,
          "key.offset": 34825,
          "key.parsed_declaration": "public class NamedGroup: Group",
          "key.parsed_scope.end": 614,
          "key.parsed_scope.start": 604,
          "key.substructure": [
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>public let name: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.attributes": [
                {
                  "key.attribute": "source.decl.attribute.public",
                  "key.column": 9,
                  "key.length": 6,
                  "key.line": 608,
                  "key.offset": 35029
                }
              ],
              "key.column": 16,
              "key.doc.column": 20,
              "key.doc.comment": "The name of the capture group.",
              "key.doc.declaration": "public let name: String",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"608\" column=\"20\"><Name>name<\/Name><USR>s:7Rubicon17RegularExpressionC10NamedGroupC4nameSSvp<\/USR><Declaration>public let name: String<\/Declaration><CommentParts><Abstract><Para>The name of the capture group.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 608,
              "key.doc.name": "name",
              "key.doc.type": "Other",
              "key.doccolumn": 9,
              "key.doclength": 47,
              "key.docline": 606,
              "key.docoffset": 34974,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>name<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
              "key.kind": "source.lang.swift.decl.var.instance",
              "key.length": 16,
              "key.line": 608,
              "key.name": "name",
              "key.namecolumn": 20,
              "key.namelength": 4,
              "key.nameline": 608,
              "key.nameoffset": 35040,
              "key.offset": 35036,
              "key.parsed_declaration": "public let name: String",
              "key.parsed_scope.end": 608,
              "key.parsed_scope.start": 608,
              "key.typename": "String",
              "key.typeusr": "$sSSD",
              "key.usr": "s:7Rubicon17RegularExpressionC10NamedGroupC4nameSSvp"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.internal",
              "key.annotated_decl": "<Declaration>init(_ match: <Type usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/Type>, name: <Type usr=\"s:SS\">String<\/Type>, range: <Type usr=\"c:@T@NSRange\">NSRange<\/Type>)<\/Declaration>",
              "key.bodycolumn": 61,
              "key.bodylength": 82,
              "key.bodyline": 610,
              "key.bodyoffset": 35114,
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>match<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon17RegularExpressionC5MatchC\">Match<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>name<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>range<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"c:@T@NSRange\">NSRange<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
              "key.kind": "source.lang.swift.decl.function.method.instance",
              "key.length": 135,
              "key.line": 610,
              "key.name": "init(_:name:range:)",
              "key.namecolumn": 9,
              "key.namelength": 50,
              "key.nameline": 610,
              "key.nameoffset": 35062,
              "key.offset": 35062,
              "key.parsed_declaration": "init(_ match: Match, name: String, range: NSRange)",
              "key.parsed_scope.end": 613,
              "key.parsed_scope.start": 610,
              "key.substructure": [
              ],
              "key.typename": "(RegularExpression.NamedGroup.Type) -> (RegularExpression.Match, String, _NSRange) -> RegularExpression.NamedGroup",
              "key.typeusr": "$s_4name5range7Rubicon17RegularExpressionC10NamedGroupCAE5MatchC_SSSo8_NSRangeVtcD",
              "key.usr": "s:7Rubicon17RegularExpressionC10NamedGroupC_4name5rangeAeC5MatchC_SSSo8_NSRangeVtcfc"
            }
          ],
          "key.typename": "RegularExpression.NamedGroup.Type",
          "key.typeusr": "$s7Rubicon17RegularExpressionC10NamedGroupCmD",
          "key.usr": "s:7Rubicon17RegularExpressionC10NamedGroupC"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.private",
          "key.annotated_decl": "<Declaration>private final func nsRange(_ range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>&gt;?, string str: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"c:@S@_NSRange\">_NSRange<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.final",
              "key.column": 13,
              "key.length": 5,
              "key.line": 616,
              "key.offset": 35217
            },
            {
              "key.attribute": "source.decl.attribute.private",
              "key.column": 5,
              "key.length": 7,
              "key.line": 616,
              "key.offset": 35209
            }
          ],
          "key.bodycolumn": 96,
          "key.bodylength": 58,
          "key.bodyline": 616,
          "key.bodyoffset": 35300,
          "key.column": 19,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>final<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>nsRange<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>string<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"c:@S@_NSRange\">_NSRange<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 136,
          "key.line": 616,
          "key.name": "nsRange(_:string:)",
          "key.namecolumn": 24,
          "key.namelength": 58,
          "key.nameline": 616,
          "key.nameoffset": 35228,
          "key.offset": 35223,
          "key.parsed_declaration": "private final func nsRange(_ range: Range<String.Index>?, string str: String) -> _NSRange",
          "key.parsed_scope.end": 616,
          "key.parsed_scope.start": 616,
          "key.substructure": [
          ],
          "key.typename": "(RegularExpression) -> (Range<String.Index>?, String) -> _NSRange",
          "key.typeusr": "$s_6stringSo8_NSRangeVSnySS5IndexVGSg_SStcD",
          "key.usr": "s:7Rubicon17RegularExpressionC7nsRange33_D2E85E0BC80DB5B8693346241D8D33ECLL_6stringSo8_NSRangeVSnySS5IndexVGSg_SStF"
        }
      ],
      "key.typename": "RegularExpression.Type",
      "key.typeusr": "$s7Rubicon17RegularExpressionCmD",
      "key.usr": "s:7Rubicon17RegularExpressionC"
    },
    {
      "key.accessibility": "source.lang.swift.accessibility.public",
      "key.annotated_decl": "<Declaration>public typealias RegEx = <Type usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/Type><\/Declaration>",
      "key.attributes": [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 622,
          "key.offset": 35531
        }
      ],
      "key.column": 8,
      "key.doc.column": 18,
      "key.doc.comment": "Because that's a LONG freaking name to type.",
      "key.doc.declaration": "public typealias RegEx = NSRegularExpression",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"622\" column=\"18\"><Name>RegEx<\/Name><USR>s:7Rubicon5RegExa<\/USR><Declaration>public typealias RegEx = NSRegularExpression<\/Declaration><CommentParts><Abstract><Para>Because that’s a LONG freaking name to type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line": 622,
      "key.doc.name": "RegEx",
      "key.doc.type": "Other",
      "key.doccolumn": 1,
      "key.doclength": 53,
      "key.docline": 620,
      "key.docoffset": 35478,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.fully_annotated_decl": "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>RegEx<\/decl.name> = <ref.class usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/ref.class><\/decl.typealias>",
      "key.kind": "source.lang.swift.decl.typealias",
      "key.length": 37,
      "key.line": 622,
      "key.name": "RegEx",
      "key.namecolumn": 18,
      "key.namelength": 5,
      "key.nameline": 622,
      "key.nameoffset": 35548,
      "key.offset": 35538,
      "key.parsed_declaration": "public typealias RegEx = NSRegularExpression",
      "key.parsed_scope.end": 622,
      "key.parsed_scope.start": 622,
      "key.typename": "NSRegularExpression.Type",
      "key.typeusr": "$sSo19NSRegularExpressionCmD",
      "key.usr": "s:7Rubicon5RegExa"
    },
    {
      "key.accessibility": "source.lang.swift.accessibility.public",
      "key.annotated_decl": "<Declaration>public typealias RegExResult = <Type usr=\"c:objc(cs)NSTextCheckingResult\">NSTextCheckingResult<\/Type><\/Declaration>",
      "key.attributes": [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 626,
          "key.offset": 35744
        }
      ],
      "key.column": 8,
      "key.doc.column": 18,
      "key.doc.comment": "Because that's a LONG freaking name to type.",
      "key.doc.declaration": "public typealias RegExResult = NSTextCheckingResult",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"626\" column=\"18\"><Name>RegExResult<\/Name><USR>s:7Rubicon11RegExResulta<\/USR><Declaration>public typealias RegExResult = NSTextCheckingResult<\/Declaration><CommentParts><Abstract><Para>Because that’s a LONG freaking name to type.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line": 626,
      "key.doc.name": "RegExResult",
      "key.doc.type": "Other",
      "key.doccolumn": 1,
      "key.doclength": 53,
      "key.docline": 624,
      "key.docoffset": 35691,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.fully_annotated_decl": "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>RegExResult<\/decl.name> = <ref.class usr=\"c:objc(cs)NSTextCheckingResult\">NSTextCheckingResult<\/ref.class><\/decl.typealias>",
      "key.kind": "source.lang.swift.decl.typealias",
      "key.length": 44,
      "key.line": 626,
      "key.name": "RegExResult",
      "key.namecolumn": 18,
      "key.namelength": 11,
      "key.nameline": 626,
      "key.nameoffset": 35761,
      "key.offset": 35751,
      "key.parsed_declaration": "public typealias RegExResult = NSTextCheckingResult",
      "key.parsed_scope.end": 626,
      "key.parsed_scope.start": 626,
      "key.typename": "NSTextCheckingResult.Type",
      "key.typeusr": "$sSo20NSTextCheckingResultCmD",
      "key.usr": "s:7Rubicon11RegExResulta"
    },
    {
      "key.accessibility": "source.lang.swift.accessibility.public",
      "key.annotated_decl": "<Declaration>public func regexML(pattern: <Type usr=\"s:SS\">String<\/Type>) throws -&gt; <Type usr=\"s:7Rubicon5RegExa\">RegEx<\/Type><\/Declaration>",
      "key.attributes": [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 638,
          "key.offset": 36476
        }
      ],
      "key.bodycolumn": 55,
      "key.bodylength": 79,
      "key.bodyline": 638,
      "key.bodyoffset": 36530,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Convienience function to build an instance of\n<code>[RegEx](https:\/\/developer.apple.com\/documentation\/foundation\/nsregularexpression\/)<\/code> that includes\nthe option to have anchors ('^' and '$') match the beginning and end of lines instead of the entire input.\n\n- Parameter pattern: the regular expression pattern.\n- Returns: The instance of\n           <code>[RegEx](https:\/\/developer.apple.com\/documentation\/foundation\/nsregularexpression\/)<\/code>\n- Throws: Exception if the pattern is an invalid regular expression pattern.",
      "key.doc.declaration": "public func regexML(pattern: String) throws -> RegEx",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"638\" column=\"13\"><Name>regexML(pattern:)<\/Name><USR>s:7Rubicon7regexML7patternSo19NSRegularExpressionCSS_tKF<\/USR><Declaration>public func regexML(pattern: String) throws -&gt; RegEx<\/Declaration><CommentParts><Abstract><Para>Convienience function to build an instance of <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/foundation\/nsregularexpression\/\">RegEx<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> that includes the option to have anchors (‘^’ and ‘$’) match the beginning and end of lines instead of the entire input.<\/Para><\/Abstract><Parameters><Parameter><Name>pattern<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the regular expression pattern.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The instance of <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/foundation\/nsregularexpression\/\">RegEx<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML><\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>Exception if the pattern is an invalid regular expression pattern.<\/Para><\/ThrowsDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 638,
      "key.doc.name": "regexML(pattern:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "the regular expression pattern."
            }
          ],
          "name": "pattern"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The instance of <code><\/code>"
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 564,
      "key.docline": 629,
      "key.docoffset": 35912,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>regexML<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>pattern<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon5RegExa\">RegEx<\/ref.typealias><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 127,
      "key.line": 638,
      "key.name": "regexML(pattern:)",
      "key.namecolumn": 13,
      "key.namelength": 24,
      "key.nameline": 638,
      "key.nameoffset": 36488,
      "key.offset": 36483,
      "key.parsed_declaration": "public func regexML(pattern: String) throws -> RegEx",
      "key.parsed_scope.end": 640,
      "key.parsed_scope.start": 638,
      "key.substructure": [
      ],
      "key.typename": "(String) throws -> NSRegularExpression",
      "key.typeusr": "$s7patternSo19NSRegularExpressionCSS_tKcD",
      "key.usr": "s:7Rubicon7regexML7patternSo19NSRegularExpressionCSS_tKF"
    },
    {
      "key.annotated_decl": "<Declaration>public enum <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.Options<\/Declaration>",
      "key.bodycolumn": 38,
      "key.bodylength": 2167,
      "key.bodyline": 642,
      "key.bodyoffset": 36649,
      "key.column": 1,
      "key.doc.column": 17,
      "key.doc.declaration": "public enum Rubicon.RegularExpression.Options",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"48\" column=\"17\"><Name>Options<\/Name><USR>s:7Rubicon17RegularExpressionC7OptionsO<\/USR><Declaration>public enum Rubicon.RegularExpression.Options<\/Declaration><CommentParts><Abstract><Para>These constants define the regular expression options. These constants are used by <codeVoice>init(pattern:options:)<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line": 48,
      "key.doc.name": "Options",
      "key.doc.type": "Other",
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.fully_annotated_decl": "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<decl.name>Options<\/decl.name><\/decl.enum>",
      "key.kind": "source.lang.swift.decl.extension",
      "key.length": 2205,
      "key.line": 642,
      "key.name": "RegularExpression.Options",
      "key.namecolumn": 11,
      "key.namelength": 25,
      "key.nameline": 642,
      "key.nameoffset": 36622,
      "key.offset": 36612,
      "key.parsed_declaration": "extension RegularExpression.Options",
      "key.parsed_scope.end": 670,
      "key.parsed_scope.start": 642,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>static func convert(from options: <Type usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/Type>.<Type usr=\"c:@E@NSRegularExpressionOptions\">Options<\/Type>) -&gt; [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/Type>]<\/Declaration>",
          "key.bodycolumn": 100,
          "key.bodylength": 1022,
          "key.bodyline": 643,
          "key.bodyoffset": 36749,
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>convert<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>options<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/ref.class>.<ref.struct usr=\"c:@E@NSRegularExpressionOptions\">Options<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/ref.enum>]<\/decl.function.returntype><\/decl.function.method.static>",
          "key.kind": "source.lang.swift.decl.function.method.static",
          "key.length": 1118,
          "key.line": 643,
          "key.name": "convert(from:)",
          "key.namecolumn": 17,
          "key.namelength": 50,
          "key.nameline": 643,
          "key.nameoffset": 36666,
          "key.offset": 36654,
          "key.parsed_declaration": "static func convert(from options: NSRegularExpression.Options) -> [RegularExpression.Options]",
          "key.parsed_scope.end": 653,
          "key.parsed_scope.start": 643,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon17RegularExpressionC7OptionsO7convert4fromSo09NSRegularcD0VSayAEG_tFZ\">convert(from: [RegularExpression.Options]) -&gt; NSRegularExpression.Options<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>var o: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/Type>]<\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>o<\/decl.name>: <decl.var.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/ref.enum>]<\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 39,
              "key.line": 644,
              "key.name": "o",
              "key.namecolumn": 13,
              "key.namelength": 1,
              "key.nameline": 644,
              "key.nameoffset": 36762,
              "key.offset": 36758,
              "key.parsed_declaration": "var o: [RegularExpression.Options] = []",
              "key.parsed_scope.end": 644,
              "key.parsed_scope.start": 644,
              "key.typename": "[RegularExpression.Options]",
              "key.typeusr": "$sSay7Rubicon17RegularExpressionC7OptionsOGD",
              "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO7convert4fromSayAEGSo09NSRegularcD0V_tFZ1oL_AHvp"
            }
          ],
          "key.typename": "(RegularExpression.Options.Type) -> (NSRegularExpression.Options) -> [RegularExpression.Options]",
          "key.typeusr": "$s4fromSay7Rubicon17RegularExpressionC7OptionsOGSo09NSRegulardE0V_tcD",
          "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO7convert4fromSayAEGSo09NSRegularcD0V_tFZ"
        },
        {
          "key.annotated_decl": "<Declaration>static func convert(from options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/Type>]) -&gt; <Type usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/Type>.<Type usr=\"c:@E@NSRegularExpressionOptions\">Options<\/Type><\/Declaration>",
          "key.bodycolumn": 100,
          "key.bodylength": 941,
          "key.bodyline": 655,
          "key.bodyoffset": 37873,
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>convert<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>options<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC7OptionsO\">Options<\/ref.enum>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/ref.class>.<ref.struct usr=\"c:@E@NSRegularExpressionOptions\">Options<\/ref.struct><\/decl.function.returntype><\/decl.function.method.static>",
          "key.kind": "source.lang.swift.decl.function.method.static",
          "key.length": 1037,
          "key.line": 655,
          "key.name": "convert(from:)",
          "key.namecolumn": 17,
          "key.namelength": 50,
          "key.nameline": 655,
          "key.nameoffset": 37790,
          "key.offset": 37778,
          "key.parsed_declaration": "static func convert(from options: [RegularExpression.Options]) -> NSRegularExpression.Options",
          "key.parsed_scope.end": 669,
          "key.parsed_scope.start": 655,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon17RegularExpressionC7OptionsO7convert4fromSayAEGSo09NSRegularcD0V_tFZ\">convert(from: NSRegularExpression.Options) -&gt; [RegularExpression.Options]<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>var o: <Type usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/Type>.<Type usr=\"c:@E@NSRegularExpressionOptions\">Options<\/Type><\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>o<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/ref.class>.<ref.struct usr=\"c:@E@NSRegularExpressionOptions\">Options<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 39,
              "key.line": 656,
              "key.name": "o",
              "key.namecolumn": 13,
              "key.namelength": 1,
              "key.nameline": 656,
              "key.nameoffset": 37886,
              "key.offset": 37882,
              "key.parsed_declaration": "var o: NSRegularExpression.Options = []",
              "key.parsed_scope.end": 656,
              "key.parsed_scope.start": 656,
              "key.typename": "NSRegularExpression.Options",
              "key.typeusr": "$sSo26NSRegularExpressionOptionsVD",
              "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO7convert4fromSo09NSRegularcD0VSayAEG_tFZ1oL_AIvp"
            }
          ],
          "key.typename": "(RegularExpression.Options.Type) -> ([RegularExpression.Options]) -> NSRegularExpression.Options",
          "key.typeusr": "$s4fromSo26NSRegularExpressionOptionsVSay7Rubicon07RegularC0C0D0OG_tcD",
          "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO7convert4fromSo09NSRegularcD0VSayAEG_tFZ"
        }
      ],
      "key.typename": "RegularExpression.Options.Type",
      "key.typeusr": "$s7Rubicon17RegularExpressionC7OptionsOmD",
      "key.usr": "s:7Rubicon17RegularExpressionC7OptionsO"
    },
    {
      "key.annotated_decl": "<Declaration>public enum <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.MatchingOptions<\/Declaration>",
      "key.bodycolumn": 46,
      "key.bodylength": 851,
      "key.bodyline": 672,
      "key.bodyoffset": 38864,
      "key.column": 1,
      "key.doc.column": 17,
      "key.doc.declaration": "public enum Rubicon.RegularExpression.MatchingOptions",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"85\" column=\"17\"><Name>MatchingOptions<\/Name><USR>s:7Rubicon17RegularExpressionC15MatchingOptionsO<\/USR><Declaration>public enum Rubicon.RegularExpression.MatchingOptions<\/Declaration><CommentParts><Abstract><Para>The matching options constants specify the reporting, completion and matching rules to the expression matching methods. These constants are used by all methods that search for, or replace values, using a regular expression.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line": 85,
      "key.doc.name": "MatchingOptions",
      "key.doc.type": "Other",
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.fully_annotated_decl": "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<decl.name>MatchingOptions<\/decl.name><\/decl.enum>",
      "key.kind": "source.lang.swift.decl.extension",
      "key.length": 897,
      "key.line": 672,
      "key.name": "RegularExpression.MatchingOptions",
      "key.namecolumn": 11,
      "key.namelength": 33,
      "key.nameline": 672,
      "key.nameoffset": 38829,
      "key.offset": 38819,
      "key.parsed_declaration": "extension RegularExpression.MatchingOptions",
      "key.parsed_scope.end": 686,
      "key.parsed_scope.start": 672,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>static func convert(from options: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/Type>]) -&gt; <Type usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/Type>.<Type usr=\"c:@E@NSMatchingOptions\">MatchingOptions<\/Type><\/Declaration>",
          "key.bodycolumn": 116,
          "key.bodylength": 733,
          "key.bodyline": 673,
          "key.bodyoffset": 38980,
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>convert<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>options<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC15MatchingOptionsO\">MatchingOptions<\/ref.enum>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/ref.class>.<ref.struct usr=\"c:@E@NSMatchingOptions\">MatchingOptions<\/ref.struct><\/decl.function.returntype><\/decl.function.method.static>",
          "key.kind": "source.lang.swift.decl.function.method.static",
          "key.length": 845,
          "key.line": 673,
          "key.name": "convert(from:)",
          "key.namecolumn": 17,
          "key.namelength": 58,
          "key.nameline": 673,
          "key.nameoffset": 38881,
          "key.offset": 38869,
          "key.parsed_declaration": "static func convert(from options: [RegularExpression.MatchingOptions]) -> NSRegularExpression.MatchingOptions",
          "key.parsed_scope.end": 685,
          "key.parsed_scope.start": 673,
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>var o: <Type usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/Type>.<Type usr=\"c:@E@NSMatchingOptions\">MatchingOptions<\/Type><\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>o<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/ref.class>.<ref.struct usr=\"c:@E@NSMatchingOptions\">MatchingOptions<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 47,
              "key.line": 674,
              "key.name": "o",
              "key.namecolumn": 13,
              "key.namelength": 1,
              "key.nameline": 674,
              "key.nameoffset": 38993,
              "key.offset": 38989,
              "key.parsed_declaration": "var o: NSRegularExpression.MatchingOptions = []",
              "key.parsed_scope.end": 674,
              "key.parsed_scope.start": 674,
              "key.typename": "NSRegularExpression.MatchingOptions",
              "key.typeusr": "$sSo17NSMatchingOptionsVD",
              "key.usr": "s:7Rubicon17RegularExpressionC15MatchingOptionsO7convert4fromSo010NSMatchingE0VSayAEG_tFZ1oL_AIvp"
            }
          ],
          "key.typename": "(RegularExpression.MatchingOptions.Type) -> ([RegularExpression.MatchingOptions]) -> NSRegularExpression.MatchingOptions",
          "key.typeusr": "$s4fromSo17NSMatchingOptionsVSay7Rubicon17RegularExpressionC08MatchingC0OG_tcD",
          "key.usr": "s:7Rubicon17RegularExpressionC15MatchingOptionsO7convert4fromSo010NSMatchingE0VSayAEG_tFZ"
        }
      ],
      "key.typename": "RegularExpression.MatchingOptions.Type",
      "key.typeusr": "$s7Rubicon17RegularExpressionC15MatchingOptionsOmD",
      "key.usr": "s:7Rubicon17RegularExpressionC15MatchingOptionsO"
    },
    {
      "key.annotated_decl": "<Declaration>public enum <Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.MatchingFlags<\/Declaration>",
      "key.bodycolumn": 44,
      "key.bodylength": 814,
      "key.bodyline": 688,
      "key.bodyoffset": 39761,
      "key.column": 1,
      "key.doc.column": 17,
      "key.doc.declaration": "public enum Rubicon.RegularExpression.MatchingFlags",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift\" line=\"123\" column=\"17\"><Name>MatchingFlags<\/Name><USR>s:7Rubicon17RegularExpressionC13MatchingFlagsO<\/USR><Declaration>public enum Rubicon.RegularExpression.MatchingFlags<\/Declaration><CommentParts><Abstract><Para>Set by the Block as the matching progresses, completes, or fails. Used by the method <codeVoice>forEachMatch(in:options:range:using:)<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line": 123,
      "key.doc.name": "MatchingFlags",
      "key.doc.type": "Other",
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
      "key.fully_annotated_decl": "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<decl.name>MatchingFlags<\/decl.name><\/decl.enum>",
      "key.kind": "source.lang.swift.decl.extension",
      "key.length": 858,
      "key.line": 688,
      "key.name": "RegularExpression.MatchingFlags",
      "key.namecolumn": 11,
      "key.namelength": 31,
      "key.nameline": 688,
      "key.nameoffset": 39728,
      "key.offset": 39718,
      "key.parsed_declaration": "extension RegularExpression.MatchingFlags",
      "key.parsed_scope.end": 698,
      "key.parsed_scope.start": 688,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>static func convert(from options: <Type usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/Type>.<Type usr=\"c:@E@NSMatchingFlags\">MatchingFlags<\/Type>) -&gt; [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC13MatchingFlagsO\">MatchingFlags<\/Type>]<\/Declaration>",
          "key.bodycolumn": 112,
          "key.bodylength": 700,
          "key.bodyline": 689,
          "key.bodyoffset": 39873,
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
          "key.fully_annotated_decl": "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>convert<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>options<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"c:objc(cs)NSRegularExpression\">NSRegularExpression<\/ref.class>.<ref.struct usr=\"c:@E@NSMatchingFlags\">MatchingFlags<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC13MatchingFlagsO\">MatchingFlags<\/ref.enum>]<\/decl.function.returntype><\/decl.function.method.static>",
          "key.kind": "source.lang.swift.decl.function.method.static",
          "key.length": 808,
          "key.line": 689,
          "key.name": "convert(from:)",
          "key.namecolumn": 17,
          "key.namelength": 56,
          "key.nameline": 689,
          "key.nameoffset": 39778,
          "key.offset": 39766,
          "key.parsed_declaration": "static func convert(from options: NSRegularExpression.MatchingFlags) -> [RegularExpression.MatchingFlags]",
          "key.parsed_scope.end": 697,
          "key.parsed_scope.start": 689,
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>var o: [<Type usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/Type>.<Type usr=\"s:7Rubicon17RegularExpressionC13MatchingFlagsO\">MatchingFlags<\/Type>]<\/Declaration>",
              "key.column": 9,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/RegularExpression.swift",
              "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>o<\/decl.name>: <decl.var.type>[<ref.class usr=\"s:7Rubicon17RegularExpressionC\">RegularExpression<\/ref.class>.<ref.enum usr=\"s:7Rubicon17RegularExpressionC13MatchingFlagsO\">MatchingFlags<\/ref.enum>]<\/decl.var.type><\/decl.var.local>",
              "key.kind": "source.lang.swift.decl.var.local",
              "key.length": 45,
              "key.line": 690,
              "key.name": "o",
              "key.namecolumn": 13,
              "key.namelength": 1,
              "key.nameline": 690,
              "key.nameoffset": 39886,
              "key.offset": 39882,
              "key.parsed_declaration": "var o: [RegularExpression.MatchingFlags] = []",
              "key.parsed_scope.end": 690,
              "key.parsed_scope.start": 690,
              "key.typename": "[RegularExpression.MatchingFlags]",
              "key.typeusr": "$sSay7Rubicon17RegularExpressionC13MatchingFlagsOGD",
              "key.usr": "s:7Rubicon17RegularExpressionC13MatchingFlagsO7convert4fromSayAEGSo010NSMatchingE0V_tFZ1oL_AHvp"
            }
          ],
          "key.typename": "(RegularExpression.MatchingFlags.Type) -> (NSRegularExpression.MatchingFlags) -> [RegularExpression.MatchingFlags]",
          "key.typeusr": "$s4fromSay7Rubicon17RegularExpressionC13MatchingFlagsOGSo010NSMatchingF0V_tcD",
          "key.usr": "s:7Rubicon17RegularExpressionC13MatchingFlagsO7convert4fromSayAEGSo010NSMatchingE0V_tFZ"
        }
      ],
      "key.typename": "RegularExpression.MatchingFlags.Type",
      "key.typeusr": "$s7Rubicon17RegularExpressionC13MatchingFlagsOmD",
      "key.usr": "s:7Rubicon17RegularExpressionC13MatchingFlagsO"
    }
  ]
}
