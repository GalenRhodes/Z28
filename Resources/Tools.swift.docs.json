{
  "key.column": 1,
  "key.diagnostic_stage": "source.diagnostic.stage.swift.parse",
  "key.length": 42833,
  "key.line": 1,
  "key.offset": 0,
  "key.substructure": [
    {
      "key.accessibility": "source.lang.swift.accessibility.public",
      "key.annotated_decl": "<Declaration>public typealias CFByteOrderEnum = <Type usr=\"c:@E@__CFByteOrder\">__CFByteOrder<\/Type><\/Declaration>",
      "key.attributes": [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length" : 6,
          "key.line" : 29,
          "key.offset" : 1156
        }
      ],
      "key.column" : 8,
      "key.doc.comment" : "",
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>CFByteOrderEnum<\/decl.name> = <ref.struct usr=\"c:@E@__CFByteOrder\">__CFByteOrder<\/ref.struct><\/decl.typealias>",
      "key.kind" : "source.lang.swift.decl.typealias",
      "key.length" : 41,
      "key.line" : 29,
      "key.name" : "CFByteOrderEnum",
      "key.namecolumn" : 18,
      "key.namelength" : 15,
      "key.nameline" : 29,
      "key.nameoffset" : 1173,
      "key.offset" : 1163,
      "key.parsed_declaration" : "public typealias CFByteOrderEnum = __CFByteOrder",
      "key.parsed_scope.end" : 29,
      "key.parsed_scope.start" : 29,
      "key.typename" : "__CFByteOrder.Type",
      "key.typeusr" : "$sSo13__CFByteOrderVmD",
      "key.usr" : "s:7Rubicon15CFByteOrderEnuma"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public typealias PGTimeT = <Type usr=\"c:@T@time_t\">time_t<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.public",
          "key.column" : 1,
          "key.length" : 6,
          "key.line" : 30,
          "key.offset" : 1205
        }
      ],
      "key.column" : 8,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>PGTimeT<\/decl.name> = <ref.typealias usr=\"c:@T@time_t\">time_t<\/ref.typealias><\/decl.typealias>",
      "key.kind" : "source.lang.swift.decl.typealias",
      "key.length" : 26,
      "key.line" : 30,
      "key.name" : "PGTimeT",
      "key.namecolumn" : 18,
      "key.namelength" : 7,
      "key.nameline" : 30,
      "key.nameoffset" : 1222,
      "key.offset" : 1212,
      "key.parsed_declaration" : "public typealias PGTimeT = time_t",
      "key.parsed_scope.end" : 30,
      "key.parsed_scope.start" : 30,
      "key.typename" : "Int.Type",
      "key.typeusr" : "$sSimD",
      "key.usr" : "s:7Rubicon7PGTimeTa"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public let BasicBufferSize: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.public",
          "key.column" : 1,
          "key.length" : 6,
          "key.line" : 35,
          "key.offset" : 1395
        }
      ],
      "key.column" : 8,
      "key.doc.column" : 12,
      "key.doc.comment" : "A good size for a basic buffer.",
      "key.doc.declaration" : "public let BasicBufferSize: Int",
      "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml" : "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"35\" column=\"12\"><Name>BasicBufferSize<\/Name><USR>s:7Rubicon15BasicBufferSizeSivp<\/USR><Declaration>public let BasicBufferSize: Int<\/Declaration><CommentParts><Abstract><Para>A good size for a basic buffer.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line" : 35,
      "key.doc.name" : "BasicBufferSize",
      "key.doc.type" : "Other",
      "key.doccolumn" : 1,
      "key.doclength" : 40,
      "key.docline" : 33,
      "key.docoffset" : 1355,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>BasicBufferSize<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 35,
      "key.line" : 35,
      "key.name" : "BasicBufferSize",
      "key.namecolumn" : 12,
      "key.namelength" : 15,
      "key.nameline" : 35,
      "key.nameoffset" : 1406,
      "key.offset" : 1402,
      "key.parsed_declaration" : "public let BasicBufferSize: Int     = 4096",
      "key.parsed_scope.end" : 35,
      "key.parsed_scope.start" : 35,
      "key.typename" : "Int",
      "key.typeusr" : "$sSiD",
      "key.usr" : "s:7Rubicon15BasicBufferSizeSivp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public let OneSecondNanos: <Type usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.public",
          "key.column" : 1,
          "key.length" : 6,
          "key.line" : 40,
          "key.offset" : 1603
        }
      ],
      "key.column" : 8,
      "key.doc.column" : 12,
      "key.doc.comment" : "The number of nanoseconds in one second.",
      "key.doc.declaration" : "public let OneSecondNanos: PGTimeT",
      "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml" : "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"40\" column=\"12\"><Name>OneSecondNanos<\/Name><USR>s:7Rubicon14OneSecondNanosSivp<\/USR><Declaration>public let OneSecondNanos: PGTimeT<\/Declaration><CommentParts><Abstract><Para>The number of nanoseconds in one second.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line" : 40,
      "key.doc.name" : "OneSecondNanos",
      "key.doc.type" : "Other",
      "key.doccolumn" : 1,
      "key.doclength" : 49,
      "key.docline" : 38,
      "key.docoffset" : 1554,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>OneSecondNanos<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/ref.typealias><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 44,
      "key.line" : 40,
      "key.name" : "OneSecondNanos",
      "key.namecolumn" : 12,
      "key.namelength" : 14,
      "key.nameline" : 40,
      "key.nameoffset" : 1614,
      "key.offset" : 1610,
      "key.parsed_declaration" : "public let OneSecondNanos:  PGTimeT = 1_000_000_000",
      "key.parsed_scope.end" : 40,
      "key.parsed_scope.start" : 40,
      "key.typename" : "Int",
      "key.typeusr" : "$sSiD",
      "key.usr" : "s:7Rubicon14OneSecondNanosSivp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public let OneSecondMicros: <Type usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.public",
          "key.column" : 1,
          "key.length" : 6,
          "key.line" : 45,
          "key.offset" : 1821
        }
      ],
      "key.column" : 8,
      "key.doc.column" : 12,
      "key.doc.comment" : "The number of microseconds in one second.",
      "key.doc.declaration" : "public let OneSecondMicros: PGTimeT",
      "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml" : "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"45\" column=\"12\"><Name>OneSecondMicros<\/Name><USR>s:7Rubicon15OneSecondMicrosSivp<\/USR><Declaration>public let OneSecondMicros: PGTimeT<\/Declaration><CommentParts><Abstract><Para>The number of microseconds in one second.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line" : 45,
      "key.doc.name" : "OneSecondMicros",
      "key.doc.type" : "Other",
      "key.doccolumn" : 1,
      "key.doclength" : 50,
      "key.docline" : 43,
      "key.docoffset" : 1771,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>OneSecondMicros<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/ref.typealias><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 40,
      "key.line" : 45,
      "key.name" : "OneSecondMicros",
      "key.namecolumn" : 12,
      "key.namelength" : 15,
      "key.nameline" : 45,
      "key.nameoffset" : 1832,
      "key.offset" : 1828,
      "key.parsed_declaration" : "public let OneSecondMicros: PGTimeT = 1_000_000",
      "key.parsed_scope.end" : 45,
      "key.parsed_scope.start" : 45,
      "key.typename" : "Int",
      "key.typeusr" : "$sSiD",
      "key.usr" : "s:7Rubicon15OneSecondMicrosSivp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public let OneSecondMillis: <Type usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.public",
          "key.column" : 1,
          "key.length" : 6,
          "key.line" : 50,
          "key.offset" : 2035
        }
      ],
      "key.column" : 8,
      "key.doc.column" : 12,
      "key.doc.comment" : "The number of milliseconds in one second.",
      "key.doc.declaration" : "public let OneSecondMillis: PGTimeT",
      "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml" : "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"50\" column=\"12\"><Name>OneSecondMillis<\/Name><USR>s:7Rubicon15OneSecondMillisSivp<\/USR><Declaration>public let OneSecondMillis: PGTimeT<\/Declaration><CommentParts><Abstract><Para>The number of milliseconds in one second.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line" : 50,
      "key.doc.name" : "OneSecondMillis",
      "key.doc.type" : "Other",
      "key.doccolumn" : 1,
      "key.doclength" : 50,
      "key.docline" : 48,
      "key.docoffset" : 1985,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>OneSecondMillis<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/ref.typealias><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 36,
      "key.line" : 50,
      "key.name" : "OneSecondMillis",
      "key.namecolumn" : 12,
      "key.namelength" : 15,
      "key.nameline" : 50,
      "key.nameoffset" : 2046,
      "key.offset" : 2042,
      "key.parsed_declaration" : "public let OneSecondMillis: PGTimeT = 1_000",
      "key.parsed_scope.end" : 50,
      "key.parsed_scope.start" : 50,
      "key.typename" : "Int",
      "key.typeusr" : "$sSiD",
      "key.usr" : "s:7Rubicon15OneSecondMillisSivp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func getSysTime(delta: <Type usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/Type> = 0) -&gt; <Type usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.public",
          "key.column" : 12,
          "key.length" : 6,
          "key.line" : 58,
          "key.offset": 2389
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 58,
          "key.offset": 2378
        }
      ],
      "key.bodycolumn": 67,
      "key.bodylength": 142,
      "key.bodyline": 58,
      "key.bodyoffset": 2444,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Get the system time in nanoseconds.\n\n- Parameter delta: The number of nanoseconds to add to the system time.\n- Returns: The system time plus the value of `delta`.",
      "key.doc.declaration": "@inlinable public func getSysTime(delta: PGTimeT = 0) -> PGTimeT",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"58\" column=\"24\"><Name>getSysTime(delta:)<\/Name><USR>s:7Rubicon10getSysTime5deltaS2i_tF<\/USR><Declaration>@inlinable public func getSysTime(delta: PGTimeT = 0) -&gt; PGTimeT<\/Declaration><CommentParts><Abstract><Para>Get the system time in nanoseconds.<\/Para><\/Abstract><Parameters><Parameter><Name>delta<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of nanoseconds to add to the system time.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The system time plus the value of <codeVoice>delta<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 58,
      "key.doc.name": "getSysTime(delta:)",
      "key.doc.parameters": [
        {
          "discussion" : [
            {
              "Para" : "The number of nanoseconds to add to the system time."
            }
          ],
          "name": "delta"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The system time plus the value of `delta`."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 183,
      "key.docline": 53,
      "key.docoffset": 2195,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getSysTime<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>delta<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/ref.typealias><\/decl.var.parameter.type> = 0<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/ref.typealias><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 191,
      "key.line": 58,
      "key.name": "getSysTime(delta:)",
      "key.namecolumn": 24,
      "key.namelength": 30,
      "key.nameline": 58,
      "key.nameoffset": 2401,
      "key.offset": 2396,
      "key.parsed_declaration": "@inlinable public func getSysTime(delta: PGTimeT = 0) -> PGTimeT",
      "key.parsed_scope.end": 62,
      "key.parsed_scope.start": 58,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>var ts: <Type usr=\"c:@S@timespec\">timespec<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>ts<\/decl.name>: <decl.var.type><ref.struct usr=\"c:@S@timespec\">timespec<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 29,
          "key.line": 59,
          "key.name": "ts",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 59,
          "key.nameoffset": 2453,
          "key.offset": 2449,
          "key.parsed_declaration": "var ts: timespec = timespec()",
          "key.parsed_scope.end": 59,
          "key.parsed_scope.start": 59,
          "key.typename": "timespec",
          "key.typeusr": "$sSo8timespecVD",
          "key.usr": "s:7Rubicon10getSysTime5deltaS2i_tF2tsL_So8timespecVvp"
        }
      ],
      "key.typename" : "(Int) -> Int",
      "key.typeusr" : "$s5deltaS2i_tcD",
      "key.usr" : "s:7Rubicon10getSysTime5deltaS2i_tF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 16,
          "key.length": 6,
          "key.line": 71,
          "key.offset": 2954
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 5,
          "key.length": 10,
          "key.line": 71,
          "key.offset": 2943
        }
      ],
      "key.bodycolumn": 77,
      "key.bodylength": 146,
      "key.bodyline": 71,
      "key.bodyoffset": 3015,
      "key.column": 23,
      "key.doc.comment": "Takes a date at some point in the future and converts it to a timespec struct relative to the epoch.\n\n- Parameter when: the date.\n- Returns: A timespec structure or `nil` if the date is in the past.",
      "key.internal_diagnostic": "Unable to resolve cursor info.",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 201,
      "key.line": 71,
      "key.name": "absoluteTimeSpecFrom(date:)",
      "key.namecolumn": 28,
      "key.namelength": 37,
      "key.nameline": 71,
      "key.nameoffset": 2966,
      "key.offset": 2961,
      "key.substructure": [
        {
          "key.column": 9,
          "key.internal_diagnostic": "Unable to resolve cursor info.",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 48,
          "key.line": 72,
          "key.name": "ti",
          "key.namecolumn": 13,
          "key.namelength": 2,
          "key.nameline": 72,
          "key.nameoffset": 3028,
          "key.offset": 3024,
          "key.typename": "TimeInterval"
        }
      ],
      "key.typename" : "DWORD?"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func absoluteTimeSpecFrom(date when: <Type usr=\"s:10Foundation4DateV\">Date<\/Type>) -&gt; <Type usr=\"c:@S@timespec\">timespec<\/Type>?<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 16,
          "key.length": 6,
          "key.line": 77,
          "key.offset": 3184
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 5,
          "key.length": 10,
          "key.line": 77,
          "key.offset": 3173
        }
      ],
      "key.bodycolumn": 80,
      "key.bodylength": 304,
      "key.bodyline": 77,
      "key.bodyoffset": 3248,
      "key.column": 23,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>absoluteTimeSpecFrom<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>date<\/decl.var.parameter.argument_label> <decl.var.parameter.name>when<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Foundation4DateV\">Date<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"c:@S@timespec\">timespec<\/ref.struct>?<\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 362,
      "key.line": 77,
      "key.name": "absoluteTimeSpecFrom(date:)",
      "key.namecolumn": 28,
      "key.namelength": 37,
      "key.nameline": 77,
      "key.nameoffset": 3196,
      "key.offset": 3191,
      "key.parsed_declaration": "@inlinable public func absoluteTimeSpecFrom(date when: Date) -> timespec?",
      "key.parsed_scope.end": 82,
      "key.parsed_scope.start": 77,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>let timeInter: <Type usr=\"c:@T@NSTimeInterval\">TimeInterval<\/Type><\/Declaration>",
          "key.column": 9,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>timeInter<\/decl.name>: <decl.var.type><ref.typealias usr=\"c:@T@NSTimeInterval\">TimeInterval<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 56,
          "key.line": 79,
          "key.name": "timeInter",
          "key.namecolumn": 13,
          "key.namelength": 9,
          "key.nameline": 79,
          "key.nameoffset": 3325,
          "key.offset": 3321,
          "key.parsed_declaration": "let timeInter: TimeInterval = when.timeIntervalSince1970",
          "key.parsed_scope.end": 79,
          "key.parsed_scope.start": 79,
          "key.typename": "Double",
          "key.typeusr": "$sSdD",
          "key.usr": "s:7Rubicon20absoluteTimeSpecFrom4dateSo8timespecVSg10Foundation4DateV_tF9timeInterL_Sdvp"
        },
        {
          "key.annotated_decl": "<Declaration>let seconds: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
          "key.column": 9,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>seconds<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 60,
          "key.line": 80,
          "key.name": "seconds",
          "key.namecolumn": 13,
          "key.namelength": 7,
          "key.nameline": 80,
          "key.nameoffset": 3390,
          "key.offset": 3386,
          "key.parsed_declaration": "let seconds:   Double       = timeInter.rounded(.towardZero)",
          "key.parsed_scope.end": 80,
          "key.parsed_scope.start": 80,
          "key.typename": "Double",
          "key.typeusr": "$sSdD",
          "key.usr": "s:7Rubicon20absoluteTimeSpecFrom4dateSo8timespecVSg10Foundation4DateV_tF7secondsL_Sdvp"
        }
      ],
      "key.typename" : "(Date) -> timespec?",
      "key.typeusr" : "$s4dateSo8timespecVSg10Foundation4DateV_tcD",
      "key.usr" : "s:7Rubicon20absoluteTimeSpecFrom4dateSo8timespecVSg10Foundation4DateV_tF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func StrError(_ code: <Type usr=\"s:s5Int32V\">Int32<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 93,
          "key.offset": 4054
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 93,
          "key.offset": 4043
        }
      ],
      "key.bodycolumn": 59,
      "key.bodylength": 150,
      "key.bodyline": 93,
      "key.bodyoffset": 4101,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Cover function for the C standard library function `strerror(int)`. Returns a Swift\n<code>[String](https:\/\/developer.apple.com\/documentation\/swift\/string\/)<\/code>.\n\n- Parameter code: the OS error code.\n- Returns: A Swift <code>[String](https:\/\/developer.apple.com\/documentation\/swift\/string\/)<\/code> with the OS\n           error message.",
      "key.doc.declaration": "@inlinable public func StrError(_ code: Int32) -> String",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"93\" column=\"24\"><Name>StrError(_:)<\/Name><USR>s:7Rubicon8StrErrorySSs5Int32VF<\/USR><Declaration>@inlinable public func StrError(_ code: Int32) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Cover function for the C standard library function <codeVoice>strerror(int)<\/codeVoice>. Returns a Swift <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/string\/\">String<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Abstract><Parameters><Parameter><Name>code<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the OS error code.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A Swift <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/string\/\">String<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> with the OS error message.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 93,
      "key.doc.name": "StrError(_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "the OS error code."
            }
          ],
          "name": "code"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "A Swift <code><\/code> with the OS error message."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 366,
      "key.docline": 86,
      "key.docoffset": 3677,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>StrError<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>code<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 191,
      "key.line": 93,
      "key.name": "StrError(_:)",
      "key.namecolumn": 24,
      "key.namelength": 23,
      "key.nameline": 93,
      "key.nameoffset": 4066,
      "key.offset": 4061,
      "key.parsed_declaration": "@inlinable public func StrError(_ code: Int32) -> String",
      "key.parsed_scope.end": 97,
      "key.parsed_scope.start": 93,
      "key.substructure": [
      ],
      "key.typename": "(Int32) -> String",
      "key.typeusr": "$sySSs5Int32VcD",
      "key.usr": "s:7Rubicon8StrErrorySSs5Int32VF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@discardableResult @inlinable public func testOSFatalError(_ results: <Type usr=\"s:s5Int32V\">Int32<\/Type>, _ otherOk: <Type usr=\"s:s5Int32V\">Int32<\/Type>...) -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 31,
          "key.length": 6,
          "key.line": 124,
          "key.offset": 5850
        },
        {
          "key.attribute": "source.decl.attribute.discardableResult",
          "key.column": 12,
          "key.length": 18,
          "key.line": 124,
          "key.offset": 5831
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 124,
          "key.offset": 5820
        }
      ],
      "key.bodycolumn": 109,
      "key.bodylength": 149,
      "key.bodyline": 124,
      "key.bodyoffset": 5928,
      "key.column": 38,
      "key.doc.column": 43,
      "key.doc.comment": "Test the result of a C standard library function call to see if an error has occurred. If so then throw a\nfatal error with the message of the error. Usually any\nnon-<code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> value is considered an error. In some cases though a\nnon-<code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> error is just informational and in those cases you\ncan tell this function to ignore those as well.\n\nFor example, in a call to `pthread_mutex_trylock(...)`, an return code of `EBUSY` simply means that the lock\nis already held by another thread while a code of `EINVAL` means that the mutex passed to the function was not\nproperly initialized. So you could call this function like so:\n\n<pre>\n    let locked: Bool = (testOSFatalError(pthread_mutex_trylock(mutex), EBUSY) == 0)\n<\/pre>\n\nIn this case the constant `locked` will be `true` if the thread successfully obtained ownership of the lock or\n`false` if another thread still owns the lock. If the return code was any other value beside 0\n(<code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code>) or EBUSY then a fatal error occurs.\n\n- Parameters:\n  - results: The results of the call.\n  - otherOk: Other values besides 0 (<code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code>) that should be\n             considered OK and not cause a fatal error.\n- Returns: The value of results.",
      "key.doc.declaration": "@inlinable public func testOSFatalError(_ results: Int32, _ otherOk: Int32...) -> Int32",
      "key.doc.discussion": [
        {
          "Para": "For example, in a call to `pthread_mutex_trylock(...)`, an return code of `EBUSY` simply means that the lock is already held by another thread while a code of `EINVAL` means that the mutex passed to the function was not properly initialized. So you could call this function like so:"
        },
        {
          "Para": "In this case the constant `locked` will be `true` if the thread successfully obtained ownership of the lock or `false` if another thread still owns the lock. If the return code was any other value beside 0 (<code><\/code>) or EBUSY then a fatal error occurs."
        }
      ],
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"124\" column=\"43\"><Name>testOSFatalError(_:_:)<\/Name><USR>s:7Rubicon16testOSFatalErrorys5Int32VAD_ADdtF<\/USR><Declaration>@inlinable public func testOSFatalError(_ results: Int32, _ otherOk: Int32...) -&gt; Int32<\/Declaration><CommentParts><Abstract><Para>Test the result of a C standard library function call to see if an error has occurred. If so then throw a fatal error with the message of the error. Usually any non-<rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> value is considered an error. In some cases though a non-<rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> error is just informational and in those cases you can tell this function to ignore those as well.<\/Para><\/Abstract><Parameters><Parameter><Name>results<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The results of the call.<\/Para><\/Discussion><\/Parameter><Parameter><Name>otherOk<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Other values besides 0 (<rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>) that should be considered OK and not cause a fatal error.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The value of results.<\/Para><\/ResultDiscussion><Discussion><Para>For example, in a call to <codeVoice>pthread_mutex_trylock(...)<\/codeVoice>, an return code of <codeVoice>EBUSY<\/codeVoice> simply means that the lock is already held by another thread while a code of <codeVoice>EINVAL<\/codeVoice> means that the mutex passed to the function was not properly initialized. So you could call this function like so:<\/Para><rawHTML><![CDATA[<pre>\n    let locked: Bool = (testOSFatalError(pthread_mutex_trylock(mutex), EBUSY) == 0)\n<\/pre>\n]]><\/rawHTML><Para>In this case the constant <codeVoice>locked<\/codeVoice> will be <codeVoice>true<\/codeVoice> if the thread successfully obtained ownership of the lock or <codeVoice>false<\/codeVoice> if another thread still owns the lock. If the return code was any other value beside 0 (<rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>) or EBUSY then a fatal error occurs.<\/Para><\/Discussion><\/CommentParts><\/Function>",
      "key.doc.line": 124,
      "key.doc.name": "testOSFatalError(_:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The results of the call."
            }
          ],
          "name": "results"
        },
        {
          "discussion" : [
            {
              "Para" : "Other values besides 0 (<code><\/code>) that should be considered OK and not cause a fatal error."
            }
          ],
          "name": "otherOk"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The value of results."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 1451,
      "key.docline": 100,
      "key.docoffset": 4369,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@discardableResult<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>testOSFatalError<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>results<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>otherOk<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.var.parameter.type>...<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 221,
      "key.line": 124,
      "key.name": "testOSFatalError(_:_:)",
      "key.namecolumn": 43,
      "key.namelength": 55,
      "key.nameline": 124,
      "key.nameoffset": 5862,
      "key.offset": 5857,
      "key.parsed_declaration": "@inlinable @discardableResult public func testOSFatalError(_ results: Int32, _ otherOk: Int32...) -> Int32",
      "key.parsed_scope.end": 128,
      "key.parsed_scope.start": 124,
      "key.substructure": [
      ],
      "key.typename": "(Int32, Int32...) -> Int32",
      "key.typeusr": "$sys5Int32VAB_ABdtcD",
      "key.usr": "s:7Rubicon16testOSFatalErrorys5Int32VAD_ADdtF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func cStrLen(cStringPtr: <Type usr=\"s:SP\">UnsafePointer<\/Type>&lt;<Type usr=\"s:s4Int8V\">Int8<\/Type>&gt;, length: <Type usr=\"s:Si\">Int<\/Type> = -1) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 140,
          "key.offset": 6664
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 140,
          "key.offset": 6653
        }
      ],
      "key.bodycolumn": 91,
      "key.bodylength": 157,
      "key.bodyline": 140,
      "key.bodyoffset": 6743,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Get the length of a `nil`-terminated C string of type 'signed char' (Int8).\n\n- Parameters:\n  - cStringPtr: The C string.\n  - length: The maximum possible length of the string. If less than\n            <code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> (the default) then there is no maximum. This\n            is dangerous - only use this is you are sure there is a `nil`-terminator.\n- Returns: The length of the string.",
      "key.doc.declaration": "@inlinable public func cStrLen(cStringPtr: UnsafePointer<Int8>, length: Int = -1) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"140\" column=\"24\"><Name>cStrLen(cStringPtr:length:)<\/Name><USR>s:7Rubicon7cStrLen10cStringPtr6lengthSiSPys4Int8VG_SitF<\/USR><Declaration>@inlinable public func cStrLen(cStringPtr: UnsafePointer&lt;Int8&gt;, length: Int = -1) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Get the length of a <codeVoice>nil<\/codeVoice>-terminated C string of type ‘signed char’ (Int8).<\/Para><\/Abstract><Parameters><Parameter><Name>cStringPtr<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The C string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>length<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The maximum possible length of the string. If less than <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (the default) then there is no maximum. This is dangerous - only use this is you are sure there is a <codeVoice>nil<\/codeVoice>-terminator.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The length of the string.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 140,
      "key.doc.name": "cStrLen(cStringPtr:length:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The C string."
            }
          ],
          "name": "cStringPtr"
        },
        {
          "discussion" : [
            {
              "Para" : "The maximum possible length of the string. If less than <code><\/code> (the default) then there is no maximum. This is dangerous - only use this is you are sure there is a `nil`-terminator."
            }
          ],
          "name": "length"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The length of the string."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 458,
      "key.docline": 131,
      "key.docoffset": 6195,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>cStrLen<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cStringPtr<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SP\">UnsafePointer<\/ref.struct>&lt;<ref.struct usr=\"s:s4Int8V\">Int8<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>length<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = -1<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 230,
      "key.line": 140,
      "key.name": "cStrLen(cStringPtr:length:)",
      "key.namecolumn": 24,
      "key.namelength": 58,
      "key.nameline": 140,
      "key.nameoffset": 6676,
      "key.offset": 6671,
      "key.parsed_declaration": "@inlinable public func cStrLen(cStringPtr: UnsafePointer<Int8>, length: Int = -1) -> Int",
      "key.parsed_scope.end": 144,
      "key.parsed_scope.start": 140,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7cStrLen10cStringPtr6lengthSiSPys5UInt8VG_SitF\">cStrLen(cStringPtr: ByteROPointer, length: Int = -1) -&gt; Int<\/RelatedName>"
        }
      ],
      "key.substructure": [
      ],
      "key.typename": "(UnsafePointer<Int8>, Int) -> Int",
      "key.typeusr": "$s10cStringPtr6lengthSiSPys4Int8VG_SitcD",
      "key.usr" : "s:7Rubicon7cStrLen10cStringPtr6lengthSiSPys4Int8VG_SitF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func cStrLen(cStringPtr: <Type usr=\"s:7Rubicon13ByteROPointera\">ByteROPointer<\/Type>, length: <Type usr=\"s:Si\">Int<\/Type> = -1) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 156,
          "key.offset": 7490
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 156,
          "key.offset": 7479
        }
      ],
      "key.bodycolumn": 85,
      "key.bodylength": 123,
      "key.bodyline": 156,
      "key.bodyoffset": 7563,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Get the length of a `nil`-terminated C string of type 'unsigned char' (UInt8).\n\n- Parameters:\n  - cStringPtr: The C string.\n  - length: The maximum possible length of the string. If less than\n            <code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> (the default) then there is no maximum. This\n            is dangerous - only use this is you are sure there is a `nil`-terminator.\n- Returns: The length of the string.",
      "key.doc.declaration": "@inlinable public func cStrLen(cStringPtr: ByteROPointer, length: Int = -1) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"156\" column=\"24\"><Name>cStrLen(cStringPtr:length:)<\/Name><USR>s:7Rubicon7cStrLen10cStringPtr6lengthSiSPys5UInt8VG_SitF<\/USR><Declaration>@inlinable public func cStrLen(cStringPtr: ByteROPointer, length: Int = -1) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Get the length of a <codeVoice>nil<\/codeVoice>-terminated C string of type ‘unsigned char’ (UInt8).<\/Para><\/Abstract><Parameters><Parameter><Name>cStringPtr<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The C string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>length<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The maximum possible length of the string. If less than <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (the default) then there is no maximum. This is dangerous - only use this is you are sure there is a <codeVoice>nil<\/codeVoice>-terminator.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The length of the string.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 156,
      "key.doc.name": "cStrLen(cStringPtr:length:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The C string."
            }
          ],
          "name": "cStringPtr"
        },
        {
          "discussion" : [
            {
              "Para" : "The maximum possible length of the string. If less than <code><\/code> (the default) then there is no maximum. This is dangerous - only use this is you are sure there is a `nil`-terminator."
            }
          ],
          "name": "length"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The length of the string."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 461,
      "key.docline": 147,
      "key.docoffset": 7018,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>cStrLen<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cStringPtr<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon13ByteROPointera\">ByteROPointer<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>length<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = -1<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 190,
      "key.line": 156,
      "key.name": "cStrLen(cStringPtr:length:)",
      "key.namecolumn": 24,
      "key.namelength": 52,
      "key.nameline": 156,
      "key.nameoffset": 7502,
      "key.offset": 7497,
      "key.parsed_declaration": "@inlinable public func cStrLen(cStringPtr: ByteROPointer, length: Int = -1) -> Int",
      "key.parsed_scope.end": 158,
      "key.parsed_scope.start": 156,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7cStrLen10cStringPtr6lengthSiSPys4Int8VG_SitF\">cStrLen(cStringPtr: UnsafePointer&lt;Int8&gt;, length: Int = -1) -&gt; Int<\/RelatedName>"
        }
      ],
      "key.substructure": [
      ],
      "key.typename": "(UnsafePointer<UInt8>, Int) -> Int",
      "key.typeusr": "$s10cStringPtr6lengthSiSPys5UInt8VG_SitcD",
      "key.usr" : "s:7Rubicon7cStrLen10cStringPtr6lengthSiSPys5UInt8VG_SitF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func NanoSleep(seconds: <Type usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/Type> = 0, nanos: <Type usr=\"s:Si\">Int<\/Type> = 0) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 173,
          "key.offset": 8608
        }
      ],
      "key.bodycolumn": 69,
      "key.bodylength": 317,
      "key.bodyline": 173,
      "key.bodyoffset": 8676,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "The `NanoSleep(seconds:nanos:)` function causes the calling thread to sleep for the amount of time specified\nin the `seconds` and `nanos` parameters (the actual time slept may be longer, due to system latencies and\npossible limitations in the timer resolution of the hardware). An unmasked signal will cause\n`NanoSleep(seconds:nanos:)` to terminate the sleep early, regardless of the `SA_RESTART` value on the\ninterrupting signal.\n\n- Parameters:\n  - seconds: The number of seconds to sleep.\n  - nanos: The number of additional nanoseconds to sleep.\n- Throws: `CErrors.EINTER(description:)` if `NanoSleep(seconds:nanos:)` was interrupted by an unmasked signal.\n- Throws: `CErrors.EINVAL(description:)` if `nanos` was greater than or equal to 1,000,000,000.",
      "key.doc.declaration": "public func NanoSleep(seconds: PGTimeT = 0, nanos: Int = 0) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"173\" column=\"13\"><Name>NanoSleep(seconds:nanos:)<\/Name><USR>s:7Rubicon9NanoSleep7seconds5nanosS2i_SitF<\/USR><Declaration>public func NanoSleep(seconds: PGTimeT = 0, nanos: Int = 0) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>The <codeVoice>NanoSleep(seconds:nanos:)<\/codeVoice> function causes the calling thread to sleep for the amount of time specified in the <codeVoice>seconds<\/codeVoice> and <codeVoice>nanos<\/codeVoice> parameters (the actual time slept may be longer, due to system latencies and possible limitations in the timer resolution of the hardware). An unmasked signal will cause <codeVoice>NanoSleep(seconds:nanos:)<\/codeVoice> to terminate the sleep early, regardless of the <codeVoice>SA_RESTART<\/codeVoice> value on the interrupting signal.<\/Para><\/Abstract><Parameters><Parameter><Name>seconds<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of seconds to sleep.<\/Para><\/Discussion><\/Parameter><Parameter><Name>nanos<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of additional nanoseconds to sleep.<\/Para><\/Discussion><\/Parameter><\/Parameters><ThrowsDiscussion><Para><codeVoice>CErrors.EINVAL(description:)<\/codeVoice> if <codeVoice>nanos<\/codeVoice> was greater than or equal to 1,000,000,000.<\/Para><\/ThrowsDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 173,
      "key.doc.name": "NanoSleep(seconds:nanos:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The number of seconds to sleep."
            }
          ],
          "name": "seconds"
        },
        {
          "discussion": [
            {
              "Para": "The number of additional nanoseconds to sleep."
            }
          ],
          "name": "nanos"
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 804,
      "key.docline": 161,
      "key.docoffset": 7804,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>NanoSleep<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>seconds<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/ref.typealias><\/decl.var.parameter.type> = 0<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>nanos<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = 0<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 379,
      "key.line": 173,
      "key.name": "NanoSleep(seconds:nanos:)",
      "key.namecolumn": 13,
      "key.namelength": 47,
      "key.nameline": 173,
      "key.nameoffset": 8620,
      "key.offset": 8615,
      "key.parsed_declaration": "public func NanoSleep(seconds: PGTimeT = 0, nanos: Int = 0) -> Int",
      "key.parsed_scope.end": 179,
      "key.parsed_scope.start": 173,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>var t1: <Type usr=\"c:@S@timespec\">timespec<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>t1<\/decl.name>: <decl.var.type><ref.struct usr=\"c:@S@timespec\">timespec<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 50,
          "key.line": 175,
          "key.name": "t1",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 175,
          "key.nameoffset": 8793,
          "key.offset": 8789,
          "key.parsed_declaration": "var t1 = timespec(tv_sec: seconds, tv_nsec: nanos)",
          "key.parsed_scope.end": 175,
          "key.parsed_scope.start": 175,
          "key.typename": "timespec",
          "key.typeusr": "$sSo8timespecVD",
          "key.usr": "s:7Rubicon9NanoSleep7seconds5nanosS2i_SitF2t1L_So8timespecVvp"
        },
        {
          "key.annotated_decl": "<Declaration>var t2: <Type usr=\"c:@S@timespec\">timespec<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>t2<\/decl.name>: <decl.var.type><ref.struct usr=\"c:@S@timespec\">timespec<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 40,
          "key.line": 176,
          "key.name": "t2",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 176,
          "key.nameoffset": 8848,
          "key.offset": 8844,
          "key.parsed_declaration": "var t2 = timespec(tv_sec: 0, tv_nsec: 0)",
          "key.parsed_scope.end": 176,
          "key.parsed_scope.start": 176,
          "key.typename": "timespec",
          "key.typeusr": "$sSo8timespecVD",
          "key.usr": "s:7Rubicon9NanoSleep7seconds5nanosS2i_SitF2t2L_So8timespecVvp"
        }
      ],
      "key.typename" : "(Int, Int) -> Int",
      "key.typeusr" : "$s7seconds5nanosS2i_SitcD",
      "key.usr" : "s:7Rubicon9NanoSleep7seconds5nanosS2i_SitF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func NanoSleep2(seconds: <Type usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/Type> = 0, nanos: <Type usr=\"s:Si\">Int<\/Type> = 0)<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 192,
          "key.offset": 9700
        }
      ],
      "key.bodycolumn": 63,
      "key.bodylength": 423,
      "key.bodyline": 192,
      "key.bodyoffset": 9762,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "The `NanoSleep(seconds:nanos:)` function causes the calling thread to sleep for the amount of time specified\nin the `seconds` and `nanos` parameters (the actual time slept may be longer, due to system latencies and\npossible limitations in the timer resolution of the hardware). An unmasked signal will cause\n`NanoSleep(seconds:nanos:)` to terminate the sleep early, regardless of the `SA_RESTART` value on the\ninterrupting signal.\n\n- Parameters:\n  - seconds: The number of seconds to sleep.\n  - nanos: The number of additional nanoseconds to sleep.",
      "key.doc.declaration": "public func NanoSleep2(seconds: PGTimeT = 0, nanos: Int = 0)",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"192\" column=\"13\"><Name>NanoSleep2(seconds:nanos:)<\/Name><USR>s:7Rubicon10NanoSleep27seconds5nanosySi_SitF<\/USR><Declaration>public func NanoSleep2(seconds: PGTimeT = 0, nanos: Int = 0)<\/Declaration><CommentParts><Abstract><Para>The <codeVoice>NanoSleep(seconds:nanos:)<\/codeVoice> function causes the calling thread to sleep for the amount of time specified in the <codeVoice>seconds<\/codeVoice> and <codeVoice>nanos<\/codeVoice> parameters (the actual time slept may be longer, due to system latencies and possible limitations in the timer resolution of the hardware). An unmasked signal will cause <codeVoice>NanoSleep(seconds:nanos:)<\/codeVoice> to terminate the sleep early, regardless of the <codeVoice>SA_RESTART<\/codeVoice> value on the interrupting signal.<\/Para><\/Abstract><Parameters><Parameter><Name>seconds<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of seconds to sleep.<\/Para><\/Discussion><\/Parameter><Parameter><Name>nanos<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of additional nanoseconds to sleep.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
      "key.doc.line": 192,
      "key.doc.name": "NanoSleep2(seconds:nanos:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The number of seconds to sleep."
            }
          ],
          "name": "seconds"
        },
        {
          "discussion": [
            {
              "Para": "The number of additional nanoseconds to sleep."
            }
          ],
          "name": "nanos"
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 589,
      "key.docline": 182,
      "key.docoffset": 9111,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>NanoSleep2<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>seconds<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon7PGTimeTa\">PGTimeT<\/ref.typealias><\/decl.var.parameter.type> = 0<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>nanos<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = 0<\/decl.var.parameter>)<\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 479,
      "key.line": 192,
      "key.name": "NanoSleep2(seconds:nanos:)",
      "key.namecolumn": 13,
      "key.namelength": 48,
      "key.nameline": 192,
      "key.nameoffset": 9712,
      "key.offset": 9707,
      "key.parsed_declaration": "public func NanoSleep2(seconds: PGTimeT = 0, nanos: Int = 0)",
      "key.parsed_scope.end": 204,
      "key.parsed_scope.start": 192,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>var t1: <Type usr=\"c:@S@timespec\">timespec<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>t1<\/decl.name>: <decl.var.type><ref.struct usr=\"c:@S@timespec\">timespec<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 50,
          "key.line": 194,
          "key.name": "t1",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 194,
          "key.nameoffset": 9879,
          "key.offset": 9875,
          "key.parsed_declaration": "var t1 = timespec(tv_sec: seconds, tv_nsec: nanos)",
          "key.parsed_scope.end": 194,
          "key.parsed_scope.start": 194,
          "key.typename": "timespec",
          "key.typeusr": "$sSo8timespecVD",
          "key.usr": "s:7Rubicon10NanoSleep27seconds5nanosySi_SitF2t1L_So8timespecVvp"
        },
        {
          "key.annotated_decl": "<Declaration>var t2: <Type usr=\"c:@S@timespec\">timespec<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>t2<\/decl.name>: <decl.var.type><ref.struct usr=\"c:@S@timespec\">timespec<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 40,
          "key.line": 195,
          "key.name": "t2",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 195,
          "key.nameoffset": 9934,
          "key.offset": 9930,
          "key.parsed_declaration": "var t2 = timespec(tv_sec: 0, tv_nsec: 0)",
          "key.parsed_scope.end": 195,
          "key.parsed_scope.start": 195,
          "key.typename": "timespec",
          "key.typeusr": "$sSo8timespecVD",
          "key.usr": "s:7Rubicon10NanoSleep27seconds5nanosySi_SitF2t2L_So8timespecVvp"
        }
      ],
      "key.typename" : "(Int, Int) -> ()",
      "key.typeusr" : "$s7seconds5nanosySi_SitcD",
      "key.usr" : "s:7Rubicon10NanoSleep27seconds5nanosySi_SitF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public enum SortOrdering : <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 209,
          "key.offset": 10373
        }
      ],
      "key.bodycolumn": 32,
      "key.bodylength": 600,
      "key.bodyline": 209,
      "key.bodyoffset": 10404,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Values that indicate should be sorted against another object.",
      "key.doc.declaration": "public enum SortOrdering : Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"209\" column=\"13\"><Name>SortOrdering<\/Name><USR>s:7Rubicon12SortOrderingO<\/USR><Declaration>public enum SortOrdering : Int<\/Declaration><CommentParts><Abstract><Para>Values that indicate should be sorted against another object.<\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line": 209,
      "key.doc.name": "SortOrdering",
      "key.doc.type": "Other",
      "key.doccolumn": 1,
      "key.doclength": 70,
      "key.docline": 207,
      "key.docoffset": 10303,
      "key.elements": [
        {
          "key.column": 27,
          "key.kind": "source.lang.swift.structure.elem.typeref",
          "key.length": 3,
          "key.line": 209,
          "key.offset": 10399
        }
      ],
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>SortOrdering<\/decl.name> : <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.enum>",
      "key.inheritedtypes": [
        {
          "key.name": "Int"
        }
      ],
      "key.kind": "source.lang.swift.decl.enum",
      "key.length": 625,
      "key.line": 209,
      "key.name": "SortOrdering",
      "key.namecolumn": 13,
      "key.namelength": 12,
      "key.nameline": 209,
      "key.nameoffset": 10385,
      "key.offset": 10380,
      "key.parsed_declaration": "public enum SortOrdering: Int",
      "key.parsed_scope.end": 222,
      "key.parsed_scope.start": 209,
      "key.substructure": [
        {
          "key.column": 5,
          "key.kind": "source.lang.swift.decl.enumcase",
          "key.length": 21,
          "key.line": 213,
          "key.namelength": 0,
          "key.nameoffset": 0,
          "key.offset": 10580,
          "key.substructure": [
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>case LessThan = -1<\/Declaration>",
              "key.column": 10,
              "key.doc.column": 10,
              "key.doc.comment": "One object comes before another object.",
              "key.doc.declaration": "",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"213\" column=\"10\"><Name>LessThan<\/Name><USR>s:7Rubicon12SortOrderingO8LessThanyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>One object comes before another object.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 213,
              "key.doc.name": "LessThan",
              "key.doc.type": "Other",
              "key.doccolumn": 5,
              "key.doclength": 52,
              "key.docline": 211,
              "key.docoffset": 10524,
              "key.elements": [
                {
                  "key.column": 24,
                  "key.kind": "source.lang.swift.structure.elem.init_expr",
                  "key.length": 2,
                  "key.line": 213,
                  "key.offset": 10599
                }
              ],
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
              "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>LessThan<\/decl.name> = <syntaxtype.number>-1<\/syntaxtype.number><\/decl.enumelement>",
              "key.kind": "source.lang.swift.decl.enumelement",
              "key.length": 16,
              "key.line": 213,
              "key.name": "LessThan",
              "key.namecolumn": 10,
              "key.namelength": 8,
              "key.nameline": 213,
              "key.nameoffset": 10585,
              "key.offset": 10585,
              "key.parsed_declaration": "case LessThan    = -1",
              "key.parsed_scope.end": 213,
              "key.parsed_scope.start": 213,
              "key.typename": "(SortOrdering.Type) -> SortOrdering",
              "key.typeusr": "$sy7Rubicon12SortOrderingOACmcD",
              "key.usr": "s:7Rubicon12SortOrderingO8LessThanyA2CmF"
            }
          ]
        },
        {
          "key.column": 5,
          "key.kind": "source.lang.swift.decl.enumcase",
          "key.length": 20,
          "key.line": 217,
          "key.namelength": 0,
          "key.nameoffset": 0,
          "key.offset": 10788,
          "key.substructure": [
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>case EqualTo = 0<\/Declaration>",
              "key.column": 10,
              "key.doc.column": 10,
              "key.doc.comment": "One object holds the same place as another object.",
              "key.doc.declaration": "",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"217\" column=\"10\"><Name>EqualTo<\/Name><USR>s:7Rubicon12SortOrderingO7EqualToyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>One object holds the same place as another object.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 217,
              "key.doc.name": "EqualTo",
              "key.doc.type": "Other",
              "key.doccolumn": 5,
              "key.doclength": 63,
              "key.docline": 215,
              "key.docoffset": 10721,
              "key.elements": [
                {
                  "key.column": 24,
                  "key.kind": "source.lang.swift.structure.elem.init_expr",
                  "key.length": 1,
                  "key.line": 217,
                  "key.offset": 10807
                }
              ],
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
              "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>EqualTo<\/decl.name> = <syntaxtype.number>0<\/syntaxtype.number><\/decl.enumelement>",
              "key.kind": "source.lang.swift.decl.enumelement",
              "key.length": 15,
              "key.line": 217,
              "key.name": "EqualTo",
              "key.namecolumn": 10,
              "key.namelength": 7,
              "key.nameline": 217,
              "key.nameoffset": 10793,
              "key.offset": 10793,
              "key.parsed_declaration": "case EqualTo     = 0",
              "key.parsed_scope.end": 217,
              "key.parsed_scope.start": 217,
              "key.typename": "(SortOrdering.Type) -> SortOrdering",
              "key.typeusr": "$sy7Rubicon12SortOrderingOACmcD",
              "key.usr": "s:7Rubicon12SortOrderingO7EqualToyA2CmF"
            }
          ]
        },
        {
          "key.column": 5,
          "key.kind": "source.lang.swift.decl.enumcase",
          "key.length": 20,
          "key.line": 221,
          "key.namelength": 0,
          "key.nameoffset": 0,
          "key.offset": 10983,
          "key.substructure": [
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>case GreaterThan = 1<\/Declaration>",
              "key.column": 10,
              "key.doc.column": 10,
              "key.doc.comment": "One object comes after another object.",
              "key.doc.declaration": "",
              "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
              "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"221\" column=\"10\"><Name>GreaterThan<\/Name><USR>s:7Rubicon12SortOrderingO11GreaterThanyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>One object comes after another object.<\/Para><\/Abstract><\/CommentParts><\/Other>",
              "key.doc.line": 221,
              "key.doc.name": "GreaterThan",
              "key.doc.type": "Other",
              "key.doccolumn": 5,
              "key.doclength": 51,
              "key.docline": 219,
              "key.docoffset": 10928,
              "key.elements": [
                {
                  "key.column": 24,
                  "key.kind": "source.lang.swift.structure.elem.init_expr",
                  "key.length": 1,
                  "key.line": 221,
                  "key.offset": 11002
                }
              ],
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
              "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>GreaterThan<\/decl.name> = <syntaxtype.number>1<\/syntaxtype.number><\/decl.enumelement>",
              "key.kind": "source.lang.swift.decl.enumelement",
              "key.length": 15,
              "key.line": 221,
              "key.name": "GreaterThan",
              "key.namecolumn": 10,
              "key.namelength": 11,
              "key.nameline": 221,
              "key.nameoffset": 10988,
              "key.offset": 10988,
              "key.parsed_declaration": "case GreaterThan = 1",
              "key.parsed_scope.end": 221,
              "key.parsed_scope.start": 221,
              "key.typename": "(SortOrdering.Type) -> SortOrdering",
              "key.typeusr": "$sy7Rubicon12SortOrderingOACmcD",
              "key.usr": "s:7Rubicon12SortOrderingO11GreaterThanyA2CmF"
            }
          ]
        }
      ],
      "key.typename" : "SortOrdering.Type",
      "key.typeusr" : "$s7Rubicon12SortOrderingOmD",
      "key.usr" : "s:7Rubicon12SortOrderingO"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func &lt;+ &lt;T&gt;(lhs: inout [<Type usr=\"s:7Rubicon2lpoiyySayxGz_xtlF1TL_xmfp\">T<\/Type>], rhs: <Type usr=\"s:7Rubicon2lpoiyySayxGz_xtlF1TL_xmfp\">T<\/Type>)<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 247,
          "key.offset": 12275
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 247,
          "key.offset": 12264
        }
      ],
      "key.bodycolumn": 56,
      "key.bodylength": 17,
      "key.bodyline": 247,
      "key.bodyoffset": 12319,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Append a new element to an <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>.\n\n- Parameters:\n  - lhs: The <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>\n  - rhs: The new element",
      "key.doc.declaration": "@inlinable public func <+ <T>(lhs: inout [T], rhs: T)",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"247\" column=\"24\"><Name>&lt;+(_:_:)<\/Name><USR>s:7Rubicon2lpoiyySayxGz_xtlF<\/USR><Declaration>@inlinable public func &lt;+ &lt;T&gt;(lhs: inout [T], rhs: T)<\/Declaration><CommentParts><Abstract><Para>Append a new element to an <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Abstract><Parameters><Parameter><Name>lhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML><\/Para><\/Discussion><\/Parameter><Parameter><Name>rhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The new element<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
      "key.doc.line": 247,
      "key.doc.name": "<+(_:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The <code><\/code>"
            }
          ],
          "name": "lhs"
        },
        {
          "discussion": [
            {
              "Para": "The new element"
            }
          ],
          "name": "rhs"
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 259,
      "key.docline": 241,
      "key.docoffset": 12005,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;+ <\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon2lpoiyySayxGz_xtlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> [<ref.generic_type_param usr=\"s:7Rubicon2lpoiyySayxGz_xtlF1TL_xmfp\">T<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon2lpoiyySayxGz_xtlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 55,
      "key.line": 247,
      "key.name": "<+(_:_:)",
      "key.namecolumn": 24,
      "key.namelength": 30,
      "key.nameline": 247,
      "key.nameoffset": 12287,
      "key.offset": 12282,
      "key.parsed_declaration": "@inlinable public func <+ <T>(lhs: inout [T], rhs: T)",
      "key.parsed_scope.end": 247,
      "key.parsed_scope.start": 247,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon2lpoiyySayxGz_ACtlF\">&lt;+ &lt;T&gt;(_: inout [T], _: [T])<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC2lpoiyyACyxq_G_x3key_q_5valuettFZ\">&lt;+ (_: BinaryTreeDictionary&lt;Key, Value&gt;, _: (key: Key, value: Value))<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC2lpoiyyACyxq_G_SDyxq_GtFZ\">&lt;+ (_: BinaryTreeDictionary&lt;Key, Value&gt;, _: [Key : Value])<\/RelatedName>"
        }
      ],
      "key.substructure" : [
        {
          "key.annotated_decl": "<Declaration>T<\/Declaration>",
          "key.column": 28,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 1,
          "key.line": 247,
          "key.name": "T",
          "key.namecolumn": 28,
          "key.namelength": 1,
          "key.nameline": 247,
          "key.nameoffset": 12291,
          "key.offset": 12291,
          "key.parsed_declaration": "@inlinable public func <+ <T",
          "key.parsed_scope.end": 247,
          "key.parsed_scope.start": 247,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon2lpoiyySayxGz_xtlF1TL_xmfp"
        }
      ],
      "key.typename" : "<T> (inout [T], T) -> ()",
      "key.typeusr" : "$syySayxGz_xtcluD",
      "key.usr" : "s:7Rubicon2lpoiyySayxGz_xtlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func &lt;+ &lt;T&gt;(lhs: inout [<Type usr=\"s:7Rubicon2lpoiyySayxGz_ACtlF1TL_xmfp\">T<\/Type>], rhs: [<Type usr=\"s:7Rubicon2lpoiyySayxGz_ACtlF1TL_xmfp\">T<\/Type>])<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 258,
          "key.offset": 12935
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 258,
          "key.offset": 12924
        }
      ],
      "key.bodycolumn": 58,
      "key.bodylength": 29,
      "key.bodyline": 258,
      "key.bodyoffset": 12981,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Append the contents of the right-hand\n<code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code> oprand to the left-hand\n<code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code> oprand.\n\n- Parameters:\n  - lhs: The receiving <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>.\n  - rhs: The source <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>.",
      "key.doc.declaration": "@inlinable public func <+ <T>(lhs: inout [T], rhs: [T])",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"258\" column=\"24\"><Name>&lt;+(_:_:)<\/Name><USR>s:7Rubicon2lpoiyySayxGz_ACtlF<\/USR><Declaration>@inlinable public func &lt;+ &lt;T&gt;(lhs: inout [T], rhs: [T])<\/Declaration><CommentParts><Abstract><Para>Append the contents of the right-hand <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> oprand to the left-hand <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> oprand.<\/Para><\/Abstract><Parameters><Parameter><Name>lhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The receiving <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Discussion><\/Parameter><Parameter><Name>rhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The source <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
      "key.doc.line": 258,
      "key.doc.name": "<+(_:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The receiving <code><\/code>."
            }
          ],
          "name": "lhs"
        },
        {
          "discussion": [
            {
              "Para": "The source <code><\/code>."
            }
          ],
          "name": "rhs"
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 470,
      "key.docline": 250,
      "key.docoffset": 12454,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;+ <\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon2lpoiyySayxGz_ACtlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> [<ref.generic_type_param usr=\"s:7Rubicon2lpoiyySayxGz_ACtlF1TL_xmfp\">T<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon2lpoiyySayxGz_ACtlF1TL_xmfp\">T<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 69,
      "key.line": 258,
      "key.name": "<+(_:_:)",
      "key.namecolumn": 24,
      "key.namelength": 32,
      "key.nameline": 258,
      "key.nameoffset": 12947,
      "key.offset": 12942,
      "key.parsed_declaration": "@inlinable public func <+ <T>(lhs: inout [T], rhs: [T])",
      "key.parsed_scope.end": 258,
      "key.parsed_scope.start": 258,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon2lpoiyySayxGz_xtlF\">&lt;+ &lt;T&gt;(_: inout [T], _: T)<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC2lpoiyyACyxq_G_x3key_q_5valuettFZ\">&lt;+ (_: BinaryTreeDictionary&lt;Key, Value&gt;, _: (key: Key, value: Value))<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC2lpoiyyACyxq_G_SDyxq_GtFZ\">&lt;+ (_: BinaryTreeDictionary&lt;Key, Value&gt;, _: [Key : Value])<\/RelatedName>"
        }
      ],
      "key.substructure" : [
        {
          "key.annotated_decl": "<Declaration>T<\/Declaration>",
          "key.column": 28,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 1,
          "key.line": 258,
          "key.name": "T",
          "key.namecolumn": 28,
          "key.namelength": 1,
          "key.nameline": 258,
          "key.nameoffset": 12951,
          "key.offset": 12951,
          "key.parsed_declaration": "@inlinable public func <+ <T",
          "key.parsed_scope.end": 258,
          "key.parsed_scope.start": 258,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon2lpoiyySayxGz_ACtlF1TL_xmfp"
        }
      ],
      "key.typename" : "<T> (inout [T], [T]) -> ()",
      "key.typeusr" : "$syySayxGz_AAtcluD",
      "key.usr" : "s:7Rubicon2lpoiyySayxGz_ACtlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func &lt;? &lt;T&gt;(lhs: [<Type usr=\"s:7Rubicon2lqoiySbSayxG_xtSQRzlF1TL_xmfp\">T<\/Type>], rhs: <Type usr=\"s:7Rubicon2lqoiySbSayxG_xtSQRzlF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type> where <Type usr=\"s:7Rubicon2lqoiySbSayxG_xtSQRzlF1TL_xmfp\">T<\/Type> : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 271,
          "key.offset": 13698
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 271,
          "key.offset": 13687
        }
      ],
      "key.bodycolumn": 69,
      "key.bodylength": 41,
      "key.bodyline": 271,
      "key.bodyoffset": 13755,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Checks to see if the <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code> (left-hand\noperand) contains the right-hand operand.\n\n- Parameters:\n  - lhs: The <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>.\n  - rhs: The object to search for in the\n         <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>.\n- Returns: `true` if the <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code> contains\n           the object.",
      "key.doc.declaration": "@inlinable public func <? <T>(lhs: [T], rhs: T) -> Bool where T : Equatable",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"271\" column=\"24\"><Name>&lt;?(_:_:)<\/Name><USR>s:7Rubicon2lqoiySbSayxG_xtSQRzlF<\/USR><Declaration>@inlinable public func &lt;? &lt;T&gt;(lhs: [T], rhs: T) -&gt; Bool where T : Equatable<\/Declaration><CommentParts><Abstract><Para>Checks to see if the <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (left-hand operand) contains the right-hand operand.<\/Para><\/Abstract><Parameters><Parameter><Name>lhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Discussion><\/Parameter><Parameter><Name>rhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The object to search for in the <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if the <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> contains the object.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 271,
      "key.doc.name": "<?(_:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The <code><\/code>."
            }
          ],
          "name": "lhs"
        },
        {
          "discussion" : [
            {
              "Para" : "The object to search for in the <code><\/code>."
            }
          ],
          "name": "rhs"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "`true` if the <code><\/code> contains the object."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 559,
      "key.docline": 261,
      "key.docoffset": 13128,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;? <\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon2lqoiySbSayxG_xtSQRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon2lqoiySbSayxG_xtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon2lqoiySbSayxG_xtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon2lqoiySbSayxG_xtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 92,
      "key.line": 271,
      "key.name": "<?(_:_:)",
      "key.namecolumn": 24,
      "key.namelength": 35,
      "key.nameline": 271,
      "key.nameoffset": 13710,
      "key.offset": 13705,
      "key.parsed_declaration": "@inlinable public func <? <T: Equatable>(lhs: [T], rhs: T) -> Bool",
      "key.parsed_scope.end": 271,
      "key.parsed_scope.start": 271,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon2lqoiySbSayxG_ACtSQRzlF\">&lt;? &lt;T&gt;(_: [T], _: [T]) -&gt; Bool where T : Equatable<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
          "key.column": 28,
          "key.elements": [
            {
              "key.column": 31,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 9,
              "key.line": 271,
              "key.offset": 13717
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
          "key.inheritedtypes": [
            {
              "key.name": "Equatable"
            }
          ],
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 12,
          "key.line": 271,
          "key.name": "T",
          "key.namecolumn": 28,
          "key.namelength": 1,
          "key.nameline": 271,
          "key.nameoffset": 13714,
          "key.offset": 13714,
          "key.parsed_declaration": "@inlinable public func <? <T: Equatable",
          "key.parsed_scope.end": 271,
          "key.parsed_scope.start": 271,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon2lqoiySbSayxG_xtSQRzlF1TL_xmfp"
        }
      ],
      "key.typename" : "<T where T : Equatable> ([T], T) -> Bool",
      "key.typeusr" : "$sySbSayxG_xtcSQRzluD",
      "key.usr" : "s:7Rubicon2lqoiySbSayxG_xtSQRzlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func &lt;? &lt;T&gt;(lhs: [<Type usr=\"s:7Rubicon2lqoiySbSayxG_ACtSQRzlF1TL_xmfp\">T<\/Type>], rhs: [<Type usr=\"s:7Rubicon2lqoiySbSayxG_ACtSQRzlF1TL_xmfp\">T<\/Type>]) -&gt; <Type usr=\"s:Sb\">Bool<\/Type> where <Type usr=\"s:7Rubicon2lqoiySbSayxG_ACtSQRzlF1TL_xmfp\">T<\/Type> : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 286,
          "key.offset": 14694
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 286,
          "key.offset": 14683
        }
      ],
      "key.bodycolumn": 71,
      "key.bodylength": 73,
      "key.bodyline": 286,
      "key.bodyoffset": 14753,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Checks to see if the left-hand <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>\ncontains all of the elements in the right-hand\n<code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>.\n\n- Parameters:\n  - lhs: The left-hand <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>.\n  - rhs: The right-hand <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>.\n- Returns: `true` if the left-hand\n           <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code> contains all of the\n           elements in the right-hand\n           <code>[Array](https:\/\/developer.apple.com\/documentation\/swift\/array\/)<\/code>.",
      "key.doc.declaration": "@inlinable public func <? <T>(lhs: [T], rhs: [T]) -> Bool where T : Equatable",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"286\" column=\"24\"><Name>&lt;?(_:_:)<\/Name><USR>s:7Rubicon2lqoiySbSayxG_ACtSQRzlF<\/USR><Declaration>@inlinable public func &lt;? &lt;T&gt;(lhs: [T], rhs: [T]) -&gt; Bool where T : Equatable<\/Declaration><CommentParts><Abstract><Para>Checks to see if the left-hand <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> contains all of the elements in the right-hand <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Abstract><Parameters><Parameter><Name>lhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The left-hand <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Discussion><\/Parameter><Parameter><Name>rhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The right-hand <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if the left-hand <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> contains all of the elements in the right-hand <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/array\/\">Array<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 286,
      "key.doc.name": "<?(_:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The left-hand <code><\/code>."
            }
          ],
          "name": "lhs"
        },
        {
          "discussion" : [
            {
              "Para" : "The right-hand <code><\/code>."
            }
          ],
          "name": "rhs"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "`true` if the left-hand <code><\/code> contains all of the elements in the right-hand <code><\/code>."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 769,
      "key.docline": 274,
      "key.docoffset": 13914,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;? <\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon2lqoiySbSayxG_ACtSQRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon2lqoiySbSayxG_ACtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon2lqoiySbSayxG_ACtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon2lqoiySbSayxG_ACtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 126,
      "key.line": 286,
      "key.name": "<?(_:_:)",
      "key.namecolumn": 24,
      "key.namelength": 37,
      "key.nameline": 286,
      "key.nameoffset": 14706,
      "key.offset": 14701,
      "key.parsed_declaration": "@inlinable public func <? <T: Equatable>(lhs: [T], rhs: [T]) -> Bool",
      "key.parsed_scope.end": 289,
      "key.parsed_scope.start": 286,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon2lqoiySbSayxG_xtSQRzlF\">&lt;? &lt;T&gt;(_: [T], _: T) -&gt; Bool where T : Equatable<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
          "key.column": 28,
          "key.elements": [
            {
              "key.column": 31,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 9,
              "key.line": 286,
              "key.offset": 14713
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
          "key.inheritedtypes": [
            {
              "key.name": "Equatable"
            }
          ],
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 12,
          "key.line": 286,
          "key.name": "T",
          "key.namecolumn": 28,
          "key.namelength": 1,
          "key.nameline": 286,
          "key.nameoffset": 14710,
          "key.offset": 14710,
          "key.parsed_declaration": "@inlinable public func <? <T: Equatable",
          "key.parsed_scope.end": 286,
          "key.parsed_scope.start": 286,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon2lqoiySbSayxG_ACtSQRzlF1TL_xmfp"
        }
      ],
      "key.typename" : "<T where T : Equatable> ([T], [T]) -> Bool",
      "key.typeusr" : "$sySbSayxG_AAtcSQRzluD",
      "key.usr" : "s:7Rubicon2lqoiySbSayxG_ACtSQRzlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func &lt;=&gt; &lt;T&gt;(l: <Type usr=\"s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF1TL_xmfp\">T<\/Type>?, r: <Type usr=\"s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF1TL_xmfp\">T<\/Type>?) -&gt; <Type usr=\"s:7Rubicon12SortOrderingO\">SortOrdering<\/Type> where <Type usr=\"s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF1TL_xmfp\">T<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 314,
          "key.offset": 15954
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 314,
          "key.offset": 15943
        }
      ],
      "key.bodycolumn": 75,
      "key.bodylength": 142,
      "key.bodyline": 314,
      "key.bodyoffset": 16017,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Compares two objects to see what their `SortOrdering` is. Both objects have to conform to the\n[`Comparable`](https:\/\/swiftdoc.org\/v5.1\/protocol\/comparable\/) protocol.\n\nUsage:\n```\n    func `foo(str1: String, str2: String)` { switch str1 <=> str2 { case .LessThan: `print(\"'\\(str1)`' comes\n    before '\\(str2)'\") case .EqualTo: `print(\"'\\(str1)`' is the same as '\\(str2)'\") case .GreaterThan:\n    `print(\"'\\(str1)`' comes after '\\(str2)'\") } }\n```\n\n- Parameters:\n  - l: The left hand operand\n  - r: The right hand operand\n\n- Returns: `SortOrdering.LessThan`, `SortOrdering.EqualTo`, `SortOrdering.GreaterThan` as the left-hand\n           operand should be sorted before, at the same place as, or after the right-hand operand.",
      "key.doc.declaration": "@inlinable public func <=> <T>(l: T?, r: T?) -> SortOrdering where T : Comparable",
      "key.doc.discussion": [
        {
          "Para": "Usage:"
        },
        {
          "CodeListing": ""
        }
      ],
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"314\" column=\"24\"><Name>&lt;=&gt;(_:_:)<\/Name><USR>s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF<\/USR><Declaration>@inlinable public func &lt;=&gt; &lt;T&gt;(l: T?, r: T?) -&gt; SortOrdering where T : Comparable<\/Declaration><CommentParts><Abstract><Para>Compares two objects to see what their <codeVoice>SortOrdering<\/codeVoice> is. Both objects have to conform to the <Link href=\"https:\/\/swiftdoc.org\/v5.1\/protocol\/comparable\/\"><codeVoice>Comparable<\/codeVoice><\/Link> protocol.<\/Para><\/Abstract><Parameters><Parameter><Name>l<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The left hand operand<\/Para><\/Discussion><\/Parameter><Parameter><Name>r<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The right hand operand<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>SortOrdering.LessThan<\/codeVoice>, <codeVoice>SortOrdering.EqualTo<\/codeVoice>, <codeVoice>SortOrdering.GreaterThan<\/codeVoice> as the left-hand operand should be sorted before, at the same place as, or after the right-hand operand.<\/Para><\/ResultDiscussion><Discussion><Para>Usage:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[    func `foo(str1: String, str2: String)` { switch str1 <=> str2 { case .LessThan: `print(\"'\\(str1)`' comes]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    before '\\(str2)'\") case .EqualTo: `print(\"'\\(str1)`' is the same as '\\(str2)'\") case .GreaterThan:]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    `print(\"'\\(str1)`' comes after '\\(str2)'\") } }]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Function>",
      "key.doc.line": 314,
      "key.doc.name": "<=>(_:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The left hand operand"
            }
          ],
          "name": "l"
        },
        {
          "discussion" : [
            {
              "Para" : "The right hand operand"
            }
          ],
          "name": "r"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "`SortOrdering.LessThan`, `SortOrdering.EqualTo`, `SortOrdering.GreaterThan` as the left-hand operand should be sorted before, at the same place as, or after the right-hand operand."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 792,
      "key.docline": 297,
      "key.docoffset": 15151,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;=&gt; <\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>l<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>r<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param>?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:7Rubicon12SortOrderingO\">SortOrdering<\/ref.enum><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 199,
      "key.line": 314,
      "key.name": "<=>(_:_:)",
      "key.namecolumn": 24,
      "key.namelength": 33,
      "key.nameline": 314,
      "key.nameoffset": 15966,
      "key.offset": 15961,
      "key.parsed_declaration": "@inlinable public func <=> <T: Comparable>(l: T?, r: T?) -> SortOrdering",
      "key.parsed_scope.end": 316,
      "key.parsed_scope.start": 314,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF\">&lt;=&gt; &lt;T&gt;(_: [T?], _: [T?]) -&gt; SortOrdering where T : Comparable<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T : <Type usr=\"s:SL\">Comparable<\/Type><\/Declaration>",
          "key.column": 29,
          "key.elements": [
            {
              "key.column": 32,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 10,
              "key.line": 314,
              "key.offset": 15974
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
          "key.inheritedtypes": [
            {
              "key.name": "Comparable"
            }
          ],
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 13,
          "key.line": 314,
          "key.name": "T",
          "key.namecolumn": 29,
          "key.namelength": 1,
          "key.nameline": 314,
          "key.nameoffset": 15971,
          "key.offset": 15971,
          "key.parsed_declaration": "@inlinable public func <=> <T: Comparable",
          "key.parsed_scope.end": 314,
          "key.parsed_scope.start": 314,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF1TL_xmfp"
        }
      ],
      "key.typename" : "<T where T : Comparable> (T?, T?) -> SortOrdering",
      "key.typeusr" : "$sy7Rubicon12SortOrderingOxSg_ADtcSLRzluD",
      "key.usr" : "s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func &lt;=&gt; &lt;T&gt;(l: [<Type usr=\"s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF1TL_xmfp\">T<\/Type>?], r: [<Type usr=\"s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF1TL_xmfp\">T<\/Type>?]) -&gt; <Type usr=\"s:7Rubicon12SortOrderingO\">SortOrdering<\/Type> where <Type usr=\"s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF1TL_xmfp\">T<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 346,
          "key.offset": 18044
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 346,
          "key.offset": 18033
        }
      ],
      "key.bodycolumn": 79,
      "key.bodylength": 227,
      "key.bodyline": 346,
      "key.bodyoffset": 18111,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Compares two arrays to see what their `SortOrdering` is. The objects of both arrays have to conform to the\n[`Comparable`](https:\/\/swiftdoc.org\/v5.1\/protocol\/comparable\/) protocol. This method first compares the number\nof objects in each array. If they are not the same then the function will return `SortOrdering.Before` or\n`SortOrdering.After` as the left-hand array has fewer or more objects than the right-hand array. If the both\nhold the same number of objects then the function compares each object in the left-hand array to the object in\nthe same position in the right-hand array. In other words it compares `leftArray[0]` to `rightArray[0]`,\n`leftArray[1]` to `rightArray[1]` and so on until it finds the first pair of objects that do not of the same\nsort ordering and returns ordering. If all the objects in the same positions in both arrays are\n`SortOrdering.Same` then this function returns `SortOrdering.Same`.\n\nExample:\n```\n    let array1: [Int] = [ 1, 2, 3, 4 ] let array2: [Int] = [ 1, 2, 3, 4 ] let array3: [Int] = [ 1, 2, 3 ] let\n    array4: [Int] = [ 1, 2, 5, 6 ]\n\n    let result1: SortOrdering = array1 <=> array2 \/\/ result1 is set to `SortOrdering.EqualTo` let result2:\n    SortOrdering = array1 <=> array3 \/\/ result2 is set to `SortOrdering.GreaterThan` let result3: SortOrdering\n    = array1 <=> array4 \/\/ result3 is set to `SortOrdering.LessThan`\n```\n\n- Parameters:\n  - l: The left hand array operand\n  - r: The right hand array operand\n\n- Returns: `SortOrdering.LessThan`, `SortOrdering.EqualTo`, `SortOrdering.GreaterThan` as the left-hand array\n           comes before, in the same place as, or after the right-hand array.",
      "key.doc.declaration": "@inlinable public func <=> <T>(l: [T?], r: [T?]) -> SortOrdering where T : Comparable",
      "key.doc.discussion": [
        {
          "Para": "Example:"
        },
        {
          "CodeListing": ""
        }
      ],
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"346\" column=\"24\"><Name>&lt;=&gt;(_:_:)<\/Name><USR>s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF<\/USR><Declaration>@inlinable public func &lt;=&gt; &lt;T&gt;(l: [T?], r: [T?]) -&gt; SortOrdering where T : Comparable<\/Declaration><CommentParts><Abstract><Para>Compares two arrays to see what their <codeVoice>SortOrdering<\/codeVoice> is. The objects of both arrays have to conform to the <Link href=\"https:\/\/swiftdoc.org\/v5.1\/protocol\/comparable\/\"><codeVoice>Comparable<\/codeVoice><\/Link> protocol. This method first compares the number of objects in each array. If they are not the same then the function will return <codeVoice>SortOrdering.Before<\/codeVoice> or <codeVoice>SortOrdering.After<\/codeVoice> as the left-hand array has fewer or more objects than the right-hand array. If the both hold the same number of objects then the function compares each object in the left-hand array to the object in the same position in the right-hand array. In other words it compares <codeVoice>leftArray[0]<\/codeVoice> to <codeVoice>rightArray[0]<\/codeVoice>, <codeVoice>leftArray[1]<\/codeVoice> to <codeVoice>rightArray[1]<\/codeVoice> and so on until it finds the first pair of objects that do not of the same sort ordering and returns ordering. If all the objects in the same positions in both arrays are <codeVoice>SortOrdering.Same<\/codeVoice> then this function returns <codeVoice>SortOrdering.Same<\/codeVoice>.<\/Para><\/Abstract><Parameters><Parameter><Name>l<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The left hand array operand<\/Para><\/Discussion><\/Parameter><Parameter><Name>r<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The right hand array operand<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>SortOrdering.LessThan<\/codeVoice>, <codeVoice>SortOrdering.EqualTo<\/codeVoice>, <codeVoice>SortOrdering.GreaterThan<\/codeVoice> as the left-hand array comes before, in the same place as, or after the right-hand array.<\/Para><\/ResultDiscussion><Discussion><Para>Example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[    let array1: [Int] = [ 1, 2, 3, 4 ] let array2: [Int] = [ 1, 2, 3, 4 ] let array3: [Int] = [ 1, 2, 3 ] let]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    array4: [Int] = [ 1, 2, 5, 6 ]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    let result1: SortOrdering = array1 <=> array2 \/\/ result1 is set to `SortOrdering.EqualTo` let result2:]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    SortOrdering = array1 <=> array3 \/\/ result2 is set to `SortOrdering.GreaterThan` let result3: SortOrdering]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    = array1 <=> array4 \/\/ result3 is set to `SortOrdering.LessThan`]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Function>",
      "key.doc.line": 346,
      "key.doc.name": "<=>(_:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The left hand array operand"
            }
          ],
          "name": "l"
        },
        {
          "discussion" : [
            {
              "Para" : "The right hand array operand"
            }
          ],
          "name": "r"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "`SortOrdering.LessThan`, `SortOrdering.EqualTo`, `SortOrdering.GreaterThan` as the left-hand array comes before, in the same place as, or after the right-hand array."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 1756,
      "key.docline": 319,
      "key.docoffset": 16277,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;=&gt; <\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>l<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param>?]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>r<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param>?]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:7Rubicon12SortOrderingO\">SortOrdering<\/ref.enum><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 288,
      "key.line": 346,
      "key.name": "<=>(_:_:)",
      "key.namecolumn": 24,
      "key.namelength": 37,
      "key.nameline": 346,
      "key.nameoffset": 18056,
      "key.offset": 18051,
      "key.parsed_declaration": "@inlinable public func <=> <T: Comparable>(l: [T?], r: [T?]) -> SortOrdering",
      "key.parsed_scope.end": 357,
      "key.parsed_scope.start": 346,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon3legoiyAA12SortOrderingOxSg_AEtSLRzlF\">&lt;=&gt; &lt;T&gt;(_: T?, _: T?) -&gt; SortOrdering where T : Comparable<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T : <Type usr=\"s:SL\">Comparable<\/Type><\/Declaration>",
          "key.column": 29,
          "key.elements": [
            {
              "key.column": 32,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 10,
              "key.line": 346,
              "key.offset": 18064
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
          "key.inheritedtypes": [
            {
              "key.name": "Comparable"
            }
          ],
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 13,
          "key.line": 346,
          "key.name": "T",
          "key.namecolumn": 29,
          "key.namelength": 1,
          "key.nameline": 346,
          "key.nameoffset": 18061,
          "key.offset": 18061,
          "key.parsed_declaration": "@inlinable public func <=> <T: Comparable",
          "key.parsed_scope.end": 346,
          "key.parsed_scope.start": 346,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF1TL_xmfp"
        },
        {
          "key.annotated_decl": "<Declaration>var cc: <Type usr=\"s:7Rubicon12SortOrderingO\">SortOrdering<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cc<\/decl.name>: <decl.var.type><ref.enum usr=\"s:7Rubicon12SortOrderingO\">SortOrdering<\/ref.enum><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 44,
          "key.line": 347,
          "key.name": "cc",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 347,
          "key.nameoffset": 18120,
          "key.offset": 18116,
          "key.parsed_declaration": "var cc: SortOrdering = (l.count <=> r.count)",
          "key.parsed_scope.end": 347,
          "key.parsed_scope.start": 347,
          "key.typename": "SortOrdering",
          "key.typeusr": "$s7Rubicon12SortOrderingOD",
          "key.usr": "s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF2ccL_ADvp"
        }
      ],
      "key.typename" : "<T where T : Comparable> ([T?], [T?]) -> SortOrdering",
      "key.typeusr" : "$sy7Rubicon12SortOrderingOSayxSgG_AEtcSLRzluD",
      "key.usr" : "s:7Rubicon3legoiyAA12SortOrderingOSayxSgG_AFtSLRzlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func toHex&lt;T&gt;(_ n: <Type usr=\"s:7Rubicon5toHex_3padSSx_SitSzRzlF1TL_xmfp\">T<\/Type>, pad: <Type usr=\"s:Si\">Int<\/Type> = 0) -&gt; <Type usr=\"s:SS\">String<\/Type> where <Type usr=\"s:7Rubicon5toHex_3padSSx_SitSzRzlF1TL_xmfp\">T<\/Type> : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 369,
          "key.offset": 18963
        }
      ],
      "key.bodycolumn": 70,
      "key.bodylength": 576,
      "key.bodyline": 369,
      "key.bodyoffset": 19032,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Returns a <code>[String](https:\/\/developer.apple.com\/documentation\/swift\/string\/)<\/code> that represents the\ngiven integer in hexadecimal format.\n\n- Parameters:\n  - n: The integer number.\n  - pad: 0 means no padding. negative number means the number is padded with spaces to that many places.\n         Positive number means the number is padded with zeros to that many places.\n- Returns: The <code>[String](https:\/\/developer.apple.com\/documentation\/swift\/string\/)<\/code>",
      "key.doc.declaration": "public func toHex<T>(_ n: T, pad: Int = 0) -> String where T : BinaryInteger",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"369\" column=\"13\"><Name>toHex(_:pad:)<\/Name><USR>s:7Rubicon5toHex_3padSSx_SitSzRzlF<\/USR><Declaration>public func toHex&lt;T&gt;(_ n: T, pad: Int = 0) -&gt; String where T : BinaryInteger<\/Declaration><CommentParts><Abstract><Para>Returns a <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/string\/\">String<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> that represents the given integer in hexadecimal format.<\/Para><\/Abstract><Parameters><Parameter><Name>n<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The integer number.<\/Para><\/Discussion><\/Parameter><Parameter><Name>pad<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>0 means no padding. negative number means the number is padded with spaces to that many places. Positive number means the number is padded with zeros to that many places.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/string\/\">String<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML><\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 369,
      "key.doc.name": "toHex(_:pad:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The integer number."
            }
          ],
          "name": "n"
        },
        {
          "discussion" : [
            {
              "Para" : "0 means no padding. negative number means the number is padded with spaces to that many places. Positive number means the number is padded with zeros to that many places."
            }
          ],
          "name": "pad"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The <code><\/code>"
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 507,
      "key.docline": 360,
      "key.docoffset": 18456,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toHex<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon5toHex_3padSSx_SitSzRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>n<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon5toHex_3padSSx_SitSzRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>pad<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = 0<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon5toHex_3padSSx_SitSzRzlF1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 639,
      "key.line": 369,
      "key.name": "toHex(_:pad:)",
      "key.namecolumn": 13,
      "key.namelength": 45,
      "key.nameline": 369,
      "key.nameoffset": 18975,
      "key.offset": 18970,
      "key.parsed_declaration": "public func toHex<T: BinaryInteger>(_ n: T, pad: Int = 0) -> String",
      "key.parsed_scope.end": 389,
      "key.parsed_scope.start": 369,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
          "key.column": 19,
          "key.elements": [
            {
              "key.column": 22,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 13,
              "key.line": 369,
              "key.offset": 18984
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
          "key.inheritedtypes": [
            {
              "key.name": "BinaryInteger"
            }
          ],
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 16,
          "key.line": 369,
          "key.name": "T",
          "key.namecolumn": 19,
          "key.namelength": 1,
          "key.nameline": 369,
          "key.nameoffset": 18981,
          "key.offset": 18981,
          "key.parsed_declaration": "public func toHex<T: BinaryInteger",
          "key.parsed_scope.end": 369,
          "key.parsed_scope.start": 369,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon5toHex_3padSSx_SitSzRzlF1TL_xmfp"
        },
        {
          "key.annotated_decl": "<Declaration>var str: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>str<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 22,
          "key.line": 370,
          "key.name": "str",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 370,
          "key.nameoffset": 19041,
          "key.offset": 19037,
          "key.parsed_declaration": "var str: String   = \"\"",
          "key.parsed_scope.end": 370,
          "key.parsed_scope.start": 370,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon5toHex_3padSSx_SitSzRzlF3strL_SSvp"
        },
        {
          "key.annotated_decl": "<Declaration>var spd: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>spd<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 22,
          "key.line": 371,
          "key.name": "spd",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 371,
          "key.nameoffset": 19068,
          "key.offset": 19064,
          "key.parsed_declaration": "var spd: String   = \"\"",
          "key.parsed_scope.end": 371,
          "key.parsed_scope.start": 371,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon5toHex_3padSSx_SitSzRzlF3spdL_SSvp"
        },
        {
          "key.annotated_decl": "<Declaration>var n: <Type usr=\"s:7Rubicon5toHex_3padSSx_SitSzRzlF1TL_xmfp\">T<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>n<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:7Rubicon5toHex_3padSSx_SitSzRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 21,
          "key.line": 372,
          "key.name": "n",
          "key.namecolumn": 9,
          "key.namelength": 1,
          "key.nameline": 372,
          "key.nameoffset": 19095,
          "key.offset": 19091,
          "key.parsed_declaration": "var n:   T        = n",
          "key.parsed_scope.end": 372,
          "key.parsed_scope.start": 372,
          "key.typename": "T",
          "key.typeusr": "$sxD",
          "key.usr": "s:7Rubicon5toHex_3padSSx_SitSzRzlF1nL0_xvp"
        },
        {
          "key.annotated_decl": "<Declaration>let w: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>w<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 30,
          "key.line": 373,
          "key.name": "w",
          "key.namecolumn": 9,
          "key.namelength": 1,
          "key.nameline": 373,
          "key.nameoffset": 19121,
          "key.offset": 19117,
          "key.parsed_declaration": "let w:   Int      = n.bitWidth",
          "key.parsed_scope.end": 373,
          "key.parsed_scope.start": 373,
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon5toHex_3padSSx_SitSzRzlF1wL_Sivp"
        },
        {
          "key.annotated_decl": "<Declaration>let bw: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>bw<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 55,
          "key.line": 374,
          "key.name": "bw",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 374,
          "key.nameoffset": 19156,
          "key.offset": 19152,
          "key.parsed_declaration": "let bw:  Int      = ((pad == 0) ? w : max(w, abs(pad)))",
          "key.parsed_scope.end": 374,
          "key.parsed_scope.start": 374,
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon5toHex_3padSSx_SitSzRzlF2bwL_Sivp"
        },
        {
          "key.annotated_decl": "<Declaration>let pc: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pc<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 43,
          "key.line": 375,
          "key.name": "pc",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 375,
          "key.nameoffset": 19216,
          "key.offset": 19212,
          "key.parsed_declaration": "let pc:  String   = ((pad < 0) ? \" \" : \"0\")",
          "key.parsed_scope.end": 375,
          "key.parsed_scope.start": 375,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon5toHex_3padSSx_SitSzRzlF2pcL_SSvp"
        },
        {
          "key.annotated_decl": "<Declaration>let hx: [<Type usr=\"s:SS\">String<\/Type>]<\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>hx<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 102,
          "key.line": 376,
          "key.name": "hx",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 376,
          "key.nameoffset": 19264,
          "key.offset": 19260,
          "key.parsed_declaration": "let hx:  [String] = [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" ]",
          "key.parsed_scope.end": 376,
          "key.parsed_scope.start": 376,
          "key.typename": "[String]",
          "key.typeusr": "$sSaySSGD",
          "key.usr": "s:7Rubicon5toHex_3padSSx_SitSzRzlF2hxL_SaySSGvp"
        }
      ],
      "key.typename" : "<T where T : BinaryInteger> (T, pad: Int) -> String",
      "key.typeusr" : "$s_3padSSx_SitcSzRzluD",
      "key.usr" : "s:7Rubicon5toHex_3padSSx_SitSzRzlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func toBinary&lt;T&gt;(_ n: <Type usr=\"s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1TL_xmfp\">T<\/Type>, sep: <Type usr=\"s:SS\">String<\/Type>? = nil, pad: <Type usr=\"s:Si\">Int<\/Type> = 0) -&gt; <Type usr=\"s:SS\">String<\/Type> where <Type usr=\"s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1TL_xmfp\">T<\/Type> : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 402,
          "key.offset": 20206
        }
      ],
      "key.bodycolumn": 93,
      "key.bodylength": 583,
      "key.bodyline": 402,
      "key.bodyoffset": 20298,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Simple function to convert an integer number into a string represented as a series of ones - \"1\" - or zeros -\n\"0\" starting with the high bits first and the low bits to the right.\n\n- Parameters:\n  - n: The integer number.\n  - sep: The string will be grouped into octets separated by a space unless you provide a separator string in\n         this field.\n  - pad: The number of places to left pad the string with zeros.\n- Returns: The string.",
      "key.doc.declaration": "public func toBinary<T>(_ n: T, sep: String? = nil, pad: Int = 0) -> String where T : BinaryInteger",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"402\" column=\"13\"><Name>toBinary(_:sep:pad:)<\/Name><USR>s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF<\/USR><Declaration>public func toBinary&lt;T&gt;(_ n: T, sep: String? = nil, pad: Int = 0) -&gt; String where T : BinaryInteger<\/Declaration><CommentParts><Abstract><Para>Simple function to convert an integer number into a string represented as a series of ones - “1” - or zeros - “0” starting with the high bits first and the low bits to the right.<\/Para><\/Abstract><Parameters><Parameter><Name>n<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The integer number.<\/Para><\/Discussion><\/Parameter><Parameter><Name>sep<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string will be grouped into octets separated by a space unless you provide a separator string in this field.<\/Para><\/Discussion><\/Parameter><Parameter><Name>pad<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of places to left pad the string with zeros.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The string.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 402,
      "key.doc.name": "toBinary(_:sep:pad:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The integer number."
            }
          ],
          "name": "n"
        },
        {
          "discussion" : [
            {
              "Para" : "The string will be grouped into octets separated by a space unless you provide a separator string in this field."
            }
          ],
          "name" : "sep"
        },
        {
          "discussion" : [
            {
              "Para" : "The number of places to left pad the string with zeros."
            }
          ],
          "name": "pad"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The string."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 480,
      "key.docline": 392,
      "key.docoffset": 19726,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toBinary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>n<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>sep<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>pad<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = 0<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 669,
      "key.line": 402,
      "key.name": "toBinary(_:sep:pad:)",
      "key.namecolumn": 13,
      "key.namelength": 68,
      "key.nameline": 402,
      "key.nameoffset": 20218,
      "key.offset": 20213,
      "key.parsed_declaration": "public func toBinary<T: BinaryInteger>(_ n: T, sep: String? = nil, pad: Int = 0) -> String",
      "key.parsed_scope.end": 422,
      "key.parsed_scope.start": 402,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
          "key.column": 22,
          "key.elements": [
            {
              "key.column": 25,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 13,
              "key.line": 402,
              "key.offset": 20230
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
          "key.inheritedtypes": [
            {
              "key.name": "BinaryInteger"
            }
          ],
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 16,
          "key.line": 402,
          "key.name": "T",
          "key.namecolumn": 22,
          "key.namelength": 1,
          "key.nameline": 402,
          "key.nameoffset": 20227,
          "key.offset": 20227,
          "key.parsed_declaration": "public func toBinary<T: BinaryInteger",
          "key.parsed_scope.end": 402,
          "key.parsed_scope.start": 402,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1TL_xmfp"
        },
        {
          "key.annotated_decl": "<Declaration>var str: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>str<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 20,
          "key.line": 403,
          "key.name": "str",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 403,
          "key.nameoffset": 20307,
          "key.offset": 20303,
          "key.parsed_declaration": "var str: String = \"\"",
          "key.parsed_scope.end": 403,
          "key.parsed_scope.start": 403,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF3strL_SSvp"
        },
        {
          "key.annotated_decl": "<Declaration>var n: <Type usr=\"s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1TL_xmfp\">T<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>n<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 19,
          "key.line": 404,
          "key.name": "n",
          "key.namecolumn": 9,
          "key.namelength": 1,
          "key.nameline": 404,
          "key.nameoffset": 20332,
          "key.offset": 20328,
          "key.parsed_declaration": "var n:   T      = n",
          "key.parsed_scope.end": 404,
          "key.parsed_scope.start": 404,
          "key.typename": "T",
          "key.typeusr": "$sxD",
          "key.usr": "s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1nL0_xvp"
        },
        {
          "key.annotated_decl": "<Declaration>let w: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>w<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 28,
          "key.line": 405,
          "key.name": "w",
          "key.namecolumn": 9,
          "key.namelength": 1,
          "key.nameline": 405,
          "key.nameoffset": 20356,
          "key.offset": 20352,
          "key.parsed_declaration": "let w:   Int    = n.bitWidth",
          "key.parsed_scope.end": 405,
          "key.parsed_scope.start": 405,
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF1wL_Sivp"
        },
        {
          "key.annotated_decl": "<Declaration>let bw: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>bw<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 53,
          "key.line": 406,
          "key.name": "bw",
          "key.namecolumn": 9,
          "key.namelength": 2,
          "key.nameline": 406,
          "key.nameoffset": 20389,
          "key.offset": 20385,
          "key.parsed_declaration": "let bw:  Int    = ((pad == 0) ? w : max(w, abs(pad)))",
          "key.parsed_scope.end": 406,
          "key.parsed_scope.start": 406,
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF2bwL_Sivp"
        },
        {
          "key.annotated_decl": "<Declaration>let pc0: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pc0<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 44,
          "key.line": 407,
          "key.name": "pc0",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 407,
          "key.nameoffset": 20447,
          "key.offset": 20443,
          "key.parsed_declaration": "let pc0: String = ((sep == nil) ? \"\" : sep!)",
          "key.parsed_scope.end": 407,
          "key.parsed_scope.start": 407,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF3pc0L_SSvp"
        },
        {
          "key.annotated_decl": "<Declaration>let pc1: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pc1<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 41,
          "key.line": 408,
          "key.name": "pc1",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 408,
          "key.nameoffset": 20496,
          "key.offset": 20492,
          "key.parsed_declaration": "let pc1: String = ((pad < 0) ? \" \" : \"0\")",
          "key.parsed_scope.end": 408,
          "key.parsed_scope.start": 408,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF3pc1L_SSvp"
        },
        {
          "key.annotated_decl": "<Declaration>let pc2: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pc2<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 72,
          "key.line": 409,
          "key.name": "pc2",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 409,
          "key.nameoffset": 20542,
          "key.offset": 20538,
          "key.parsed_declaration": "let pc2: String = ((sep == nil) ? pc1 : ((pad < 0) ? \"  \" : \"0\\(sep!)\"))",
          "key.parsed_scope.end": 409,
          "key.parsed_scope.start": 409,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF3pc2L_SSvp"
        }
      ],
      "key.typename" : "<T where T : BinaryInteger> (T, sep: String?, pad: Int) -> String",
      "key.typeusr" : "$s_3sep3padSSx_SSSgSitcSzRzluD",
      "key.usr" : "s:7Rubicon8toBinary_3sep3padSSx_SSSgSitSzRzlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func ifNil&lt;S, T&gt;(_ obj: <Type usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1SL_xmfp\">S<\/Type>?, then b2: () throws -&gt; <Type usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1TL_q_mfp\">T<\/Type>, elseThen b1: (<Type usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1SL_xmfp\">S<\/Type>) throws -&gt; <Type usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1TL_q_mfp\">T<\/Type>) rethrows -&gt; <Type usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1TL_q_mfp\">T<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.rethrows",
          "key.column": 102,
          "key.length": 8,
          "key.line": 456,
          "key.offset": 22530
        },
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 456,
          "key.offset": 22440
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 456,
          "key.offset": 22429
        }
      ],
      "key.bodycolumn": 117,
      "key.bodylength": 69,
      "key.bodyline": 456,
      "key.bodyoffset": 22545,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "<code>[Optional](https:\/\/developer.apple.com\/documentation\/swift\/optional\/)<\/code> conditional. To test an\noptional for `nil` you can use an `if` statement like this:\n```\n    if let v = possiblyNil { \/* do something with v *\/ } else { \/* do something when possiblyNil is `nil` *\/ }\n```\n\nThis is fine but I wanted to do the same thing with a conditional expression like this:\n```\n    let x = (let v = possiblyNil ? v.name : \"no name\") \/\/ This will not compile. 😩\n```\n\nI know I could always do this:\n```\n    let x = ((possiblyNil == `nil`) ? \"no name\" : v!.name) \/\/ This will compile.\n```\nBut the OCD side of me really dislikes that '!' being there even though I know it will never cause a fatal\nerror. It just rubs up against that nerve seeing it there. 🤢\n\nSo I created this function to simulate the functionality of the above using closures.\n\n```\n    let x = `nilCheck(possiblyNil)` { $0.name }, whenNilDo: { \"no name\" } \/\/ This will compile. 😁\n```\n\n- Parameters:\n  - obj: The expression to test for `nil`.\n  - b1: The closure to execute if `obj` is NOT `nil`. The unwrapped value of `obj` is passed to the closure.\n  - b2: The closure to execute if `obj` IS `nil`.\n- Returns: The value returned from whichever closure is executed.\n- Throws: Any exception thrown by whichever closure is executed.",
      "key.doc.declaration": "@inlinable public func ifNil<S, T>(_ obj: S?, then b2: () throws -> T, elseThen b1: (S) throws -> T) rethrows -> T",
      "key.doc.discussion": [
        {
          "CodeListing": ""
        },
        {
          "Para": "This is fine but I wanted to do the same thing with a conditional expression like this:"
        },
        {
          "CodeListing" : ""
        },
        {
          "Para" : "I know I could always do this:"
        },
        {
          "CodeListing" : ""
        },
        {
          "Para": "But the OCD side of me really dislikes that ‘!’ being there even though I know it will never cause a fatal error. It just rubs up against that nerve seeing it there. 🤢"
        },
        {
          "Para": "So I created this function to simulate the functionality of the above using closures."
        },
        {
          "CodeListing": ""
        }
      ],
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"456\" column=\"24\"><Name>ifNil(_:then:elseThen:)<\/Name><USR>s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF<\/USR><Declaration>@inlinable public func ifNil&lt;S, T&gt;(_ obj: S?, then b2: () throws -&gt; T, elseThen b1: (S) throws -&gt; T) rethrows -&gt; T<\/Declaration><CommentParts><Abstract><Para><rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/optional\/\">Optional<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> conditional. To test an optional for <codeVoice>nil<\/codeVoice> you can use an <codeVoice>if<\/codeVoice> statement like this:<\/Para><\/Abstract><Parameters><Parameter><Name>obj<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The expression to test for <codeVoice>nil<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><Parameter><Name>b1<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure to execute if <codeVoice>obj<\/codeVoice> is NOT <codeVoice>nil<\/codeVoice>. The unwrapped value of <codeVoice>obj<\/codeVoice> is passed to the closure.<\/Para><\/Discussion><\/Parameter><Parameter><Name>b2<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure to execute if <codeVoice>obj<\/codeVoice> IS <codeVoice>nil<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The value returned from whichever closure is executed.<\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>Any exception thrown by whichever closure is executed.<\/Para><\/ThrowsDiscussion><Discussion><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[    if let v = possiblyNil { \/* do something with v *\/ } else { \/* do something when possiblyNil is `nil` *\/ }]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>This is fine but I wanted to do the same thing with a conditional expression like this:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[    let x = (let v = possiblyNil ? v.name : \"no name\") \/\/ This will not compile. 😩]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>I know I could always do this:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[    let x = ((possiblyNil == `nil`) ? \"no name\" : v!.name) \/\/ This will compile.]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>But the OCD side of me really dislikes that ‘!’ being there even though I know it will never cause a fatal error. It just rubs up against that nerve seeing it there. 🤢<\/Para><Para>So I created this function to simulate the functionality of the above using closures.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[    let x = `nilCheck(possiblyNil)` { $0.name }, whenNilDo: { \"no name\" } \/\/ This will compile. 😁]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Function>",
      "key.doc.line": 456,
      "key.doc.name": "ifNil(_:then:elseThen:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The expression to test for `nil`."
            }
          ],
          "name": "obj"
        },
        {
          "discussion" : [
            {
              "Para" : "The closure to execute if `obj` is NOT `nil`. The unwrapped value of `obj` is passed to the closure."
            }
          ],
          "name" : "b1"
        },
        {
          "discussion" : [
            {
              "Para" : "The closure to execute if `obj` IS `nil`."
            }
          ],
          "name": "b2"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The value returned from whichever closure is executed."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 1430,
      "key.docline": 425,
      "key.docoffset": 20999,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>ifNil<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1SL_xmfp\"><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1TL_q_mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>obj<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1SL_xmfp\">S<\/ref.generic_type_param>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>then<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b2<\/decl.var.parameter.name>: <decl.var.parameter.type>() <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1TL_q_mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>elseThen<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b1<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1SL_xmfp\">S<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1TL_q_mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1TL_q_mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 168,
      "key.line": 456,
      "key.name": "ifNil(_:then:elseThen:)",
      "key.namecolumn": 24,
      "key.namelength": 77,
      "key.nameline": 456,
      "key.nameoffset": 22452,
      "key.offset": 22447,
      "key.parsed_declaration": "@inlinable public func ifNil<S, T>(_ obj: S?, then b2: () throws -> T, elseThen b1: (S) throws -> T) rethrows -> T",
      "key.parsed_scope.end": 459,
      "key.parsed_scope.start": 456,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>S<\/Declaration>",
          "key.column": 30,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 1,
          "key.line": 456,
          "key.name": "S",
          "key.namecolumn": 30,
          "key.namelength": 1,
          "key.nameline": 456,
          "key.nameoffset": 22458,
          "key.offset": 22458,
          "key.parsed_declaration": "@inlinable public func ifNil<S",
          "key.parsed_scope.end": 456,
          "key.parsed_scope.start": 456,
          "key.typename": "S.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1SL_xmfp"
        },
        {
          "key.annotated_decl": "<Declaration>T<\/Declaration>",
          "key.column": 33,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 1,
          "key.line": 456,
          "key.name": "T",
          "key.namecolumn": 33,
          "key.namelength": 1,
          "key.nameline": 456,
          "key.nameoffset": 22461,
          "key.offset": 22461,
          "key.parsed_declaration": "@inlinable public func ifNil<S, T",
          "key.parsed_scope.end": 456,
          "key.parsed_scope.start": 456,
          "key.typename": "T.Type",
          "key.typeusr": "$sq_mD",
          "key.usr": "s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF1TL_q_mfp"
        }
      ],
      "key.typename" : "<S, T> (S?, then: () throws -> T, elseThen: (S) throws -> T) throws -> T",
      "key.typeusr" : "$s_4then8elseThenq_xSg_q_yKXEq_xKXEtKcr0_luD",
      "key.usr" : "s:7Rubicon5ifNil_4then8elseThenq_xSg_q_yKXEq_xKXEtKr0_lF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func fixLength(_ maxLength: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 470,
          "key.offset": 23224
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 470,
          "key.offset": 23213
        }
      ],
      "key.bodycolumn": 60,
      "key.bodylength": 41,
      "key.bodyline": 470,
      "key.bodyoffset": 23272,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "If the `maxLength` is less than <code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> then return the largest\ninteger possible (<code>[Int.max](https:\/\/developer.apple.com\/documentation\/swift\/int\/1540171-max)<\/code>)\notherwise returns the value of `maxLength`.\n\n- Parameter maxLength: the length to fix.\n- Returns: Either the value of `maxLength` or\n           <code>[Int.max](https:\/\/developer.apple.com\/documentation\/swift\/int\/1540171-max)<\/code>.",
      "key.doc.declaration": "@inlinable public func fixLength(_ maxLength: Int) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"470\" column=\"24\"><Name>fixLength(_:)<\/Name><USR>s:7Rubicon9fixLengthyS2iF<\/USR><Declaration>@inlinable public func fixLength(_ maxLength: Int) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>If the <codeVoice>maxLength<\/codeVoice> is less than <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> then return the largest integer possible (<rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/int\/1540171-max\">Int.max<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>) otherwise returns the value of <codeVoice>maxLength<\/codeVoice>.<\/Para><\/Abstract><Parameters><Parameter><Name>maxLength<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the length to fix.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>Either the value of <codeVoice>maxLength<\/codeVoice> or <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/swift\/int\/1540171-max\">Int.max<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 470,
      "key.doc.name": "fixLength(_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "the length to fix."
            }
          ],
          "name": "maxLength"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "Either the value of `maxLength` or <code><\/code>."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 481,
      "key.docline": 462,
      "key.docoffset": 22732,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>fixLength<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>maxLength<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 83,
      "key.line": 470,
      "key.name": "fixLength(_:)",
      "key.namecolumn": 24,
      "key.namelength": 27,
      "key.nameline": 470,
      "key.nameoffset": 23236,
      "key.offset": 23231,
      "key.parsed_declaration": "@inlinable public func fixLength(_ maxLength: Int) -> Int",
      "key.parsed_scope.end": 470,
      "key.parsed_scope.start": 470,
      "key.substructure": [
      ],
      "key.typename": "(Int) -> Int",
      "key.typeusr": "$syS2icD",
      "key.usr": "s:7Rubicon9fixLengthyS2iF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func value&lt;T&gt;(_ value: <Type usr=\"s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF1TL_xmfp\">T<\/Type>, isOneOf: <Type usr=\"s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF1TL_xmfp\">T<\/Type>...) -&gt; <Type usr=\"s:Sb\">Bool<\/Type> where <Type usr=\"s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF1TL_xmfp\">T<\/Type> : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 488,
          "key.offset": 23903
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 488,
          "key.offset": 23892
        }
      ],
      "key.bodycolumn": 80,
      "key.bodylength": 31,
      "key.bodyline": 488,
      "key.bodyoffset": 23971,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Tests one value to see if it is one of the listed values. Instead of doing this:\n```\n    if number == 1 || number == 5 || number == 99 { \/* do something *\/ }\n```\n\nYou can now do this:\n```\n    if `value(number, isOneOf: 1, 5, 99)` { \/* do something *\/ }\n```\n\n- Parameters:\n  - value: The value to be tested.\n  - isOneOf: The desired values.\n- Returns: `true` of the value is one of the desired values.",
      "key.doc.declaration": "@inlinable public func value<T>(_ value: T, isOneOf: T...) -> Bool where T : Equatable",
      "key.doc.discussion": [
        {
          "CodeListing": ""
        },
        {
          "Para": "You can now do this:"
        },
        {
          "CodeListing": ""
        }
      ],
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"488\" column=\"24\"><Name>value(_:isOneOf:)<\/Name><USR>s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF<\/USR><Declaration>@inlinable public func value&lt;T&gt;(_ value: T, isOneOf: T...) -&gt; Bool where T : Equatable<\/Declaration><CommentParts><Abstract><Para>Tests one value to see if it is one of the listed values. Instead of doing this:<\/Para><\/Abstract><Parameters><Parameter><Name>value<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The value to be tested.<\/Para><\/Discussion><\/Parameter><Parameter><Name>isOneOf<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The desired values.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>true<\/codeVoice> of the value is one of the desired values.<\/Para><\/ResultDiscussion><Discussion><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[    if number == 1 || number == 5 || number == 99 { \/* do something *\/ }]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can now do this:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[    if `value(number, isOneOf: 1, 5, 99)` { \/* do something *\/ }]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Function>",
      "key.doc.line": 488,
      "key.doc.name": "value(_:isOneOf:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The value to be tested."
            }
          ],
          "name": "value"
        },
        {
          "discussion" : [
            {
              "Para" : "The desired values."
            }
          ],
          "name": "isOneOf"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "`true` of the value is one of the desired values."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 461,
      "key.docline": 473,
      "key.docoffset": 23431,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>value<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>isOneOf<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type>...<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 93,
      "key.line": 488,
      "key.name": "value(_:isOneOf:)",
      "key.namecolumn": 24,
      "key.namelength": 46,
      "key.nameline": 488,
      "key.nameoffset": 23915,
      "key.offset": 23910,
      "key.parsed_declaration": "@inlinable public func value<T: Equatable>(_ value: T, isOneOf: T...) -> Bool",
      "key.parsed_scope.end": 488,
      "key.parsed_scope.start": 488,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF\">value&lt;T&gt;(_: T, isOneOf: [T]) -&gt; Bool where T : Equatable<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
          "key.column": 30,
          "key.elements": [
            {
              "key.column": 33,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 9,
              "key.line": 488,
              "key.offset": 23924
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
          "key.inheritedtypes": [
            {
              "key.name": "Equatable"
            }
          ],
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 12,
          "key.line": 488,
          "key.name": "T",
          "key.namecolumn": 30,
          "key.namelength": 1,
          "key.nameline": 488,
          "key.nameoffset": 23921,
          "key.offset": 23921,
          "key.parsed_declaration": "@inlinable public func value<T: Equatable",
          "key.parsed_scope.end": 488,
          "key.parsed_scope.start": 488,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF1TL_xmfp"
        }
      ],
      "key.typename" : "<T where T : Equatable> (T, isOneOf: T...) -> Bool",
      "key.typeusr" : "$s_7isOneOfSbx_xdtcSQRzluD",
      "key.usr" : "s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func value&lt;T&gt;(_ value: <Type usr=\"s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF1TL_xmfp\">T<\/Type>, isOneOf: [<Type usr=\"s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF1TL_xmfp\">T<\/Type>]) -&gt; <Type usr=\"s:Sb\">Bool<\/Type> where <Type usr=\"s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF1TL_xmfp\">T<\/Type> : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 490,
          "key.offset": 24016
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 490,
          "key.offset": 24005
        }
      ],
      "key.bodycolumn": 79,
      "key.bodylength": 31,
      "key.bodyline": 490,
      "key.bodyoffset": 24083,
      "key.column": 19,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>value<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>isOneOf<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF1TL_xmfp\">T<\/ref.generic_type_param> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 92,
      "key.line": 490,
      "key.name": "value(_:isOneOf:)",
      "key.namecolumn": 24,
      "key.namelength": 45,
      "key.nameline": 490,
      "key.nameoffset": 24028,
      "key.offset": 24023,
      "key.parsed_declaration": "@inlinable public func value<T: Equatable>(_ value: T, isOneOf: [T]) -> Bool",
      "key.parsed_scope.end": 490,
      "key.parsed_scope.start": 490,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon5value_7isOneOfSbx_xdtSQRzlF\">value&lt;T&gt;(_: T, isOneOf: T...) -&gt; Bool where T : Equatable<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
          "key.column": 30,
          "key.elements": [
            {
              "key.column": 33,
              "key.kind": "source.lang.swift.structure.elem.typeref",
              "key.length": 9,
              "key.line": 490,
              "key.offset": 24037
            }
          ],
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
          "key.inheritedtypes": [
            {
              "key.name": "Equatable"
            }
          ],
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 12,
          "key.line": 490,
          "key.name": "T",
          "key.namecolumn": 30,
          "key.namelength": 1,
          "key.nameline": 490,
          "key.nameoffset": 24034,
          "key.offset": 24034,
          "key.parsed_declaration": "@inlinable public func value<T: Equatable",
          "key.parsed_scope.end": 490,
          "key.parsed_scope.start": 490,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF1TL_xmfp"
        }
      ],
      "key.typename" : "<T where T : Equatable> (T, isOneOf: [T]) -> Bool",
      "key.typeusr" : "$s_7isOneOfSbx_SayxGtcSQRzluD",
      "key.usr" : "s:7Rubicon5value_7isOneOfSbx_SayxGtSQRzlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func fromBytes&lt;T&gt;(type: <Type usr=\"s:7Rubicon9fromBytes4type_Sixm_SitlF1TL_xmfp\">T<\/Type>.Type, _ value: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 501,
          "key.offset": 24651
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 501,
          "key.offset": 24640
        }
      ],
      "key.bodycolumn": 73,
      "key.bodylength": 65,
      "key.bodyline": 501,
      "key.bodyoffset": 24712,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Calculate the number of instances of a given datatype will occupy a given number of bytes. For example, if\ngiven a type of `Int64.self` and a byte count of 16 then this function will return a value of 2.\n\n- Parameters:\n  - type: The target datatype.\n  - value: The number of bytes.\n- Returns: The number of instances of the datatype that can occupy the given number of bytes.",
      "key.doc.declaration": "@inlinable public func fromBytes<T>(type: T.Type, _ value: Int) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"501\" column=\"24\"><Name>fromBytes(type:_:)<\/Name><USR>s:7Rubicon9fromBytes4type_Sixm_SitlF<\/USR><Declaration>@inlinable public func fromBytes&lt;T&gt;(type: T.Type, _ value: Int) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Calculate the number of instances of a given datatype will occupy a given number of bytes. For example, if given a type of <codeVoice>Int64.self<\/codeVoice> and a byte count of 16 then this function will return a value of 2.<\/Para><\/Abstract><Parameters><Parameter><Name>type<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The target datatype.<\/Para><\/Discussion><\/Parameter><Parameter><Name>value<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of bytes.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The number of instances of the datatype that can occupy the given number of bytes.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 501,
      "key.doc.name": "fromBytes(type:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The target datatype."
            }
          ],
          "name": "type"
        },
        {
          "discussion" : [
            {
              "Para" : "The number of bytes."
            }
          ],
          "name": "value"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The number of instances of the datatype that can occupy the given number of bytes."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 408,
      "key.docline": 493,
      "key.docoffset": 24232,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>fromBytes<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon9fromBytes4type_Sixm_SitlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>type<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon9fromBytes4type_Sixm_SitlF1TL_xmfp\">T<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 120,
      "key.line": 501,
      "key.name": "fromBytes(type:_:)",
      "key.namecolumn": 24,
      "key.namelength": 40,
      "key.nameline": 501,
      "key.nameoffset": 24663,
      "key.offset": 24658,
      "key.parsed_declaration": "@inlinable public func fromBytes<T>(type: T.Type, _ value: Int) -> Int",
      "key.parsed_scope.end": 501,
      "key.parsed_scope.start": 501,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T<\/Declaration>",
          "key.column": 34,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 1,
          "key.line": 501,
          "key.name": "T",
          "key.namecolumn": 34,
          "key.namelength": 1,
          "key.nameline": 501,
          "key.nameoffset": 24673,
          "key.offset": 24673,
          "key.parsed_declaration": "@inlinable public func fromBytes<T",
          "key.parsed_scope.end": 501,
          "key.parsed_scope.start": 501,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon9fromBytes4type_Sixm_SitlF1TL_xmfp"
        }
      ],
      "key.typename" : "<T> (type: T.Type, Int) -> Int",
      "key.typeusr" : "$s4type_Sixm_SitcluD",
      "key.usr" : "s:7Rubicon9fromBytes4type_Sixm_SitlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func toBytes&lt;T&gt;(type: <Type usr=\"s:7Rubicon7toBytes4type_Sixm_SitlF1TL_xmfp\">T<\/Type>.Type, _ value: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 512,
          "key.offset": 25312
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 512,
          "key.offset": 25301
        }
      ],
      "key.bodycolumn": 71,
      "key.bodylength": 65,
      "key.bodyline": 512,
      "key.bodyoffset": 25371,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Calculate the number of bytes that make up a given number of instances of the given datatype. For example if\ngiven a datatype of `Int64.self` and a count of 2 then this function will return 16.\n\n- Parameters:\n  - type: The target datatype.\n  - value: The number of instances of the datatype.\n- Returns: The number of bytes that make up that many instances of that datatype.",
      "key.doc.declaration": "@inlinable public func toBytes<T>(type: T.Type, _ value: Int) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"512\" column=\"24\"><Name>toBytes(type:_:)<\/Name><USR>s:7Rubicon7toBytes4type_Sixm_SitlF<\/USR><Declaration>@inlinable public func toBytes&lt;T&gt;(type: T.Type, _ value: Int) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Calculate the number of bytes that make up a given number of instances of the given datatype. For example if given a datatype of <codeVoice>Int64.self<\/codeVoice> and a count of 2 then this function will return 16.<\/Para><\/Abstract><Parameters><Parameter><Name>type<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The target datatype.<\/Para><\/Discussion><\/Parameter><Parameter><Name>value<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of instances of the datatype.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The number of bytes that make up that many instances of that datatype.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 512,
      "key.doc.name": "toBytes(type:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The target datatype."
            }
          ],
          "name": "type"
        },
        {
          "discussion" : [
            {
              "Para" : "The number of instances of the datatype."
            }
          ],
          "name": "value"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The number of bytes that make up that many instances of that datatype."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 406,
      "key.docline": 504,
      "key.docoffset": 24895,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>toBytes<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon7toBytes4type_Sixm_SitlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>type<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon7toBytes4type_Sixm_SitlF1TL_xmfp\">T<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 118,
      "key.line": 512,
      "key.name": "toBytes(type:_:)",
      "key.namecolumn": 24,
      "key.namelength": 38,
      "key.nameline": 512,
      "key.nameoffset": 25324,
      "key.offset": 25319,
      "key.parsed_declaration": "@inlinable public func toBytes<T>(type: T.Type, _ value: Int) -> Int",
      "key.parsed_scope.end": 512,
      "key.parsed_scope.start": 512,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>T<\/Declaration>",
          "key.column": 32,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 1,
          "key.line": 512,
          "key.name": "T",
          "key.namecolumn": 32,
          "key.namelength": 1,
          "key.nameline": 512,
          "key.nameoffset": 25332,
          "key.offset": 25332,
          "key.parsed_declaration": "@inlinable public func toBytes<T",
          "key.parsed_scope.end": 512,
          "key.parsed_scope.start": 512,
          "key.typename": "T.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon7toBytes4type_Sixm_SitlF1TL_xmfp"
        }
      ],
      "key.typename" : "<T> (type: T.Type, Int) -> Int",
      "key.typeusr" : "$s4type_Sixm_SitcluD",
      "key.usr" : "s:7Rubicon7toBytes4type_Sixm_SitlF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func debug(_ obj: Any..., separator: <Type usr=\"s:SS\">String<\/Type> = &quot; &quot;, terminator: <Type usr=\"s:SS\">String<\/Type>? = nil)<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 523,
          "key.offset": 26023
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 523,
          "key.offset": 26012
        }
      ],
      "key.bodycolumn": 98,
      "key.bodylength": 100,
      "key.bodyline": 523,
      "key.bodyoffset": 26109,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Output debugging text. This method only produces output when the code is compiled with a `-DDEBUG` flag.\n\n- Parameters:\n  - obj: The objects to print. They are converted to string with `String(describing:)`.\n  - separator: The string to put between objects. Defaults to a single space character.\n  - terminator: The string to put at the end of all the objects. Defaults to a single line-feed (`\\n`)\n                character.",
      "key.doc.declaration": "@inlinable public func debug(_ obj: Any..., separator: String = \" \", terminator: String? = nil)",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"523\" column=\"24\"><Name>debug(_:separator:terminator:)<\/Name><USR>s:7Rubicon5debug_9separator10terminatoryypd_S2SSgtF<\/USR><Declaration>@inlinable public func debug(_ obj: Any..., separator: String = &quot; &quot;, terminator: String? = nil)<\/Declaration><CommentParts><Abstract><Para>Output debugging text. This method only produces output when the code is compiled with a <codeVoice>-DDEBUG<\/codeVoice> flag.<\/Para><\/Abstract><Parameters><Parameter><Name>obj<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The objects to print. They are converted to string with <codeVoice>String(describing:)<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><Parameter><Name>separator<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to put between objects. Defaults to a single space character.<\/Para><\/Discussion><\/Parameter><Parameter><Name>terminator<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to put at the end of all the objects. Defaults to a single line-feed (<codeVoice>\\n<\/codeVoice>) character.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
      "key.doc.line": 523,
      "key.doc.name": "debug(_:separator:terminator:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The objects to print. They are converted to string with `String(describing:)`."
            }
          ],
          "name": "obj"
        },
        {
          "discussion" : [
            {
              "Para" : "The string to put between objects. Defaults to a single space character."
            }
          ],
          "name" : "separator"
        },
        {
          "discussion": [
            {
              "Para": "The string to put at the end of all the objects. Defaults to a single line-feed (`\\n`) character."
            }
          ],
          "name": "terminator"
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 458,
      "key.docline": 515,
      "key.docoffset": 25554,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>debug<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>obj<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type>...<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>separator<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type> = &quot; &quot;<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>terminator<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>)<\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 180,
      "key.line": 523,
      "key.name": "debug(_:separator:terminator:)",
      "key.namecolumn": 24,
      "key.namelength": 72,
      "key.nameline": 523,
      "key.nameoffset": 26035,
      "key.offset": 26030,
      "key.parsed_declaration": "@inlinable public func debug(_ obj: Any..., separator: String = \" \", terminator: String? = nil)",
      "key.parsed_scope.end": 526,
      "key.parsed_scope.start": 523,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon5debug_9separator10terminatorySayypG_S2SSgtF\">debug(_: [Any], separator: String = &quot; &quot;, terminator: String? = nil)<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>let _obj: [Any]<\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>_obj<\/decl.name>: <decl.var.type>[<syntaxtype.keyword>Any<\/syntaxtype.keyword>]<\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 32,
          "key.line": 524,
          "key.name": "_obj",
          "key.namecolumn": 9,
          "key.namelength": 4,
          "key.nameline": 524,
          "key.nameoffset": 26118,
          "key.offset": 26114,
          "key.parsed_declaration": "let _obj: [Any] = obj.map { $0 }",
          "key.parsed_scope.end": 524,
          "key.parsed_scope.start": 524,
          "key.typename": "[Any]",
          "key.typeusr": "$sSayypGD",
          "key.usr": "s:7Rubicon5debug_9separator10terminatoryypd_S2SSgtF4_objL_SayypGvp"
        }
      ],
      "key.typename" : "(Any..., String, String?) -> ()",
      "key.typeusr" : "$s_9separator10terminatoryypd_S2SSgtcD",
      "key.usr" : "s:7Rubicon5debug_9separator10terminatoryypd_S2SSgtF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func debug(_ obj: [Any], separator: <Type usr=\"s:SS\">String<\/Type> = &quot; &quot;, terminator: <Type usr=\"s:SS\">String<\/Type>? = nil)<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 537,
          "key.offset": 26808
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 537,
          "key.offset": 26797
        }
      ],
      "key.bodycolumn": 97,
      "key.bodylength": 501,
      "key.bodyline": 537,
      "key.bodyoffset": 26893,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Output debugging text. This method only produces output when the code is compiled with a `-DDEBUG` flag.\n\n- Parameters:\n  - obj: The objects to print. They are converted to string with `String(describing:)`.\n  - separator: The string to put between objects. Defaults to a single space character.\n  - terminator: The string to put at the end of all the objects. Defaults to a single, platform dependent\n                new-line character.",
      "key.doc.declaration": "@inlinable public func debug(_ obj: [Any], separator: String = \" \", terminator: String? = nil)",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"537\" column=\"24\"><Name>debug(_:separator:terminator:)<\/Name><USR>s:7Rubicon5debug_9separator10terminatorySayypG_S2SSgtF<\/USR><Declaration>@inlinable public func debug(_ obj: [Any], separator: String = &quot; &quot;, terminator: String? = nil)<\/Declaration><CommentParts><Abstract><Para>Output debugging text. This method only produces output when the code is compiled with a <codeVoice>-DDEBUG<\/codeVoice> flag.<\/Para><\/Abstract><Parameters><Parameter><Name>obj<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The objects to print. They are converted to string with <codeVoice>String(describing:)<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><Parameter><Name>separator<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to put between objects. Defaults to a single space character.<\/Para><\/Discussion><\/Parameter><Parameter><Name>terminator<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to put at the end of all the objects. Defaults to a single, platform dependent new-line character.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
      "key.doc.line": 537,
      "key.doc.name": "debug(_:separator:terminator:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The objects to print. They are converted to string with `String(describing:)`."
            }
          ],
          "name": "obj"
        },
        {
          "discussion" : [
            {
              "Para" : "The string to put between objects. Defaults to a single space character."
            }
          ],
          "name" : "separator"
        },
        {
          "discussion": [
            {
              "Para": "The string to put at the end of all the objects. Defaults to a single, platform dependent new-line character."
            }
          ],
          "name": "terminator"
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 470,
      "key.docline": 529,
      "key.docoffset": 26327,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>debug<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>obj<\/decl.var.parameter.name>: <decl.var.parameter.type>[<syntaxtype.keyword>Any<\/syntaxtype.keyword>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>separator<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type> = &quot; &quot;<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>terminator<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>)<\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 580,
      "key.line": 537,
      "key.name": "debug(_:separator:terminator:)",
      "key.namecolumn": 24,
      "key.namelength": 71,
      "key.nameline": 537,
      "key.nameoffset": 26820,
      "key.offset": 26815,
      "key.parsed_declaration": "@inlinable public func debug(_ obj: [Any], separator: String = \" \", terminator: String? = nil)",
      "key.parsed_scope.end": 553,
      "key.parsed_scope.start": 537,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon5debug_9separator10terminatoryypd_S2SSgtF\">debug(_: Any..., separator: String = &quot; &quot;, terminator: String? = nil)<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.column": 13,
          "key.internal_diagnostic": "Unable to resolve cursor info.",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 41,
          "key.line": 540,
          "key.name": "term",
          "key.namecolumn": 17,
          "key.namelength": 4,
          "key.nameline": 540,
          "key.nameoffset": 26948,
          "key.offset": 26944,
          "key.typename": "String"
        },
        {
          "key.annotated_decl": "<Declaration>let term: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 13,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>term<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 39,
          "key.line": 542,
          "key.name": "term",
          "key.namecolumn": 17,
          "key.namelength": 4,
          "key.nameline": 542,
          "key.nameoffset": 27016,
          "key.offset": 27012,
          "key.parsed_declaration": "let term: String = (terminator ?? \"\\n\")",
          "key.parsed_scope.end": 542,
          "key.parsed_scope.start": 542,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon5debug_9separator10terminatorySayypG_S2SSgtF4termL0_SSvp"
        }
      ],
      "key.typename" : "([Any], String, String?) -> ()",
      "key.typeusr" : "$s_9separator10terminatorySayypG_S2SSgtcD",
      "key.usr" : "s:7Rubicon5debug_9separator10terminatorySayypG_S2SSgtF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.private",
      "key.annotated_decl" : "<Declaration>private var nestLevel: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.private",
          "key.column": 1,
          "key.length": 7,
          "key.line": 555,
          "key.offset": 27397
        }
      ],
      "key.column": 9,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>nestLevel<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind": "source.lang.swift.decl.var.global",
      "key.length": 28,
      "key.line": 555,
      "key.name": "nestLevel",
      "key.namecolumn": 13,
      "key.namelength": 9,
      "key.nameline": 555,
      "key.nameoffset": 27409,
      "key.offset": 27405,
      "key.parsed_declaration": "private var nestLevel: Int       = 0",
      "key.parsed_scope.end": 555,
      "key.parsed_scope.start": 555,
      "key.setter_accessibility": "source.lang.swift.accessibility.private",
      "key.typename": "Int",
      "key.typeusr": "$sSiD",
      "key.usr": "s:7Rubicon9nestLevel33_2B0369BB724C95CADF972114F9F1B513LLSivp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.private",
      "key.annotated_decl" : "<Declaration>private let nestLock: <Type usr=\"s:7Rubicon9MutexLocka\">MutexLock<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.private",
          "key.column": 1,
          "key.length": 7,
          "key.line": 556,
          "key.offset": 27434
        }
      ],
      "key.column": 9,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>nestLock<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon9MutexLocka\">MutexLock<\/ref.typealias><\/decl.var.type><\/decl.var.global>",
      "key.kind": "source.lang.swift.decl.var.global",
      "key.length": 38,
      "key.line": 556,
      "key.name": "nestLock",
      "key.namecolumn": 13,
      "key.namelength": 8,
      "key.nameline": 556,
      "key.nameoffset": 27446,
      "key.offset": 27442,
      "key.parsed_declaration": "private let nestLock:  MutexLock = MutexLock()",
      "key.parsed_scope.end": 556,
      "key.parsed_scope.start": 556,
      "key.typename": "NSLock",
      "key.typeusr": "$sSo6NSLockCD",
      "key.usr": "s:7Rubicon8nestLock33_2B0369BB724C95CADF972114F9F1B513LLSo6NSLockCvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public enum NestType<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 561,
          "key.offset": 27645
        }
      ],
      "key.bodycolumn": 23,
      "key.bodylength": 20,
      "key.bodyline": 561,
      "key.bodyoffset": 27667,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Enum used with `nDebug(_:_:separator:)`",
      "key.doc.declaration": "public enum NestType",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"561\" column=\"13\"><Name>NestType<\/Name><USR>s:7Rubicon8NestTypeO<\/USR><Declaration>public enum NestType<\/Declaration><CommentParts><Abstract><Para>Enum used with <codeVoice>nDebug(_:_:separator:)<\/codeVoice><\/Para><\/Abstract><\/CommentParts><\/Other>",
      "key.doc.line": 561,
      "key.doc.name": "NestType",
      "key.doc.type": "Other",
      "key.doccolumn": 1,
      "key.doclength": 48,
      "key.docline": 559,
      "key.docoffset": 27597,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>NestType<\/decl.name><\/decl.enum>",
      "key.kind": "source.lang.swift.decl.enum",
      "key.length": 36,
      "key.line": 561,
      "key.name": "NestType",
      "key.namecolumn": 13,
      "key.namelength": 8,
      "key.nameline": 561,
      "key.nameoffset": 27657,
      "key.offset": 27652,
      "key.parsed_declaration": "public enum NestType",
      "key.parsed_scope.end": 561,
      "key.parsed_scope.start": 561,
      "key.substructure": [
        {
          "key.column": 24,
          "key.kind": "source.lang.swift.decl.enumcase",
          "key.length": 18,
          "key.line": 561,
          "key.namelength": 0,
          "key.nameoffset": 0,
          "key.offset": 27668,
          "key.substructure": [
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>case None<\/Declaration>",
              "key.column": 29,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
              "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>None<\/decl.name><\/decl.enumelement>",
              "key.kind": "source.lang.swift.decl.enumelement",
              "key.length": 4,
              "key.line": 561,
              "key.name": "None",
              "key.namecolumn": 29,
              "key.namelength": 4,
              "key.nameline": 561,
              "key.nameoffset": 27673,
              "key.offset": 27673,
              "key.parsed_declaration": "public enum NestType { case None",
              "key.parsed_scope.end": 561,
              "key.parsed_scope.start": 561,
              "key.typename": "(NestType.Type) -> NestType",
              "key.typeusr": "$sy7Rubicon8NestTypeOACmcD",
              "key.usr": "s:7Rubicon8NestTypeO4NoneyA2CmF"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>case In<\/Declaration>",
              "key.column": 35,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
              "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>In<\/decl.name><\/decl.enumelement>",
              "key.kind": "source.lang.swift.decl.enumelement",
              "key.length": 2,
              "key.line": 561,
              "key.name": "In",
              "key.namecolumn": 35,
              "key.namelength": 2,
              "key.nameline": 561,
              "key.nameoffset": 27679,
              "key.offset": 27679,
              "key.parsed_declaration": "public enum NestType { case None, In",
              "key.parsed_scope.end": 561,
              "key.parsed_scope.start": 561,
              "key.typename": "(NestType.Type) -> NestType",
              "key.typeusr": "$sy7Rubicon8NestTypeOACmcD",
              "key.usr": "s:7Rubicon8NestTypeO2InyA2CmF"
            },
            {
              "key.accessibility": "source.lang.swift.accessibility.public",
              "key.annotated_decl": "<Declaration>case Out<\/Declaration>",
              "key.column": 39,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
              "key.fully_annotated_decl": "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Out<\/decl.name><\/decl.enumelement>",
              "key.kind": "source.lang.swift.decl.enumelement",
              "key.length": 3,
              "key.line": 561,
              "key.name": "Out",
              "key.namecolumn": 39,
              "key.namelength": 3,
              "key.nameline": 561,
              "key.nameoffset": 27683,
              "key.offset": 27683,
              "key.parsed_declaration": "public enum NestType { case None, In, Out",
              "key.parsed_scope.end": 561,
              "key.parsed_scope.start": 561,
              "key.typename": "(NestType.Type) -> NestType",
              "key.typeusr": "$sy7Rubicon8NestTypeOACmcD",
              "key.usr": "s:7Rubicon8NestTypeO3OutyA2CmF"
            }
          ]
        }
      ],
      "key.typename" : "NestType.Type",
      "key.typeusr" : "$s7Rubicon8NestTypeOmD",
      "key.usr" : "s:7Rubicon8NestTypeO"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.private",
      "key.annotated_decl" : "<Declaration>private func nDebugIndent(_ count: <Type usr=\"s:Si\">Int<\/Type>, _ string: inout <Type usr=\"s:SS\">String<\/Type>, _ msg: <Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.private",
          "key.column": 1,
          "key.length": 7,
          "key.line": 563,
          "key.offset": 27690
        }
      ],
      "key.bodycolumn": 81,
      "key.bodylength": 77,
      "key.bodyline": 563,
      "key.bodyoffset": 27770,
      "key.column": 9,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>nDebugIndent<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>count<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>string<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>msg<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 150,
      "key.line": 563,
      "key.name": "nDebugIndent(_:_:_:)",
      "key.namecolumn": 14,
      "key.namelength": 65,
      "key.nameline": 563,
      "key.nameoffset": 27703,
      "key.offset": 27698,
      "key.parsed_declaration": "private func nDebugIndent(_ count: Int, _ string: inout String, _ msg: String)",
      "key.parsed_scope.end": 566,
      "key.parsed_scope.start": 563,
      "key.substructure": [
      ],
      "key.typename": "(Int, inout String, String) -> ()",
      "key.typeusr": "$syySi_SSzSStcD",
      "key.usr": "s:7Rubicon12nDebugIndent33_2B0369BB724C95CADF972114F9F1B513LLyySi_SSzSStF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func nDebug(_ nestType: <Type usr=\"s:7Rubicon8NestTypeO\">NestType<\/Type> = .None, _ obj: Any..., separator: <Type usr=\"s:SS\">String<\/Type> = &quot; &quot;)<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 579,
          "key.offset": 28587
        }
      ],
      "key.bodycolumn": 91,
      "key.bodylength": 860,
      "key.bodyline": 579,
      "key.bodyoffset": 28677,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Output debugging text. This method only produces output when the code is compiled with a `-DDEBUG` flag. This\nmethod outputs text in a nested fashion. Calling this method with NestType.In increases the nesting level.\nCalling this method with NestType.Out decreases the nesting level. Calling this method with NestType.None\nkeeps the nesting level the same.\n\n- Parameters:\n  - nestType: The nesting type.\n  - obj: The objects to print. They are converted to a string with `String(describing:)`.\n  - separator: The string to put between objects. Defaults to a single space character.",
      "key.doc.declaration": "public func nDebug(_ nestType: NestType = .None, _ obj: Any..., separator: String = \" \")",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"579\" column=\"13\"><Name>nDebug(_:_:separator:)<\/Name><USR>s:7Rubicon6nDebug__9separatoryAA8NestTypeO_ypdSStF<\/USR><Declaration>public func nDebug(_ nestType: NestType = .None, _ obj: Any..., separator: String = &quot; &quot;)<\/Declaration><CommentParts><Abstract><Para>Output debugging text. This method only produces output when the code is compiled with a <codeVoice>-DDEBUG<\/codeVoice> flag. This method outputs text in a nested fashion. Calling this method with NestType.In increases the nesting level. Calling this method with NestType.Out decreases the nesting level. Calling this method with NestType.None keeps the nesting level the same.<\/Para><\/Abstract><Parameters><Parameter><Name>nestType<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The nesting type.<\/Para><\/Discussion><\/Parameter><Parameter><Name>obj<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The objects to print. They are converted to a string with <codeVoice>String(describing:)<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><Parameter><Name>separator<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to put between objects. Defaults to a single space character.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
      "key.doc.line": 579,
      "key.doc.name": "nDebug(_:_:separator:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The nesting type."
            }
          ],
          "name": "nestType"
        },
        {
          "discussion" : [
            {
              "Para" : "The objects to print. They are converted to a string with `String(describing:)`."
            }
          ],
          "name" : "obj"
        },
        {
          "discussion": [
            {
              "Para": "The string to put between objects. Defaults to a single space character."
            }
          ],
          "name": "separator"
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 622,
      "key.docline": 569,
      "key.docoffset": 27965,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>nDebug<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>nestType<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:7Rubicon8NestTypeO\">NestType<\/ref.enum><\/decl.var.parameter.type> = .None<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>obj<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type>...<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>separator<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type> = &quot; &quot;<\/decl.var.parameter>)<\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 944,
      "key.line": 579,
      "key.name": "nDebug(_:_:separator:)",
      "key.namecolumn": 13,
      "key.namelength": 76,
      "key.nameline": 579,
      "key.nameoffset": 28599,
      "key.offset": 28594,
      "key.parsed_declaration": "public func nDebug(_ nestType: NestType = .None, _ obj: Any..., separator: String = \" \")",
      "key.parsed_scope.end": 603,
      "key.parsed_scope.start": 579,
      "key.substructure": [
      ],
      "key.typename": "(NestType, Any..., String) -> ()",
      "key.typeusr": "$s__9separatory7Rubicon8NestTypeO_ypdSStcD",
      "key.usr": "s:7Rubicon6nDebug__9separatoryAA8NestTypeO_ypdSStF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func HashOfAnything(_ v: Any) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 611,
          "key.offset": 29797
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 611,
          "key.offset": 29786
        }
      ],
      "key.bodycolumn": 57,
      "key.bodylength": 122,
      "key.bodyline": 611,
      "key.bodyoffset": 29842,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Get a hash value from just about anything.\n\n- Parameter v: The item you want the hash of.\n- Returns: The hash.",
      "key.doc.declaration": "@inlinable public func HashOfAnything(_ v: Any) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"611\" column=\"24\"><Name>HashOfAnything(_:)<\/Name><USR>s:7Rubicon14HashOfAnythingySiypF<\/USR><Declaration>@inlinable public func HashOfAnything(_ v: Any) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Get a hash value from just about anything.<\/Para><\/Abstract><Parameters><Parameter><Name>v<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The item you want the hash of.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The hash.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 611,
      "key.doc.name": "HashOfAnything(_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The item you want the hash of."
            }
          ],
          "name": "v"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The hash."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 131,
      "key.docline": 606,
      "key.docoffset": 29655,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>HashOfAnything<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>v<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 161,
      "key.line": 611,
      "key.name": "HashOfAnything(_:)",
      "key.namecolumn": 24,
      "key.namelength": 24,
      "key.nameline": 611,
      "key.nameoffset": 29809,
      "key.offset": 29804,
      "key.parsed_declaration": "@inlinable public func HashOfAnything(_ v: Any) -> Int",
      "key.parsed_scope.end": 614,
      "key.parsed_scope.start": 611,
      "key.substructure": [
      ],
      "key.typename": "(Any) -> Int",
      "key.typeusr": "$sySiypcD",
      "key.usr": "s:7Rubicon14HashOfAnythingySiypF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func execute(exec: <Type usr=\"s:SS\">String<\/Type>, args: [<Type usr=\"s:SS\">String<\/Type>], stdin: <Type usr=\"s:10Foundation4DataV\">Data<\/Type>, stdout: inout <Type usr=\"s:10Foundation4DataV\">Data<\/Type>, stderr: inout <Type usr=\"s:10Foundation4DataV\">Data<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 627,
          "key.offset": 30529
        }
      ],
      "key.bodycolumn": 112,
      "key.bodylength": 300,
      "key.bodyline": 627,
      "key.bodyoffset": 30640,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Execute a program and capture it's output.\n\n- Parameters:\n  - exec: The program to execute.\n  - args: The command line arguments for the program.\n  - stdin: Data to be provided to the program on stdin.\n  - stdout: The instance of Data to receive the standard output.\n  - stderr: The instance of Data to receive the standard error.\n- Returns: The numeric exit status code returned from the executed program.",
      "key.doc.declaration": "public func execute(exec: String, args: [String], stdin: Data, stdout: inout Data, stderr: inout Data) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"627\" column=\"13\"><Name>execute(exec:args:stdin:stdout:stderr:)<\/Name><USR>s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAKzAKztF<\/USR><Declaration>public func execute(exec: String, args: [String], stdin: Data, stdout: inout Data, stderr: inout Data) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Execute a program and capture it’s output.<\/Para><\/Abstract><Parameters><Parameter><Name>exec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The program to execute.<\/Para><\/Discussion><\/Parameter><Parameter><Name>args<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The command line arguments for the program.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdin<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Data to be provided to the program on stdin.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdout<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The instance of Data to receive the standard output.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stderr<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The instance of Data to receive the standard error.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The numeric exit status code returned from the executed program.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 627,
      "key.doc.name": "execute(exec:args:stdin:stdout:stderr:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The program to execute."
            }
          ],
          "name": "exec"
        },
        {
          "discussion" : [
            {
              "Para" : "The command line arguments for the program."
            }
          ],
          "name" : "args"
        },
        {
          "discussion" : [
            {
              "Para" : "Data to be provided to the program on stdin."
            }
          ],
          "name" : "stdin"
        },
        {
          "discussion" : [
            {
              "Para" : "The instance of Data to receive the standard output."
            }
          ],
          "name" : "stdout"
        },
        {
          "discussion" : [
            {
              "Para" : "The instance of Data to receive the standard error."
            }
          ],
          "name": "stderr"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The numeric exit status code returned from the executed program."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 447,
      "key.docline": 617,
      "key.docoffset": 30082,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>execute<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>exec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>args<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdin<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdout<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stderr<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 405,
      "key.line": 627,
      "key.name": "execute(exec:args:stdin:stdout:stderr:)",
      "key.namecolumn": 13,
      "key.namelength": 90,
      "key.nameline": 627,
      "key.nameoffset": 30541,
      "key.offset": 30536,
      "key.parsed_declaration": "public func execute(exec: String, args: [String], stdin: Data, stdout: inout Data, stderr: inout Data) -> Int",
      "key.parsed_scope.end": 632,
      "key.parsed_scope.start": 627,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: String, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF\">execute(exec:args:stdin:stdout:encoding:discardStderr:)<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin13discardOutputSiSS_SaySSGypSgSbtF\">execute(exec:args:stdin:discardOutput:)<\/RelatedName>"
        }
      ],
      "key.substructure" : [
        {
          "key.annotated_decl": "<Declaration>let pipeIn: <Type usr=\"c:objc(cs)NSPipe\">Pipe<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pipeIn<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSPipe\">Pipe<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 25,
          "key.line": 628,
          "key.name": "pipeIn",
          "key.namecolumn": 9,
          "key.namelength": 6,
          "key.nameline": 628,
          "key.nameoffset": 30649,
          "key.offset": 30645,
          "key.parsed_declaration": "let pipeIn: Pipe = Pipe()",
          "key.parsed_scope.end": 628,
          "key.parsed_scope.start": 628,
          "key.typename": "Pipe",
          "key.typeusr": "$sSo6NSPipeCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAKzAKztF6pipeInL_So6NSPipeCvp"
        },
        {
          "key.annotated_decl": "<Declaration>let thread: <Type usr=\"c:@M@Rubicon@objc(cs)PGThread\">PGThread<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>thread<\/decl.name>: <decl.var.type><ref.class usr=\"c:@M@Rubicon@objc(cs)PGThread\">PGThread<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 153,
          "key.line": 629,
          "key.name": "thread",
          "key.namecolumn": 9,
          "key.namelength": 6,
          "key.nameline": 629,
          "key.nameoffset": 30679,
          "key.offset": 30675,
          "key.parsed_declaration": "let thread = PGThread(startNow: false, qualityOfService: .utility) { pipeIn.fileHandleForWriting.write(stdin); try? pipeIn.fileHandleForWriting.close() }",
          "key.parsed_scope.end": 629,
          "key.parsed_scope.start": 629,
          "key.typename": "PGThread",
          "key.typeusr": "$s7Rubicon8PGThreadCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAKzAKztF6threadL_AA8PGThreadCvp"
        }
      ],
      "key.typename" : "(String, [String], Data, inout Data, inout Data) -> Int",
      "key.typeusr" : "$s4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAIzAIztcD",
      "key.usr" : "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAKzAKztF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func execute(exec: <Type usr=\"s:SS\">String<\/Type>, args: [<Type usr=\"s:SS\">String<\/Type>], stdin: Any? = nil, stdout: inout <Type usr=\"s:10Foundation4DataV\">Data<\/Type>, stderr: inout <Type usr=\"s:10Foundation4DataV\">Data<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 645,
          "key.offset": 31534
        }
      ],
      "key.bodycolumn": 118,
      "key.bodylength": 1051,
      "key.bodyline": 645,
      "key.bodyoffset": 31651,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Execute a program and capture it's output.\n\n- Parameters:\n  - exec: The program to execute.\n  - args: The command line arguments for the program.\n  - stdin: A `Pipe` or `FileHandle` that will provide input to the program on stdin.\n  - stdout: The instance of Data to receive the standard output.\n  - stderr: The instance of Data to receive the standard error.\n- Returns: The numeric exit status code returned from the executed program.",
      "key.doc.declaration": "public func execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout Data, stderr: inout Data) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"645\" column=\"13\"><Name>execute(exec:args:stdin:stdout:stderr:)<\/Name><USR>s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF<\/USR><Declaration>public func execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout Data, stderr: inout Data) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Execute a program and capture it’s output.<\/Para><\/Abstract><Parameters><Parameter><Name>exec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The program to execute.<\/Para><\/Discussion><\/Parameter><Parameter><Name>args<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The command line arguments for the program.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdin<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A <codeVoice>Pipe<\/codeVoice> or <codeVoice>FileHandle<\/codeVoice> that will provide input to the program on stdin.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdout<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The instance of Data to receive the standard output.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stderr<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The instance of Data to receive the standard error.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The numeric exit status code returned from the executed program.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 645,
      "key.doc.name": "execute(exec:args:stdin:stdout:stderr:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The program to execute."
            }
          ],
          "name": "exec"
        },
        {
          "discussion" : [
            {
              "Para" : "The command line arguments for the program."
            }
          ],
          "name" : "args"
        },
        {
          "discussion" : [
            {
              "Para" : "A `Pipe` or `FileHandle` that will provide input to the program on stdin."
            }
          ],
          "name" : "stdin"
        },
        {
          "discussion" : [
            {
              "Para" : "The instance of Data to receive the standard output."
            }
          ],
          "name" : "stdout"
        },
        {
          "discussion" : [
            {
              "Para" : "The instance of Data to receive the standard error."
            }
          ],
          "name": "stderr"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The numeric exit status code returned from the executed program."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 476,
      "key.docline": 635,
      "key.docoffset": 31058,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>execute<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>exec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>args<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdin<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdout<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stderr<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 1162,
      "key.line": 645,
      "key.name": "execute(exec:args:stdin:stdout:stderr:)",
      "key.namecolumn": 13,
      "key.namelength": 96,
      "key.nameline": 645,
      "key.nameoffset": 31546,
      "key.offset": 31541,
      "key.parsed_declaration": "public func execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout Data, stderr: inout Data) -> Int",
      "key.parsed_scope.end": 672,
      "key.parsed_scope.start": 645,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAKzAKztF\">execute(exec: String, args: [String], stdin: Data, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: String, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF\">execute(exec:args:stdin:stdout:encoding:discardStderr:)<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin13discardOutputSiSS_SaySSGypSgSbtF\">execute(exec:args:stdin:discardOutput:)<\/RelatedName>"
        }
      ],
      "key.substructure" : [
        {
          "key.annotated_decl": "<Declaration>var _stdout: <Type usr=\"s:10Foundation4DataV\">Data<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_stdout<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 29,
          "key.line": 646,
          "key.name": "_stdout",
          "key.namecolumn": 9,
          "key.namelength": 7,
          "key.nameline": 646,
          "key.nameoffset": 31660,
          "key.offset": 31656,
          "key.parsed_declaration": "var _stdout: Data    = Data()",
          "key.parsed_scope.end": 646,
          "key.parsed_scope.start": 646,
          "key.typename": "Data",
          "key.typeusr": "$s10Foundation4DataVD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF01_F0L_ALvp"
        },
        {
          "key.annotated_decl": "<Declaration>var _stderr: <Type usr=\"s:10Foundation4DataV\">Data<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_stderr<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 29,
          "key.line": 647,
          "key.name": "_stderr",
          "key.namecolumn": 9,
          "key.namelength": 7,
          "key.nameline": 647,
          "key.nameoffset": 31694,
          "key.offset": 31690,
          "key.parsed_declaration": "var _stderr: Data    = Data()",
          "key.parsed_scope.end": 647,
          "key.parsed_scope.start": 647,
          "key.typename": "Data",
          "key.typeusr": "$s10Foundation4DataVD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF01_G0L_ALvp"
        },
        {
          "key.annotated_decl": "<Declaration>let pipeOut: <Type usr=\"c:objc(cs)NSPipe\">Pipe<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pipeOut<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSPipe\">Pipe<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 29,
          "key.line": 648,
          "key.name": "pipeOut",
          "key.namecolumn": 9,
          "key.namelength": 7,
          "key.nameline": 648,
          "key.nameoffset": 31728,
          "key.offset": 31724,
          "key.parsed_declaration": "let pipeOut: Pipe    = Pipe()",
          "key.parsed_scope.end": 648,
          "key.parsed_scope.start": 648,
          "key.typename": "Pipe",
          "key.typeusr": "$sSo6NSPipeCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF7pipeOutL_So6NSPipeCvp"
        },
        {
          "key.annotated_decl": "<Declaration>let pipeErr: <Type usr=\"c:objc(cs)NSPipe\">Pipe<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pipeErr<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSPipe\">Pipe<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 29,
          "key.line": 649,
          "key.name": "pipeErr",
          "key.namecolumn": 9,
          "key.namelength": 7,
          "key.nameline": 649,
          "key.nameoffset": 31762,
          "key.offset": 31758,
          "key.parsed_declaration": "let pipeErr: Pipe    = Pipe()",
          "key.parsed_scope.end": 649,
          "key.parsed_scope.start": 649,
          "key.typename": "Pipe",
          "key.typeusr": "$sSo6NSPipeCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF7pipeErrL_So6NSPipeCvp"
        },
        {
          "key.annotated_decl": "<Declaration>let proc: <Type usr=\"c:objc(cs)NSTask\">Process<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>proc<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSTask\">Process<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 32,
          "key.line": 650,
          "key.name": "proc",
          "key.namecolumn": 9,
          "key.namelength": 4,
          "key.nameline": 650,
          "key.nameoffset": 31796,
          "key.offset": 31792,
          "key.parsed_declaration": "let proc:    Process = Process()",
          "key.parsed_scope.end": 650,
          "key.parsed_scope.start": 650,
          "key.typename": "Process",
          "key.typeusr": "$sSo6NSTaskCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF4procL_So6NSTaskCvp"
        },
        {
          "key.annotated_decl": "<Declaration>var error: <Type usr=\"s:s5ErrorP\">Error<\/Type>?<\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>error<\/decl.name>: <decl.var.type><ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol>?<\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 26,
          "key.line": 651,
          "key.name": "error",
          "key.namecolumn": 9,
          "key.namelength": 5,
          "key.nameline": 651,
          "key.nameoffset": 31833,
          "key.offset": 31829,
          "key.parsed_declaration": "var error:   Error?  = nil",
          "key.parsed_scope.end": 651,
          "key.parsed_scope.start": 651,
          "key.typename": "Error?",
          "key.typeusr": "$ss5Error_pSgD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF5errorL_s5Error_pSgvp"
        },
        {
          "key.annotated_decl": "<Declaration>let threadOut: <Type usr=\"c:@M@Rubicon@objc(cs)PGThread\">PGThread<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>threadOut<\/decl.name>: <decl.var.type><ref.class usr=\"c:@M@Rubicon@objc(cs)PGThread\">PGThread<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 176,
          "key.line": 664,
          "key.name": "threadOut",
          "key.namecolumn": 9,
          "key.namelength": 9,
          "key.nameline": 664,
          "key.nameoffset": 32200,
          "key.offset": 32196,
          "key.parsed_declaration": "let threadOut = PGThread(startNow: true, qualityOfService: .utility) { _stdout = pipeOut.fileHandleForReading.readDataToEndOfFile(); try? pipeOut.fileHandleForReading.close() }",
          "key.parsed_scope.end": 664,
          "key.parsed_scope.start": 664,
          "key.typename": "PGThread",
          "key.typeusr": "$s7Rubicon8PGThreadCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF9threadOutL_AA8PGThreadCvp"
        },
        {
          "key.annotated_decl": "<Declaration>let threadErr: <Type usr=\"c:@M@Rubicon@objc(cs)PGThread\">PGThread<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>threadErr<\/decl.name>: <decl.var.type><ref.class usr=\"c:@M@Rubicon@objc(cs)PGThread\">PGThread<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 176,
          "key.line": 665,
          "key.name": "threadErr",
          "key.namecolumn": 9,
          "key.namelength": 9,
          "key.nameline": 665,
          "key.nameoffset": 32381,
          "key.offset": 32377,
          "key.parsed_declaration": "let threadErr = PGThread(startNow: true, qualityOfService: .utility) { _stderr = pipeErr.fileHandleForReading.readDataToEndOfFile(); try? pipeErr.fileHandleForReading.close() }",
          "key.parsed_scope.end": 665,
          "key.parsed_scope.start": 665,
          "key.typename": "PGThread",
          "key.typeusr": "$s7Rubicon8PGThreadCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF9threadErrL_AA8PGThreadCvp"
        }
      ],
      "key.typename" : "(String, [String], Any?, inout Data, inout Data) -> Int",
      "key.typeusr" : "$s4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzAJztcD",
      "key.usr" : "s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func execute(exec: <Type usr=\"s:SS\">String<\/Type>, args: [<Type usr=\"s:SS\">String<\/Type>], stdin: <Type usr=\"s:SS\">String<\/Type>, stdout: inout <Type usr=\"s:SS\">String<\/Type>, stderr: inout <Type usr=\"s:SS\">String<\/Type>, encoding: <Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS10FoundationE8EncodingV\">Encoding<\/Type> = .utf8) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 686,
          "key.offset": 33311
        }
      ],
      "key.bodycolumn": 153,
      "key.bodylength": 1003,
      "key.bodyline": 686,
      "key.bodyoffset": 33463,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Execute a program and capture it's output.\n\n- Parameters:\n  - exec: The program to execute.\n  - args: The command line arguments for the program.\n  - stdin: Any input to be sent to the program on stdin.\n  - stdout: The string to receive the standard output.\n  - stderr: The string to receive the standard error.\n  - encoding: The encoding of the input, output and error.\n- Returns: The numeric exit status code returned from the executed program.",
      "key.doc.declaration": "public func execute(exec: String, args: [String], stdin: String, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"686\" column=\"13\"><Name>execute(exec:args:stdin:stdout:stderr:encoding:)<\/Name><USR>s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtF<\/USR><Declaration>public func execute(exec: String, args: [String], stdin: String, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Execute a program and capture it’s output.<\/Para><\/Abstract><Parameters><Parameter><Name>exec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The program to execute.<\/Para><\/Discussion><\/Parameter><Parameter><Name>args<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The command line arguments for the program.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdin<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Any input to be sent to the program on stdin.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdout<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to receive the standard output.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stderr<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to receive the standard error.<\/Para><\/Discussion><\/Parameter><Parameter><Name>encoding<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The encoding of the input, output and error.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The numeric exit status code returned from the executed program.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 686,
      "key.doc.name": "execute(exec:args:stdin:stdout:stderr:encoding:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The program to execute."
            }
          ],
          "name": "exec"
        },
        {
          "discussion" : [
            {
              "Para" : "The command line arguments for the program."
            }
          ],
          "name" : "args"
        },
        {
          "discussion" : [
            {
              "Para" : "Any input to be sent to the program on stdin."
            }
          ],
          "name" : "stdin"
        },
        {
          "discussion" : [
            {
              "Para" : "The string to receive the standard output."
            }
          ],
          "name" : "stdout"
        },
        {
          "discussion" : [
            {
              "Para" : "The string to receive the standard error."
            }
          ],
          "name" : "stderr"
        },
        {
          "discussion" : [
            {
              "Para" : "The encoding of the input, output and error."
            }
          ],
          "name": "encoding"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The numeric exit status code returned from the executed program."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 491,
      "key.docline": 675,
      "key.docoffset": 32820,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>execute<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>exec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>args<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdin<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdout<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stderr<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>encoding<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS10FoundationE8EncodingV\">Encoding<\/ref.struct><\/decl.var.parameter.type> = .utf8<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 1149,
      "key.line": 686,
      "key.name": "execute(exec:args:stdin:stdout:stderr:encoding:)",
      "key.namecolumn": 13,
      "key.namelength": 131,
      "key.nameline": 686,
      "key.nameoffset": 33323,
      "key.offset": 33318,
      "key.parsed_declaration": "public func execute(exec: String, args: [String], stdin: String, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -> Int",
      "key.parsed_scope.end": 704,
      "key.parsed_scope.start": 686,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAKzAKztF\">execute(exec: String, args: [String], stdin: Data, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF\">execute(exec:args:stdin:stdout:encoding:discardStderr:)<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin13discardOutputSiSS_SaySSGypSgSbtF\">execute(exec:args:stdin:discardOutput:)<\/RelatedName>"
        }
      ],
      "key.substructure" : [
        {
          "key.annotated_decl": "<Declaration>let pipeIn: <Type usr=\"c:objc(cs)NSPipe\">Pipe<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pipeIn<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSPipe\">Pipe<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 19,
          "key.line": 687,
          "key.name": "pipeIn",
          "key.namecolumn": 9,
          "key.namelength": 6,
          "key.nameline": 687,
          "key.nameoffset": 33472,
          "key.offset": 33468,
          "key.parsed_declaration": "let pipeIn = Pipe()",
          "key.parsed_scope.end": 687,
          "key.parsed_scope.start": 687,
          "key.typename": "Pipe",
          "key.typeusr": "$sSo6NSPipeCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtF6pipeInL_So6NSPipeCvp"
        },
        {
          "key.annotated_decl": "<Declaration>let thread: <Type usr=\"c:@M@Rubicon@objc(cs)PGThread\">PGThread<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>thread<\/decl.name>: <decl.var.type><ref.class usr=\"c:@M@Rubicon@objc(cs)PGThread\">PGThread<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 842,
          "key.line": 688,
          "key.name": "thread",
          "key.namecolumn": 9,
          "key.namelength": 6,
          "key.nameline": 688,
          "key.nameoffset": 33496,
          "key.offset": 33492,
          "key.parsed_declaration": "let thread = PGThread(startNow: false, qualityOfService: .utility) {\n    var bytes:  [UInt8]             = Array<UInt8>(repeating: 0, count: 1024)\n    var used:   Int                 = 0\n    var range:  Range<String.Index> = (stdin.startIndex ..< stdin.startIndex)\n    var result: Bool                = stdin.getBytes(&bytes, maxLength: 1024, usedLength: &used, encoding: encoding, range: stdin.fullRange, remaining: &range)\n\n    while result {\n        pipeIn.fileHandleForWriting.write(Data(bytes: &bytes, count: used))\n        guard range.upperBound < stdin.endIndex else { break }\n        result = stdin.getBytes(&bytes, maxLength: 1024, usedLength: &used, encoding: encoding, range: (range.upperBound ..< stdin.endIndex), remaining: &range)\n    }\n\n    try? pipeIn.fileHandleForWriting.close()\n}",
          "key.parsed_scope.end": 688,
          "key.parsed_scope.start": 688,
          "key.typename": "PGThread",
          "key.typeusr": "$s7Rubicon8PGThreadCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtF6threadL_AA8PGThreadCvp"
        }
      ],
      "key.typename" : "(String, [String], String, inout String, inout String, String.Encoding) -> Int",
      "key.typeusr" : "$s4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtcD",
      "key.usr" : "s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func execute(exec: <Type usr=\"s:SS\">String<\/Type>, args: [<Type usr=\"s:SS\">String<\/Type>], stdin: Any? = nil, stdout: inout <Type usr=\"s:SS\">String<\/Type>, stderr: inout <Type usr=\"s:SS\">String<\/Type>, encoding: <Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS10FoundationE8EncodingV\">Encoding<\/Type> = .utf8) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 718,
          "key.offset": 35122
        }
      ],
      "key.bodycolumn": 157,
      "key.bodylength": 318,
      "key.bodyline": 718,
      "key.bodyoffset": 35278,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Execute a program and capture it's output.\n\n- Parameters:\n  - exec: The program to execute.\n  - args: The command line arguments for the program.\n  - stdin: A `Pipe` or `FileHandle` that will provide input to the program on stdin.\n  - stdout: The string to receive the standard output.\n  - stderr: The string to receive the standard error.\n  - encoding: The encoding to used on the standard output and standard error.\n- Returns: The numeric exit status code returned from the executed program.",
      "key.doc.declaration": "public func execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"718\" column=\"13\"><Name>execute(exec:args:stdin:stdout:stderr:encoding:)<\/Name><USR>s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF<\/USR><Declaration>public func execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Execute a program and capture it’s output.<\/Para><\/Abstract><Parameters><Parameter><Name>exec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The program to execute.<\/Para><\/Discussion><\/Parameter><Parameter><Name>args<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The command line arguments for the program.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdin<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A <codeVoice>Pipe<\/codeVoice> or <codeVoice>FileHandle<\/codeVoice> that will provide input to the program on stdin.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdout<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to receive the standard output.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stderr<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to receive the standard error.<\/Para><\/Discussion><\/Parameter><Parameter><Name>encoding<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The encoding to used on the standard output and standard error.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The numeric exit status code returned from the executed program.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 718,
      "key.doc.name": "execute(exec:args:stdin:stdout:stderr:encoding:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The program to execute."
            }
          ],
          "name": "exec"
        },
        {
          "discussion" : [
            {
              "Para" : "The command line arguments for the program."
            }
          ],
          "name" : "args"
        },
        {
          "discussion" : [
            {
              "Para" : "A `Pipe` or `FileHandle` that will provide input to the program on stdin."
            }
          ],
          "name" : "stdin"
        },
        {
          "discussion" : [
            {
              "Para" : "The string to receive the standard output."
            }
          ],
          "name" : "stdout"
        },
        {
          "discussion" : [
            {
              "Para" : "The string to receive the standard error."
            }
          ],
          "name" : "stderr"
        },
        {
          "discussion" : [
            {
              "Para" : "The encoding to used on the standard output and standard error."
            }
          ],
          "name": "encoding"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The numeric exit status code returned from the executed program."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 538,
      "key.docline": 707,
      "key.docoffset": 34584,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>execute<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>exec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>args<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdin<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdout<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stderr<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>encoding<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS10FoundationE8EncodingV\">Encoding<\/ref.struct><\/decl.var.parameter.type> = .utf8<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 468,
      "key.line": 718,
      "key.name": "execute(exec:args:stdin:stdout:stderr:encoding:)",
      "key.namecolumn": 13,
      "key.namelength": 135,
      "key.nameline": 718,
      "key.nameoffset": 35134,
      "key.offset": 35129,
      "key.parsed_declaration": "public func execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -> Int",
      "key.parsed_scope.end": 725,
      "key.parsed_scope.start": 718,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAKzAKztF\">execute(exec: String, args: [String], stdin: Data, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: String, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF\">execute(exec:args:stdin:stdout:encoding:discardStderr:)<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin13discardOutputSiSS_SaySSGypSgSbtF\">execute(exec:args:stdin:discardOutput:)<\/RelatedName>"
        }
      ],
      "key.substructure" : [
        {
          "key.annotated_decl": "<Declaration>var _stdout: <Type usr=\"s:10Foundation4DataV\">Data<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_stdout<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 27,
          "key.line": 719,
          "key.name": "_stdout",
          "key.namecolumn": 9,
          "key.namelength": 7,
          "key.nameline": 719,
          "key.nameoffset": 35287,
          "key.offset": 35283,
          "key.parsed_declaration": "var _stdout:  Data = Data()",
          "key.parsed_scope.end": 719,
          "key.parsed_scope.start": 719,
          "key.typename": "Data",
          "key.typeusr": "$s10Foundation4DataVD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF01_F0L_AK4DataVvp"
        },
        {
          "key.annotated_decl": "<Declaration>var _stderr: <Type usr=\"s:10Foundation4DataV\">Data<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_stderr<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 27,
          "key.line": 720,
          "key.name": "_stderr",
          "key.namecolumn": 9,
          "key.namelength": 7,
          "key.nameline": 720,
          "key.nameoffset": 35319,
          "key.offset": 35315,
          "key.parsed_declaration": "var _stderr:  Data = Data()",
          "key.parsed_scope.end": 720,
          "key.parsed_scope.start": 720,
          "key.typename": "Data",
          "key.typeusr": "$s10Foundation4DataVD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF01_G0L_AK4DataVvp"
        },
        {
          "key.annotated_decl": "<Declaration>let exitCode: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>exitCode<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 102,
          "key.line": 721,
          "key.name": "exitCode",
          "key.namecolumn": 9,
          "key.namelength": 8,
          "key.nameline": 721,
          "key.nameoffset": 35351,
          "key.offset": 35347,
          "key.parsed_declaration": "let exitCode: Int  = execute(exec: exec, args: args, stdin: stdin, stdout: &_stdout, stderr: &_stderr)",
          "key.parsed_scope.end": 721,
          "key.parsed_scope.start": 721,
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF8exitCodeL_Sivp"
        }
      ],
      "key.typename" : "(String, [String], Any?, inout String, inout String, String.Encoding) -> Int",
      "key.typeusr" : "$s4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtcD",
      "key.usr" : "s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func execute(exec: <Type usr=\"s:SS\">String<\/Type>, args: [<Type usr=\"s:SS\">String<\/Type>], stdin: Any? = nil, stdout: inout <Type usr=\"s:SS\">String<\/Type>, encoding: <Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS10FoundationE8EncodingV\">Encoding<\/Type> = .utf8, discardStderr: <Type usr=\"s:Sb\">Bool<\/Type> = true) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 741,
          "key.offset": 36566
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 741,
          "key.offset": 36555
        }
      ],
      "key.bodycolumn": 174,
      "key.bodylength": 408,
      "key.bodyline": 741,
      "key.bodyoffset": 36728,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Execute a program and capture it's output. Anything written to stderr by the program is discarded unless\n`discardStderr` is set to `false` in which case it is routed to the system's stderr channel.\n\n- Parameters:\n  - exec: The program to execute.\n  - args: The command line arguments for the program.\n  - stdin: A `Pipe` or `FileHandle` that will provide input to the program on stdin.\n  - stdout: The string to receive the standard output.\n  - encoding: The encoding to used on the standard output.\n  - discardStderr: If `true` (the default) then anything the program writes to stderr is discarded. If `false`\n                   then anything the program writes to stderr is sent to the system's stderr channel.\n- Returns: The numeric exit status code returned from the executed program.",
      "key.doc.declaration": "@inlinable public func execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, encoding: String.Encoding = .utf8, discardStderr: Bool = true) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"741\" column=\"24\"><Name>execute(exec:args:stdin:stdout:encoding:discardStderr:)<\/Name><USR>s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF<\/USR><Declaration>@inlinable public func execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, encoding: String.Encoding = .utf8, discardStderr: Bool = true) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Execute a program and capture it’s output. Anything written to stderr by the program is discarded unless <codeVoice>discardStderr<\/codeVoice> is set to <codeVoice>false<\/codeVoice> in which case it is routed to the system’s stderr channel.<\/Para><\/Abstract><Parameters><Parameter><Name>exec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The program to execute.<\/Para><\/Discussion><\/Parameter><Parameter><Name>args<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The command line arguments for the program.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdin<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A <codeVoice>Pipe<\/codeVoice> or <codeVoice>FileHandle<\/codeVoice> that will provide input to the program on stdin.<\/Para><\/Discussion><\/Parameter><Parameter><Name>stdout<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The string to receive the standard output.<\/Para><\/Discussion><\/Parameter><Parameter><Name>encoding<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The encoding to used on the standard output.<\/Para><\/Discussion><\/Parameter><Parameter><Name>discardStderr<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>If <codeVoice>true<\/codeVoice> (the default) then anything the program writes to stderr is discarded. If <codeVoice>false<\/codeVoice> then anything the program writes to stderr is sent to the system’s stderr channel.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The numeric exit status code returned from the executed program.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 741,
      "key.doc.name": "execute(exec:args:stdin:stdout:encoding:discardStderr:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The program to execute."
            }
          ],
          "name": "exec"
        },
        {
          "discussion" : [
            {
              "Para" : "The command line arguments for the program."
            }
          ],
          "name" : "args"
        },
        {
          "discussion" : [
            {
              "Para" : "A `Pipe` or `FileHandle` that will provide input to the program on stdin."
            }
          ],
          "name" : "stdin"
        },
        {
          "discussion" : [
            {
              "Para" : "The string to receive the standard output."
            }
          ],
          "name" : "stdout"
        },
        {
          "discussion" : [
            {
              "Para" : "The encoding to used on the standard output."
            }
          ],
          "name" : "encoding"
        },
        {
          "discussion" : [
            {
              "Para" : "If `true` (the default) then anything the program writes to stderr is discarded. If `false` then anything the program writes to stderr is sent to the system’s stderr channel."
            }
          ],
          "name": "discardStderr"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The numeric exit status code returned from the executed program."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 841,
      "key.docline": 728,
      "key.docoffset": 35714,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>execute<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>exec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>args<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdin<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdout<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>encoding<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS10FoundationE8EncodingV\">Encoding<\/ref.struct><\/decl.var.parameter.type> = .utf8<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>discardStderr<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = true<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 564,
      "key.line": 741,
      "key.name": "execute(exec:args:stdin:stdout:encoding:discardStderr:)",
      "key.namecolumn": 24,
      "key.namelength": 141,
      "key.nameline": 741,
      "key.nameoffset": 36578,
      "key.offset": 36573,
      "key.parsed_declaration": "@inlinable public func execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, encoding: String.Encoding = .utf8, discardStderr: Bool = true) -> Int",
      "key.parsed_scope.end": 752,
      "key.parsed_scope.start": 741,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAKzAKztF\">execute(exec: String, args: [String], stdin: Data, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: String, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin13discardOutputSiSS_SaySSGypSgSbtF\">execute(exec:args:stdin:discardOutput:)<\/RelatedName>"
        }
      ],
      "key.substructure" : [
        {
          "key.annotated_decl": "<Declaration>var _stdout: <Type usr=\"s:10Foundation4DataV\">Data<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_stdout<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 27,
          "key.line": 742,
          "key.name": "_stdout",
          "key.namecolumn": 9,
          "key.namelength": 7,
          "key.nameline": 742,
          "key.nameoffset": 36737,
          "key.offset": 36733,
          "key.parsed_declaration": "var _stdout:  Data = Data()",
          "key.parsed_scope.end": 742,
          "key.parsed_scope.start": 742,
          "key.typename": "Data",
          "key.typeusr": "$s10Foundation4DataVD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF01_F0L_AK4DataVvp"
        },
        {
          "key.annotated_decl": "<Declaration>var _stderr: <Type usr=\"s:10Foundation4DataV\">Data<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_stderr<\/decl.name>: <decl.var.type><ref.struct usr=\"s:10Foundation4DataV\">Data<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 27,
          "key.line": 743,
          "key.name": "_stderr",
          "key.namecolumn": 9,
          "key.namelength": 7,
          "key.nameline": 743,
          "key.nameoffset": 36769,
          "key.offset": 36765,
          "key.parsed_declaration": "var _stderr:  Data = Data()",
          "key.parsed_scope.end": 743,
          "key.parsed_scope.start": 743,
          "key.typename": "Data",
          "key.typeusr": "$s10Foundation4DataVD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF7_stderrL_AK4DataVvp"
        },
        {
          "key.annotated_decl": "<Declaration>let exitCode: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>exitCode<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 102,
          "key.line": 744,
          "key.name": "exitCode",
          "key.namecolumn": 9,
          "key.namelength": 8,
          "key.nameline": 744,
          "key.nameoffset": 36801,
          "key.offset": 36797,
          "key.parsed_declaration": "let exitCode: Int  = execute(exec: exec, args: args, stdin: stdin, stdout: &_stdout, stderr: &_stderr)",
          "key.parsed_scope.end": 744,
          "key.parsed_scope.start": 744,
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF8exitCodeL_Sivp"
        }
      ],
      "key.typename" : "(String, [String], Any?, inout String, String.Encoding, Bool) -> Int",
      "key.typeusr" : "$s4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtcD",
      "key.usr" : "s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func execute(exec: <Type usr=\"s:SS\">String<\/Type>, args: [<Type usr=\"s:SS\">String<\/Type>], stdin: Any? = nil, discardOutput: <Type usr=\"s:Sb\">Bool<\/Type> = true) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 766,
          "key.offset": 37937
        }
      ],
      "key.bodycolumn": 106,
      "key.bodylength": 452,
      "key.bodyline": 766,
      "key.bodyoffset": 38042,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Execute a program. Anything written to stderr or stdout by the program is discarded unless `discardOutput` is\nset to `false` in which case it is routed to the system's stderr and stdout channels.\n\n- Parameters:\n  - exec: The program to execute.\n  - args: The command line arguments for the program.\n  - discardOutput: If `true` (the default) then anything the program writes to stderr or stdout is discarded.\n                   If `false` then anything the program writes to stderr or stdout is sent to the system's\n                   stderr and stdout channels.\n- Returns: The numeric exit status code returned from the executed program.",
      "key.doc.declaration": "public func execute(exec: String, args: [String], stdin: Any? = nil, discardOutput: Bool = true) -> Int",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"766\" column=\"13\"><Name>execute(exec:args:stdin:discardOutput:)<\/Name><USR>s:7Rubicon7execute4exec4args5stdin13discardOutputSiSS_SaySSGypSgSbtF<\/USR><Declaration>public func execute(exec: String, args: [String], stdin: Any? = nil, discardOutput: Bool = true) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Execute a program. Anything written to stderr or stdout by the program is discarded unless <codeVoice>discardOutput<\/codeVoice> is set to <codeVoice>false<\/codeVoice> in which case it is routed to the system’s stderr and stdout channels.<\/Para><\/Abstract><Parameters><Parameter><Name>exec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The program to execute.<\/Para><\/Discussion><\/Parameter><Parameter><Name>args<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The command line arguments for the program.<\/Para><\/Discussion><\/Parameter><Parameter><Name>discardOutput<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>If <codeVoice>true<\/codeVoice> (the default) then anything the program writes to stderr or stdout is discarded. If <codeVoice>false<\/codeVoice> then anything the program writes to stderr or stdout is sent to the system’s stderr and stdout channels.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The numeric exit status code returned from the executed program.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 766,
      "key.doc.name": "execute(exec:args:stdin:discardOutput:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The program to execute."
            }
          ],
          "name": "exec"
        },
        {
          "discussion" : [
            {
              "Para" : "The command line arguments for the program."
            }
          ],
          "name" : "args"
        },
        {
          "discussion" : [
            {
              "Para" : "If `true` (the default) then anything the program writes to stderr or stdout is discarded. If `false` then anything the program writes to stderr or stdout is sent to the system’s stderr and stdout channels."
            }
          ],
          "name": "discardOutput"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The numeric exit status code returned from the executed program."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 683,
      "key.docline": 755,
      "key.docoffset": 37254,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>execute<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>exec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>args<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>stdin<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>discardOutput<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = true<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 551,
      "key.line": 766,
      "key.name": "execute(exec:args:stdin:discardOutput:)",
      "key.namecolumn": 13,
      "key.namelength": 84,
      "key.nameline": 766,
      "key.nameoffset": 37949,
      "key.offset": 37944,
      "key.parsed_declaration": "public func execute(exec: String, args: [String], stdin: Any? = nil, discardOutput: Bool = true) -> Int",
      "key.parsed_scope.end": 776,
      "key.parsed_scope.start": 766,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSG10Foundation4DataVAKzAKztF\">execute(exec: String, args: [String], stdin: Data, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderrSiSS_SaySSGypSg10Foundation4DataVzALztF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout Data, stderr: inout Data) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGS2SzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: String, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout6stderr8encodingSiSS_SaySSGypSgSSzSSzSS10FoundationE8EncodingVtF\">execute(exec: String, args: [String], stdin: Any? = nil, stdout: inout String, stderr: inout String, encoding: String.Encoding = .utf8) -&gt; Int<\/RelatedName>"
        },
        {
          "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7execute4exec4args5stdin6stdout8encoding13discardStderrSiSS_SaySSGypSgSSzSS10FoundationE8EncodingVSbtF\">execute(exec:args:stdin:stdout:encoding:discardStderr:)<\/RelatedName>"
        }
      ],
      "key.substructure" : [
        {
          "key.annotated_decl": "<Declaration>let proc: <Type usr=\"c:objc(cs)NSTask\">Process<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>proc<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSTask\">Process<\/ref.class><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 29,
          "key.line": 767,
          "key.name": "proc",
          "key.namecolumn": 9,
          "key.namelength": 4,
          "key.nameline": 767,
          "key.nameoffset": 38051,
          "key.offset": 38047,
          "key.parsed_declaration": "let proc: Process = Process()",
          "key.parsed_scope.end": 767,
          "key.parsed_scope.start": 767,
          "key.typename": "Process",
          "key.typeusr": "$sSo6NSTaskCD",
          "key.usr": "s:7Rubicon7execute4exec4args5stdin13discardOutputSiSS_SaySSGypSgSbtF4procL_So6NSTaskCvp"
        }
      ],
      "key.typename" : "(String, [String], Any?, Bool) -> Int",
      "key.typeusr" : "$s4exec4args5stdin13discardOutputSiSS_SaySSGypSgSbtcD",
      "key.usr" : "s:7Rubicon7execute4exec4args5stdin13discardOutputSiSS_SaySSGypSgSbtF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func readFromPipe(pipe: <Type usr=\"c:objc(cs)NSPipe\">Pipe<\/Type>, encoding: <Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS10FoundationE8EncodingV\">Encoding<\/Type> = .utf8) -&gt; <Type usr=\"s:SS\">String<\/Type>?<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 786,
          "key.offset": 38856
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 786,
          "key.offset": 38845
        }
      ],
      "key.bodycolumn": 96,
      "key.bodylength": 83,
      "key.bodyline": 786,
      "key.bodyoffset": 38940,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Read the data from a Pipe and return it as a string.\n\n- Parameters:\n  - pipe: The pipe to read from.\n  - encoding: The encoding. Defaults to `UTF-8`.\n- Returns: The string or `nil` if the encoding failed.",
      "key.doc.declaration": "@inlinable public func readFromPipe(pipe: Pipe, encoding: String.Encoding = .utf8) -> String?",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"786\" column=\"24\"><Name>readFromPipe(pipe:encoding:)<\/Name><USR>s:7Rubicon12readFromPipe4pipe8encodingSSSgSo6NSPipeC_SS10FoundationE8EncodingVtF<\/USR><Declaration>@inlinable public func readFromPipe(pipe: Pipe, encoding: String.Encoding = .utf8) -&gt; String?<\/Declaration><CommentParts><Abstract><Para>Read the data from a Pipe and return it as a string.<\/Para><\/Abstract><Parameters><Parameter><Name>pipe<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The pipe to read from.<\/Para><\/Discussion><\/Parameter><Parameter><Name>encoding<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The encoding. Defaults to <codeVoice>UTF-8<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The string or <codeVoice>nil<\/codeVoice> if the encoding failed.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 786,
      "key.doc.name": "readFromPipe(pipe:encoding:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The pipe to read from."
            }
          ],
          "name": "pipe"
        },
        {
          "discussion" : [
            {
              "Para" : "The encoding. Defaults to `UTF-8`."
            }
          ],
          "name": "encoding"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The string or `nil` if the encoding failed."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 233,
      "key.docline": 779,
      "key.docoffset": 38612,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>readFromPipe<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>pipe<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"c:objc(cs)NSPipe\">Pipe<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>encoding<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS10FoundationE8EncodingV\">Encoding<\/ref.struct><\/decl.var.parameter.type> = .utf8<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 161,
      "key.line": 786,
      "key.name": "readFromPipe(pipe:encoding:)",
      "key.namecolumn": 24,
      "key.namelength": 59,
      "key.nameline": 786,
      "key.nameoffset": 38868,
      "key.offset": 38863,
      "key.parsed_declaration": "@inlinable public func readFromPipe(pipe: Pipe, encoding: String.Encoding = .utf8) -> String?",
      "key.parsed_scope.end": 786,
      "key.parsed_scope.start": 786,
      "key.substructure": [
      ],
      "key.typename": "(Pipe, String.Encoding) -> String?",
      "key.typeusr": "$s4pipe8encodingSSSgSo6NSPipeC_SS10FoundationE8EncodingVtcD",
      "key.usr": "s:7Rubicon12readFromPipe4pipe8encodingSSSgSo6NSPipeC_SS10FoundationE8EncodingVtF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@inlinable func launchProcess(process: <Type usr=\"c:objc(cs)NSTask\">Process<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 794,
          "key.offset": 39268
        }
      ],
      "key.bodycolumn": 58,
      "key.bodylength": 87,
      "key.bodyline": 794,
      "key.bodyoffset": 39325,
      "key.column": 12,
      "key.doc.column": 17,
      "key.doc.comment": "Launch a process and return.\n\n- Parameter process: The process to launch.\n- Returns: `true` if successful.",
      "key.doc.declaration": "@inlinable func launchProcess(process: Process) -> Bool",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"794\" column=\"17\"><Name>launchProcess(process:)<\/Name><USR>s:7Rubicon13launchProcess7processSbSo6NSTaskC_tF<\/USR><Declaration>@inlinable func launchProcess(process: Process) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Launch a process and return.<\/Para><\/Abstract><Parameters><Parameter><Name>process<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The process to launch.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if successful.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 794,
      "key.doc.name": "launchProcess(process:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The process to launch."
            }
          ],
          "name": "process"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "`true` if successful."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 127,
      "key.docline": 789,
      "key.docoffset": 39141,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>launchProcess<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>process<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"c:objc(cs)NSTask\">Process<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 134,
      "key.line": 794,
      "key.name": "launchProcess(process:)",
      "key.namecolumn": 17,
      "key.namelength": 31,
      "key.nameline": 794,
      "key.nameoffset": 39284,
      "key.offset": 39279,
      "key.parsed_declaration": "@inlinable func launchProcess(process: Process) -> Bool",
      "key.parsed_scope.end": 797,
      "key.parsed_scope.start": 794,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon13launchProcess7process5errorSbSo6NSTaskC_s5Error_pSgztF\">launchProcess(process:error:)<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>var error: <Type usr=\"s:s5ErrorP\">Error<\/Type>?<\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>error<\/decl.name>: <decl.var.type><ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol>?<\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 23,
          "key.line": 795,
          "key.name": "error",
          "key.namecolumn": 9,
          "key.namelength": 5,
          "key.nameline": 795,
          "key.nameoffset": 39334,
          "key.offset": 39330,
          "key.parsed_declaration": "var error: Error? = nil",
          "key.parsed_scope.end": 795,
          "key.parsed_scope.start": 795,
          "key.typename": "Error?",
          "key.typeusr": "$ss5Error_pSgD",
          "key.usr": "s:7Rubicon13launchProcess7processSbSo6NSTaskC_tF5errorL_s5Error_pSgvp"
        }
      ],
      "key.typename" : "(Process) -> Bool",
      "key.typeusr" : "$s7processSbSo6NSTaskC_tcD",
      "key.usr" : "s:7Rubicon13launchProcess7processSbSo6NSTaskC_tF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@inlinable func launchProcess(process: <Type usr=\"c:objc(cs)NSTask\">Process<\/Type>, error: inout <Type usr=\"s:s5ErrorP\">Error<\/Type>?) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 807,
          "key.offset": 39702
        }
      ],
      "key.bodycolumn": 79,
      "key.bodylength": 236,
      "key.bodyline": 807,
      "key.bodyoffset": 39780,
      "key.column": 12,
      "key.doc.column": 17,
      "key.doc.comment": "Launch a process and return.\n\n- Parameters:\n  - process: The process to launch.\n  - error: Receives any error.\n- Returns: `true` if successful.",
      "key.doc.declaration": "@inlinable func launchProcess(process: Process, error: inout Error?) -> Bool",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"807\" column=\"17\"><Name>launchProcess(process:error:)<\/Name><USR>s:7Rubicon13launchProcess7process5errorSbSo6NSTaskC_s5Error_pSgztF<\/USR><Declaration>@inlinable func launchProcess(process: Process, error: inout Error?) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Launch a process and return.<\/Para><\/Abstract><Parameters><Parameter><Name>process<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The process to launch.<\/Para><\/Discussion><\/Parameter><Parameter><Name>error<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Receives any error.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if successful.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 807,
      "key.doc.name": "launchProcess(process:error:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The process to launch."
            }
          ],
          "name": "process"
        },
        {
          "discussion" : [
            {
              "Para" : "Receives any error."
            }
          ],
          "name": "error"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "`true` if successful."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 172,
      "key.docline": 800,
      "key.docoffset": 39530,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>launchProcess<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>process<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"c:objc(cs)NSTask\">Process<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>error<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.protocol usr=\"s:s5ErrorP\">Error<\/ref.protocol>?<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 304,
      "key.line": 807,
      "key.name": "launchProcess(process:error:)",
      "key.namecolumn": 17,
      "key.namelength": 52,
      "key.nameline": 807,
      "key.nameoffset": 39718,
      "key.offset": 39713,
      "key.parsed_declaration": "@inlinable func launchProcess(process: Process, error: inout Error?) -> Bool",
      "key.parsed_scope.end": 819,
      "key.parsed_scope.start": 807,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon13launchProcess7processSbSo6NSTaskC_tF\">launchProcess(process:)<\/RelatedName>"
        }
      ],
      "key.substructure": [
      ],
      "key.typename": "(Process, inout Error?) -> Bool",
      "key.typeusr": "$s7process5errorSbSo6NSTaskC_s5Error_pSgztcD",
      "key.usr" : "s:7Rubicon13launchProcess7process5errorSbSo6NSTaskC_s5Error_pSgztF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public func which(names: [<Type usr=\"s:SS\">String<\/Type>]) -&gt; [<Type usr=\"s:SS\">String<\/Type>?]<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 827,
          "key.offset": 40303
        }
      ],
      "key.bodycolumn": 50,
      "key.bodylength": 801,
      "key.bodyline": 827,
      "key.bodyoffset": 40352,
      "key.column": 8,
      "key.doc.column": 13,
      "key.doc.comment": "Which\n\n- Parameter names: The programs to look for.\n- Returns: The paths to the programs. If any program couldn't be found then that entry is `nil`.",
      "key.doc.declaration": "public func which(names: [String]) -> [String?]",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"827\" column=\"13\"><Name>which(names:)<\/Name><USR>s:7Rubicon5which5namesSaySSSgGSaySSG_tF<\/USR><Declaration>public func which(names: [String]) -&gt; [String?]<\/Declaration><CommentParts><Abstract><Para>Which<\/Para><\/Abstract><Parameters><Parameter><Name>names<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The programs to look for.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The paths to the programs. If any program couldn’t be found then that entry is <codeVoice>nil<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 827,
      "key.doc.name": "which(names:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The programs to look for."
            }
          ],
          "name": "names"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The paths to the programs. If any program couldn’t be found then that entry is `nil`."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 169,
      "key.docline": 822,
      "key.docoffset": 40134,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>which<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>names<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.struct usr=\"s:SS\">String<\/ref.struct>?]<\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 844,
      "key.line": 827,
      "key.name": "which(names:)",
      "key.namecolumn": 13,
      "key.namelength": 22,
      "key.nameline": 827,
      "key.nameoffset": 40315,
      "key.offset": 40310,
      "key.parsed_declaration": "public func which(names: [String]) -> [String?]",
      "key.parsed_scope.end": 856,
      "key.parsed_scope.start": 827,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon5which4nameSSSgSS_tF\">which(name:)<\/RelatedName>"
        }
      ],
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>let ncc: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ncc<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 26,
          "key.line": 828,
          "key.name": "ncc",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 828,
          "key.nameoffset": 40361,
          "key.offset": 40357,
          "key.parsed_declaration": "let ncc: Int = names.count",
          "key.parsed_scope.end": 828,
          "key.parsed_scope.start": 828,
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon5which5namesSaySSSgGSaySSG_tF3nccL_Sivp"
        },
        {
          "key.annotated_decl": "<Declaration>var txt: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>txt<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 23,
          "key.line": 831,
          "key.name": "txt",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 831,
          "key.nameoffset": 40430,
          "key.offset": 40426,
          "key.parsed_declaration": "var txt: String    = \"\"",
          "key.parsed_scope.end": 831,
          "key.parsed_scope.start": 831,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon5which5namesSaySSSgGSaySSG_tF3txtL_SSvp"
        },
        {
          "key.annotated_decl": "<Declaration>var err: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>err<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 23,
          "key.line": 832,
          "key.name": "err",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 832,
          "key.nameoffset": 40458,
          "key.offset": 40454,
          "key.parsed_declaration": "var err: String    = \"\"",
          "key.parsed_scope.end": 832,
          "key.parsed_scope.start": 832,
          "key.typename": "String",
          "key.typeusr": "$sSSD",
          "key.usr": "s:7Rubicon5which5namesSaySSSgGSaySSG_tF3errL_SSvp"
        },
        {
          "key.annotated_decl": "<Declaration>var out: [<Type usr=\"s:SS\">String<\/Type>?]<\/Declaration>",
          "key.column": 5,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>out<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>?]<\/decl.var.type><\/decl.var.local>",
          "key.kind": "source.lang.swift.decl.var.local",
          "key.length": 23,
          "key.line": 833,
          "key.name": "out",
          "key.namecolumn": 9,
          "key.namelength": 3,
          "key.nameline": 833,
          "key.nameoffset": 40486,
          "key.offset": 40482,
          "key.parsed_declaration": "var out: [String?] = []",
          "key.parsed_scope.end": 833,
          "key.parsed_scope.start": 833,
          "key.typename": "[String?]",
          "key.typeusr": "$sSaySSSgGD",
          "key.usr": "s:7Rubicon5which5namesSaySSSgGSaySSG_tF3outL_AEvp"
        }
      ],
      "key.typename" : "([String]) -> [String?]",
      "key.typeusr" : "$s5namesSaySSSgGSaySSG_tcD",
      "key.usr" : "s:7Rubicon5which5namesSaySSSgGSaySSG_tF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func which(name: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type>?<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 864,
          "key.offset": 41421
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 864,
          "key.offset": 41410
        }
      ],
      "key.bodycolumn": 56,
      "key.bodylength": 27,
      "key.bodyline": 864,
      "key.bodyoffset": 41465,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Which\n\n- Parameter name: The program to look for.\n- Returns: The path to the program or `nil` if it couldn't be found.",
      "key.doc.declaration": "@inlinable public func which(name: String) -> String?",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"864\" column=\"24\"><Name>which(name:)<\/Name><USR>s:7Rubicon5which4nameSSSgSS_tF<\/USR><Declaration>@inlinable public func which(name: String) -&gt; String?<\/Declaration><CommentParts><Abstract><Para>Which<\/Para><\/Abstract><Parameters><Parameter><Name>name<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The program to look for.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The path to the program or <codeVoice>nil<\/codeVoice> if it couldn’t be found.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 864,
      "key.doc.name": "which(name:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The program to look for."
            }
          ],
          "name": "name"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The path to the program or `nil` if it couldn’t be found."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 139,
      "key.docline": 859,
      "key.docoffset": 41271,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>which<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>name<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 65,
      "key.line": 864,
      "key.name": "which(name:)",
      "key.namecolumn": 24,
      "key.namelength": 19,
      "key.nameline": 864,
      "key.nameoffset": 41433,
      "key.offset": 41428,
      "key.parsed_declaration": "@inlinable public func which(name: String) -> String?",
      "key.parsed_scope.end": 864,
      "key.parsed_scope.start": 864,
      "key.related_decls": [
        {
          "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon5which5namesSaySSSgGSaySSG_tF\">which(names:)<\/RelatedName>"
        }
      ],
      "key.substructure": [
      ],
      "key.typename": "(String) -> String?",
      "key.typeusr": "$s4nameSSSgSS_tcD",
      "key.usr" : "s:7Rubicon5which4nameSSSgSS_tF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func launchApplication(exec: ([<Type usr=\"s:SS\">String<\/Type>]) throws -&gt; <Type usr=\"s:s5Int32V\">Int32<\/Type>) -&gt; <Type usr=\"s:s5NeverO\">Never<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 873,
          "key.offset": 41943
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 873,
          "key.offset": 41932
        }
      ],
      "key.bodycolumn": 86,
      "key.bodylength": 375,
      "key.bodyline": 873,
      "key.bodyoffset": 42017,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Applications that run on Linux need to have the main dispatch queue running in order to use Grand Central\nDispatch. This function does that.\n\n- Parameter exec: The closure that runs your application.\n- Returns: The exit code for your application or `1` if your application threw an uncaught error.",
      "key.doc.declaration": "@inlinable public func launchApplication(exec: ([String]) throws -> Int32) -> Never",
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"873\" column=\"24\"><Name>launchApplication(exec:)<\/Name><USR>s:7Rubicon17launchApplication4execs5NeverOs5Int32VSaySSGKXE_tF<\/USR><Declaration>@inlinable public func launchApplication(exec: ([String]) throws -&gt; Int32) -&gt; Never<\/Declaration><CommentParts><Abstract><Para>Applications that run on Linux need to have the main dispatch queue running in order to use Grand Central Dispatch. This function does that.<\/Para><\/Abstract><Parameters><Parameter><Name>exec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure that runs your application.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The exit code for your application or <codeVoice>1<\/codeVoice> if your application threw an uncaught error.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
      "key.doc.line": 873,
      "key.doc.name": "launchApplication(exec:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The closure that runs your application."
            }
          ],
          "name": "exec"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "The exit code for your application or `1` if your application threw an uncaught error."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 322,
      "key.docline": 867,
      "key.docoffset": 41610,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>launchApplication<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>exec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type>[<ref.struct usr=\"s:SS\">String<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int32V\">Int32<\/ref.struct><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:s5NeverO\">Never<\/ref.enum><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 443,
      "key.line": 873,
      "key.name": "launchApplication(exec:)",
      "key.namecolumn": 24,
      "key.namelength": 51,
      "key.nameline": 873,
      "key.nameoffset": 41955,
      "key.offset": 41950,
      "key.parsed_declaration": "@inlinable public func launchApplication(exec: ([String]) throws -> Int32) -> Never",
      "key.parsed_scope.end": 886,
      "key.parsed_scope.start": 873,
      "key.substructure": [
      ],
      "key.typename": "(([String]) throws -> Int32) -> Never",
      "key.typeusr": "$s4execs5NeverOs5Int32VSaySSGKXE_tcD",
      "key.usr": "s:7Rubicon17launchApplication4execs5NeverOs5Int32VSaySSGKXE_tF"
    },
    {
      "key.accessibility": "source.lang.swift.accessibility.public",
      "key.annotated_decl": "<Declaration>@inlinable public func isType&lt;O, T&gt;(_ o: <Type usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1OL_xmfp\">O<\/Type>, _ t: <Type usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1TL_q_mfp\">T<\/Type>.Type) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
      "key.attributes": [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 12,
          "key.length": 6,
          "key.line": 899,
          "key.offset": 42756
        },
        {
          "key.attribute": "source.decl.attribute.inlinable",
          "key.column": 1,
          "key.length": 10,
          "key.line": 899,
          "key.offset": 42745
        }
      ],
      "key.bodycolumn": 67,
      "key.bodylength": 20,
      "key.bodyline": 899,
      "key.bodyoffset": 42811,
      "key.column": 19,
      "key.doc.column": 24,
      "key.doc.comment": "Somewhat shorthand for:\n```\ntype(of: o) == t.self\n```\n\n- Parameters:\n  - o: The instance to check the type of.\n  - t: The type to check for.\n- Returns: `true` if the type of `o` is equal to `t`.",
      "key.doc.declaration": "@inlinable public func isType<O, T>(_ o: O, _ t: T.Type) -> Bool",
      "key.doc.discussion": [
        {
          "CodeListing": ""
        }
      ],
      "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"899\" column=\"24\"><Name>isType(_:_:)<\/Name><USR>s:7Rubicon6isTypeySbx_q_mtr0_lF<\/USR><Declaration>@inlinable public func isType&lt;O, T&gt;(_ o: O, _ t: T.Type) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Somewhat shorthand for:<\/Para><\/Abstract><Parameters><Parameter><Name>o<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The instance to check the type of.<\/Para><\/Discussion><\/Parameter><Parameter><Name>t<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The type to check for.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if the type of <codeVoice>o<\/codeVoice> is equal to <codeVoice>t<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[type(of: o) == t.self]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Function>",
      "key.doc.line": 899,
      "key.doc.name": "isType(_:_:)",
      "key.doc.parameters": [
        {
          "discussion": [
            {
              "Para": "The instance to check the type of."
            }
          ],
          "name": "o"
        },
        {
          "discussion": [
            {
              "Para": "The type to check for."
            }
          ],
          "name": "t"
        }
      ],
      "key.doc.result_discussion": [
        {
          "Para": "`true` if the type of `o` is equal to `t`."
        }
      ],
      "key.doc.type": "Function",
      "key.doccolumn": 1,
      "key.doclength": 235,
      "key.docline": 889,
      "key.docoffset": 42510,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl": "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>isType<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1OL_xmfp\"><decl.generic_type_param.name>O<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1TL_q_mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>o<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1OL_xmfp\">O<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>t<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1TL_q_mfp\">T<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind": "source.lang.swift.decl.function.free",
      "key.length": 69,
      "key.line": 899,
      "key.name": "isType(_:_:)",
      "key.namecolumn": 24,
      "key.namelength": 33,
      "key.nameline": 899,
      "key.nameoffset": 42768,
      "key.offset": 42763,
      "key.parsed_declaration": "@inlinable public func isType<O, T>(_ o: O, _ t: T.Type) -> Bool",
      "key.parsed_scope.end": 899,
      "key.parsed_scope.start": 899,
      "key.substructure": [
        {
          "key.annotated_decl": "<Declaration>O<\/Declaration>",
          "key.column": 31,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>O<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 1,
          "key.line": 899,
          "key.name": "O",
          "key.namecolumn": 31,
          "key.namelength": 1,
          "key.nameline": 899,
          "key.nameoffset": 42775,
          "key.offset": 42775,
          "key.parsed_declaration": "@inlinable public func isType<O",
          "key.parsed_scope.end": 899,
          "key.parsed_scope.start": 899,
          "key.typename": "O.Type",
          "key.typeusr": "$sxmD",
          "key.usr": "s:7Rubicon6isTypeySbx_q_mtr0_lF1OL_xmfp"
        },
        {
          "key.annotated_decl": "<Declaration>T<\/Declaration>",
          "key.column": 34,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind": "source.lang.swift.decl.generic_type_param",
          "key.length": 1,
          "key.line": 899,
          "key.name": "T",
          "key.namecolumn": 34,
          "key.namelength": 1,
          "key.nameline": 899,
          "key.nameoffset": 42778,
          "key.offset": 42778,
          "key.parsed_declaration": "@inlinable public func isType<O, T",
          "key.parsed_scope.end": 899,
          "key.parsed_scope.start": 899,
          "key.typename": "T.Type",
          "key.typeusr": "$sq_mD",
          "key.usr": "s:7Rubicon6isTypeySbx_q_mtr0_lF1TL_q_mfp"
        }
      ],
      "key.typename": "<O, T> (O, T.Type) -> Bool",
      "key.typeusr": "$sySbx_q_mtcr0_luD",
      "key.usr": "s:7Rubicon6isTypeySbx_q_mtr0_lF"
    }
  ]
}     "key.line" : 910,
"key.name": "launchApplication(exec:)",
"key.namecolumn": 24,
"key.namelength": 51,
"key.nameline": 910,
"key.nameoffset": 43233,
"key.offset": 43228,
"key.parsed_declaration": "@inlinable public func launchApplication(exec: ([String]) throws -> Int32) -> Never",
"key.parsed_scope.end": 923,
"key.parsed_scope.start": 910,
"key.substructure": [

      ],
      "key.typename" : "(([String]) throws -> Int32) -> Never",
      "key.typeusr" : "$s4execs5NeverOs5Int32VSaySSGKXE_tcD",
      "key.usr" : "s:7Rubicon17launchApplication4execs5NeverOs5Int32VSaySSGKXE_tF"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>@inlinable public func isType&lt;O, T&gt;(_ o: <Type usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1OL_xmfp\">O<\/Type>, _ t: <Type usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1TL_q_mfp\">T<\/Type>.Type) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.public",
          "key.column" : 12,
          "key.length" : 6,
          "key.line" : 936,
          "key.offset" : 44033
        },
        {
          "key.attribute" : "source.decl.attribute.inlinable",
          "key.column" : 1,
          "key.length" : 10,
          "key.line" : 936,
          "key.offset" : 44022
        }
      ],
      "key.bodycolumn" : 67,
      "key.bodylength" : 20,
      "key.bodyline" : 936,
      "key.bodyoffset" : 44088,
      "key.column" : 19,
      "key.doc.column" : 24,
      "key.doc.comment" : "Somewhat shorthand for:\n```\ntype(of: o) == t.self\n```\n\n- Parameters:\n  - o: The instance to check the type of.\n  - t: The type to check for.\n- Returns: `true` if the type of `o` is equal to `t`.",
      "key.doc.declaration" : "@inlinable public func isType<O, T>(_ o: O, _ t: T.Type) -> Bool",
      "key.doc.discussion" : [
        {
          "CodeListing" : ""
        }
      ],
      "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift\" line=\"936\" column=\"24\"><Name>isType(_:_:)<\/Name><USR>s:7Rubicon6isTypeySbx_q_mtr0_lF<\/USR><Declaration>@inlinable public func isType&lt;O, T&gt;(_ o: O, _ t: T.Type) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Somewhat shorthand for:<\/Para><\/Abstract><Parameters><Parameter><Name>o<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The instance to check the type of.<\/Para><\/Discussion><\/Parameter><Parameter><Name>t<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The type to check for.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if the type of <codeVoice>o<\/codeVoice> is equal to <codeVoice>t<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[type(of: o) == t.self]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Function>",
      "key.doc.line" : 936,
      "key.doc.name" : "isType(_:_:)",
      "key.doc.parameters" : [
        {
          "discussion" : [
            {
              "Para" : "The instance to check the type of."
            }
          ],
          "name" : "o"
        },
        {
          "discussion" : [
            {
              "Para" : "The type to check for."
            }
          ],
          "name" : "t"
        }
      ],
      "key.doc.result_discussion" : [
        {
          "Para" : "`true` if the type of `o` is equal to `t`."
        }
      ],
      "key.doc.type" : "Function",
      "key.doccolumn" : 1,
      "key.doclength" : 234,
      "key.docline" : 926,
      "key.docoffset" : 43788,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
      "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>isType<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1OL_xmfp\"><decl.generic_type_param.name>O<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1TL_q_mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>o<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1OL_xmfp\">O<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>t<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon6isTypeySbx_q_mtr0_lF1TL_q_mfp\">T<\/ref.generic_type_param>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
      "key.kind" : "source.lang.swift.decl.function.free",
      "key.length" : 69,
      "key.line" : 936,
      "key.name" : "isType(_:_:)",
      "key.namecolumn" : 24,
      "key.namelength" : 33,
      "key.nameline" : 936,
      "key.nameoffset" : 44045,
      "key.offset" : 44040,
      "key.parsed_declaration" : "@inlinable public func isType<O, T>(_ o: O, _ t: T.Type) -> Bool",
      "key.parsed_scope.end" : 936,
      "key.parsed_scope.start" : 936,
      "key.substructure" : [
        {
          "key.annotated_decl" : "<Declaration>O<\/Declaration>",
          "key.column" : 31,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>O<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind" : "source.lang.swift.decl.generic_type_param",
          "key.length" : 1,
          "key.line" : 936,
          "key.name" : "O",
          "key.namecolumn" : 31,
          "key.namelength" : 1,
          "key.nameline" : 936,
          "key.nameoffset" : 44052,
          "key.offset" : 44052,
          "key.parsed_declaration" : "@inlinable public func isType<O",
          "key.parsed_scope.end" : 936,
          "key.parsed_scope.start" : 936,
          "key.typename" : "O.Type",
          "key.typeusr" : "$sxmD",
          "key.usr" : "s:7Rubicon6isTypeySbx_q_mtr0_lF1OL_xmfp"
        },
        {
          "key.annotated_decl" : "<Declaration>T<\/Declaration>",
          "key.column" : 34,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Tools.swift",
          "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind" : "source.lang.swift.decl.generic_type_param",
          "key.length" : 1,
          "key.line" : 936,
          "key.name" : "T",
          "key.namecolumn" : 34,
          "key.namelength" : 1,
          "key.nameline" : 936,
          "key.nameoffset" : 44055,
          "key.offset" : 44055,
          "key.parsed_declaration" : "@inlinable public func isType<O, T",
          "key.parsed_scope.end" : 936,
          "key.parsed_scope.start" : 936,
          "key.typename" : "T.Type",
          "key.typeusr" : "$sq_mD",
          "key.usr" : "s:7Rubicon6isTypeySbx_q_mtr0_lF1TL_q_mfp"
        }
      ],
      "key.typename" : "<O, T> (O, T.Type) -> Bool",
      "key.typeusr" : "$sySbx_q_mtcr0_luD",
      "key.usr" : "s:7Rubicon6isTypeySbx_q_mtr0_lF"
    }
  ]
}
