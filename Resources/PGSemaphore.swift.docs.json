{
  "key.column": 1,
  "key.diagnostic_stage": "source.diagnostic.stage.swift.parse",
  "key.length": 9228,
  "key.line": 1,
  "key.offset": 0,
  "key.substructure": [
    {
      "key.accessibility": "source.lang.swift.accessibility.public",
      "key.annotated_decl": "<Declaration>public protocol PGSemaphore<\/Declaration>",
      "key.attributes": [
        {
          "key.attribute": "source.decl.attribute.public",
          "key.column": 1,
          "key.length": 6,
          "key.line": 21,
          "key.offset": 1308
        }
      ],
      "key.bodycolumn": 30,
      "key.bodylength": 5297,
      "key.bodyline": 21,
      "key.bodyoffset": 1337,
      "key.column": 8,
      "key.doc.comment": "",
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
      "key.fully_annotated_decl": "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>PGSemaphore<\/decl.name><\/decl.protocol>",
      "key.kind": "source.lang.swift.decl.protocol",
      "key.length": 5320,
      "key.line": 21,
      "key.name": "PGSemaphore",
      "key.namecolumn": 17,
      "key.namelength": 11,
      "key.nameline": 21,
      "key.nameoffset": 1324,
      "key.offset": 1315,
      "key.parsed_declaration": "public protocol PGSemaphore",
      "key.parsed_scope.end": 104,
      "key.parsed_scope.start": 21,
      "key.substructure": [
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>var maxValue: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
          "key.bodycolumn": 24,
          "key.bodylength": 5,
          "key.bodyline": 25,
          "key.bodyoffset": 1578,
          "key.column": 5,
          "key.doc.column": 9,
          "key.doc.comment": "The maximum value of the semaphore. The current value will never go above this value.",
          "key.doc.declaration": "var maxValue: Int { get }",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"25\" column=\"9\"><Name>maxValue<\/Name><USR>s:7Rubicon11PGSemaphoreP8maxValueSivp<\/USR><Declaration>var maxValue: Int { get }<\/Declaration><CommentParts><Abstract><Para>The maximum value of the semaphore. The current value will never go above this value.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line": 25,
          "key.doc.name": "maxValue",
          "key.doc.type": "Other",
          "key.doccolumn": 5,
          "key.doclength": 98,
          "key.docline": 23,
          "key.docoffset": 1457,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>maxValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind": "source.lang.swift.decl.var.instance",
          "key.length": 25,
          "key.line": 25,
          "key.name": "maxValue",
          "key.namecolumn": 9,
          "key.namelength": 8,
          "key.nameline": 25,
          "key.nameoffset": 1563,
          "key.offset": 1559,
          "key.parsed_declaration": "var maxValue: Int",
          "key.parsed_scope.end": 25,
          "key.parsed_scope.start": 25,
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon11PGSemaphoreP8maxValueSivp"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>var value: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
          "key.bodycolumn": 24,
          "key.bodylength": 5,
          "key.bodyline": 32,
          "key.bodyoffset": 2114,
          "key.column": 5,
          "key.doc.column": 9,
          "key.doc.comment": "The current value of the semaphore. If this value is less than or equal to\n<code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> then any call to `acquire()`, `tryAcquire()`, or\n`tryAcquire(until:)` will respectively either block, fail, or potentially timeout until this value becomes\ngreater than <code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code>.",
          "key.doc.declaration": "var value: Int { get }",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"32\" column=\"9\"><Name>value<\/Name><USR>s:7Rubicon11PGSemaphoreP5valueSivp<\/USR><Declaration>var value: Int { get }<\/Declaration><CommentParts><Abstract><Para>The current value of the semaphore. If this value is less than or equal to <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> then any call to <codeVoice>acquire()<\/codeVoice>, <codeVoice>tryAcquire()<\/codeVoice>, or <codeVoice>tryAcquire(until:)<\/codeVoice> will respectively either block, fail, or potentially timeout until this value becomes greater than <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line": 32,
          "key.doc.name": "value",
          "key.doc.type": "Other",
          "key.doccolumn": 5,
          "key.doclength": 387,
          "key.docline": 27,
          "key.docoffset": 1704,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>value<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind": "source.lang.swift.decl.var.instance",
          "key.length": 25,
          "key.line": 32,
          "key.name": "value",
          "key.namecolumn": 9,
          "key.namelength": 5,
          "key.nameline": 32,
          "key.nameoffset": 2099,
          "key.offset": 2095,
          "key.parsed_declaration": "var value:    Int",
          "key.parsed_scope.end": 32,
          "key.parsed_scope.start": 32,
          "key.typename": "Int",
          "key.typeusr": "$sSiD",
          "key.usr": "s:7Rubicon11PGSemaphoreP5valueSivp"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>@discardableResult func release() -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.discardableResult",
              "key.column": 5,
              "key.length": 18,
              "key.line": 42,
              "key.offset": 2711
            }
          ],
          "key.column": 24,
          "key.doc.column": 29,
          "key.doc.comment": "Release the semaphore. Increments the value by one (1). If the value was previously less than or equal to\n<code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> (0) then a waiting thread will be woken up and\nallowed to acquire the semaphore.\n\n- Returns: `true` if successful. If the value before calling `release()` is already equal to the maximum\n           value then it is left unchanged and `false` is returned.",
          "key.doc.declaration": "func release() -> Bool",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"42\" column=\"29\"><Name>release()<\/Name><USR>s:7Rubicon11PGSemaphoreP7releaseSbyF<\/USR><Declaration>func release() -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Release the semaphore. Increments the value by one (1). If the value was previously less than or equal to <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (0) then a waiting thread will be woken up and allowed to acquire the semaphore.<\/Para><\/Abstract><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if successful. If the value before calling <codeVoice>release()<\/codeVoice> is already equal to the maximum value then it is left unchanged and <codeVoice>false<\/codeVoice> is returned.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 42,
          "key.doc.name": "release()",
          "key.doc.result_discussion": [
            {
              "Para": "`true` if successful. If the value before calling `release()` is already equal to the maximum value then it is left unchanged and `false` is returned."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 466,
          "key.docline": 35,
          "key.docoffset": 2241,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@discardableResult<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>release<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 22,
          "key.line": 42,
          "key.name": "release()",
          "key.namecolumn": 29,
          "key.namelength": 9,
          "key.nameline": 42,
          "key.nameoffset": 2735,
          "key.offset": 2730,
          "key.parsed_declaration": "@discardableResult func release() -> Bool",
          "key.parsed_scope.end": 42,
          "key.parsed_scope.start": 42,
          "key.typename": "<Self where Self : PGSemaphore> (Self) -> () -> Bool",
          "key.typeusr": "$sSbycD",
          "key.usr": "s:7Rubicon11PGSemaphoreP7releaseSbyF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>func acquire()<\/Declaration>",
          "key.column": 5,
          "key.doc.column": 10,
          "key.doc.comment": "Acquire the semaphore. If the value before calling is less than or equal to\n<code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> (0) then the calling thread is blocked until it is\ngreater than <code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> (0).",
          "key.doc.declaration": "func acquire()",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"49\" column=\"10\"><Name>acquire()<\/Name><USR>s:7Rubicon11PGSemaphoreP7acquireyyF<\/USR><Declaration>func acquire()<\/Declaration><CommentParts><Abstract><Para>Acquire the semaphore. If the value before calling is less than or equal to <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (0) then the calling thread is blocked until it is greater than <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (0).<\/Para><\/Abstract><\/CommentParts><\/Function>",
          "key.doc.line": 49,
          "key.doc.name": "acquire()",
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 279,
          "key.docline": 45,
          "key.docoffset": 2873,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>acquire<\/decl.name>()<\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 14,
          "key.line": 49,
          "key.name": "acquire()",
          "key.namecolumn": 10,
          "key.namelength": 9,
          "key.nameline": 49,
          "key.nameoffset": 3161,
          "key.offset": 3156,
          "key.parsed_declaration": "func acquire()",
          "key.parsed_scope.end": 49,
          "key.parsed_scope.start": 49,
          "key.typename": "<Self where Self : PGSemaphore> (Self) -> () -> ()",
          "key.typeusr": "$syycD",
          "key.usr": "s:7Rubicon11PGSemaphoreP7acquireyyF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>func tryAcquire() -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.column": 5,
          "key.doc.column": 10,
          "key.doc.comment": "Attempt to acquire the semaphore. If the value before calling is less than or equal to\n<code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> (0) then this method fails by returning `false`.\n\n- Returns: `true` if successful. `false` if value is less than or equal to\n           <code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> (0).",
          "key.doc.declaration": "func tryAcquire() -> Bool",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"58\" column=\"10\"><Name>tryAcquire()<\/Name><USR>s:7Rubicon11PGSemaphoreP10tryAcquireSbyF<\/USR><Declaration>func tryAcquire() -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Attempt to acquire the semaphore. If the value before calling is less than or equal to <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (0) then this method fails by returning <codeVoice>false<\/codeVoice>.<\/Para><\/Abstract><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if successful. <codeVoice>false<\/codeVoice> if value is less than or equal to <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (0).<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 58,
          "key.doc.name": "tryAcquire()",
          "key.doc.result_discussion": [
            {
              "Para": "`true` if successful. `false` if value is less than or equal to <code><\/code> (0)."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 378,
          "key.docline": 52,
          "key.docoffset": 3291,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>tryAcquire<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 25,
          "key.line": 58,
          "key.name": "tryAcquire()",
          "key.namecolumn": 10,
          "key.namelength": 12,
          "key.nameline": 58,
          "key.nameoffset": 3678,
          "key.offset": 3673,
          "key.parsed_declaration": "func tryAcquire() -> Bool",
          "key.parsed_scope.end": 58,
          "key.parsed_scope.start": 58,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphoreP10tryAcquire5untilSb10Foundation4DateV_tF\">tryAcquire(until:)<\/RelatedName>"
            }
          ],
          "key.typename": "<Self where Self : PGSemaphore> (Self) -> () -> Bool",
          "key.typeusr": "$sSbycD",
          "key.usr": "s:7Rubicon11PGSemaphoreP10tryAcquireSbyF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>func tryAcquire(until: <Type usr=\"s:10Foundation4DateV\">Date<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.column": 5,
          "key.doc.column": 10,
          "key.doc.comment": "Attempt to acquire the semaphore. If the value before calling is less than or equal to\n<code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> (0) then the calling thread is blocked until either\nthe value is greater than <code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> (0) or until the amount of\ntime specified by `until` has elapsed.\n\n- Parameter until: the absolute time that this method will wait trying to acquire the semaphore.\n- Returns: `true` if successful or `false` if the specified time has elapsed.",
          "key.doc.declaration": "func tryAcquire(until: Date) -> Bool",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"69\" column=\"10\"><Name>tryAcquire(until:)<\/Name><USR>s:7Rubicon11PGSemaphoreP10tryAcquire5untilSb10Foundation4DateV_tF<\/USR><Declaration>func tryAcquire(until: Date) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Attempt to acquire the semaphore. If the value before calling is less than or equal to <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (0) then the calling thread is blocked until either the value is greater than <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> (0) or until the amount of time specified by <codeVoice>until<\/codeVoice> has elapsed.<\/Para><\/Abstract><Parameters><Parameter><Name>until<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the absolute time that this method will wait trying to acquire the semaphore.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if successful or <codeVoice>false<\/codeVoice> if the specified time has elapsed.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 69,
          "key.doc.name": "tryAcquire(until:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "the absolute time that this method will wait trying to acquire the semaphore."
                }
              ],
              "name": "until"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "`true` if successful or `false` if the specified time has elapsed."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 573,
          "key.docline": 61,
          "key.docoffset": 3819,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>tryAcquire<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>until<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:10Foundation4DateV\">Date<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 36,
          "key.line": 69,
          "key.name": "tryAcquire(until:)",
          "key.namecolumn": 10,
          "key.namelength": 23,
          "key.nameline": 69,
          "key.nameoffset": 4401,
          "key.offset": 4396,
          "key.parsed_declaration": "func tryAcquire(until: Date) -> Bool",
          "key.parsed_scope.end": 69,
          "key.parsed_scope.start": 69,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphoreP10tryAcquireSbyF\">tryAcquire()<\/RelatedName>"
            }
          ],
          "key.substructure": [
          ],
          "key.typename": "<Self where Self : PGSemaphore> (Self) -> (Date) -> Bool",
          "key.typeusr": "$s5untilSb10Foundation4DateV_tcD",
          "key.usr": "s:7Rubicon11PGSemaphoreP10tryAcquire5untilSb10Foundation4DateV_tF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>func withSemaphore&lt;T&gt;(_ body: () throws -&gt; <Type usr=\"s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\">T<\/Type>) rethrows -&gt; <Type usr=\"s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\">T<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.rethrows",
              "key.column": 51,
              "key.length": 8,
              "key.line": 79,
              "key.offset": 4989
            }
          ],
          "key.column": 5,
          "key.doc.column": 10,
          "key.doc.comment": "Execute the given closure with the acquired semaphore. This method will acquire the semaphore, execute the\nclosure, and then release the semaphore.\n\n- Parameter body: The closure to execute.\n- Returns: The value returned by the closure.\n- Throws: Any error thrown by the closure. The semaphore will be released if an error is thrown.",
          "key.doc.declaration": "func withSemaphore<T>(_ body: () throws -> T) rethrows -> T",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"79\" column=\"10\"><Name>withSemaphore(_:)<\/Name><USR>s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF<\/USR><Declaration>func withSemaphore&lt;T&gt;(_ body: () throws -&gt; T) rethrows -&gt; T<\/Declaration><CommentParts><Abstract><Para>Execute the given closure with the acquired semaphore. This method will acquire the semaphore, execute the closure, and then release the semaphore.<\/Para><\/Abstract><Parameters><Parameter><Name>body<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure to execute.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The value returned by the closure.<\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>Any error thrown by the closure. The semaphore will be released if an error is thrown.<\/Para><\/ThrowsDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 79,
          "key.doc.name": "withSemaphore(_:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The closure to execute."
                }
              ],
              "name": "body"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The value returned by the closure."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 386,
          "key.docline": 72,
          "key.docoffset": 4553,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withSemaphore<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>() <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 59,
          "key.line": 79,
          "key.name": "withSemaphore(_:)",
          "key.namecolumn": 10,
          "key.namelength": 40,
          "key.nameline": 79,
          "key.nameoffset": 4948,
          "key.offset": 4943,
          "key.parsed_declaration": "func withSemaphore<T>(_ body: () throws -> T) rethrows -> T",
          "key.parsed_scope.end": 79,
          "key.parsed_scope.start": 79,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF\">withSemaphore&lt;T&gt;(waitUntil: Date, _: () throws -&gt; T) rethrows -&gt; T?<\/RelatedName>"
            },
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF\">withSemaphore&lt;T&gt;(_: () throws -&gt; T) rethrows -&gt; T<\/RelatedName>"
            },
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF\">withSemaphore&lt;T&gt;(waitUntil: Date, _: () throws -&gt; T) rethrows -&gt; T?<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>T<\/Declaration>",
              "key.column": 24,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
              "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind": "source.lang.swift.decl.generic_type_param",
              "key.length": 1,
              "key.line": 79,
              "key.name": "T",
              "key.namecolumn": 24,
              "key.namelength": 1,
              "key.nameline": 79,
              "key.nameoffset": 4962,
              "key.offset": 4962,
              "key.parsed_declaration": "func withSemaphore<T",
              "key.parsed_scope.end": 79,
              "key.parsed_scope.start": 79,
              "key.typename": "T.Type",
              "key.typeusr": "$sqd__mD",
              "key.usr": "s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp"
            }
          ],
          "key.typename": "<Self, T where Self : PGSemaphore> (Self) -> (() throws -> T) throws -> T",
          "key.typeusr": "$syqd__qd__yKXEKcluD",
          "key.usr": "s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>func withSemaphoreTry&lt;T&gt;(_ body: () throws -&gt; <Type usr=\"s:7Rubicon11PGSemaphoreP16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\">T<\/Type>) rethrows -&gt; <Type usr=\"s:7Rubicon11PGSemaphoreP16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\">T<\/Type>?<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.rethrows",
              "key.column": 54,
              "key.length": 8,
              "key.line": 90,
              "key.offset": 5729
            }
          ],
          "key.column": 5,
          "key.doc.column": 10,
          "key.doc.comment": "Execute the given closure with the acquired semaphore. This method will attempt to acquire the semaphore,\nexecute the closure, and then release the semaphore. If the semaphore cannot be acquired then `nil` is\nreturned without the closure ever being executed.\n\n- Parameter body: The closure to execute.\n- Returns: The value returned by the closure or `nil` if the semaphore could not be acquired.\n- Throws: Any error thrown by the closure. The semaphore will be released if an error is thrown.",
          "key.doc.declaration": "func withSemaphoreTry<T>(_ body: () throws -> T) rethrows -> T?",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"90\" column=\"10\"><Name>withSemaphoreTry(_:)<\/Name><USR>s:7Rubicon11PGSemaphoreP16withSemaphoreTryyqd__Sgqd__yKXEKlF<\/USR><Declaration>func withSemaphoreTry&lt;T&gt;(_ body: () throws -&gt; T) rethrows -&gt; T?<\/Declaration><CommentParts><Abstract><Para>Execute the given closure with the acquired semaphore. This method will attempt to acquire the semaphore, execute the closure, and then release the semaphore. If the semaphore cannot be acquired then <codeVoice>nil<\/codeVoice> is returned without the closure ever being executed.<\/Para><\/Abstract><Parameters><Parameter><Name>body<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure to execute.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The value returned by the closure or <codeVoice>nil<\/codeVoice> if the semaphore could not be acquired.<\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>Any error thrown by the closure. The semaphore will be released if an error is thrown.<\/Para><\/ThrowsDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 90,
          "key.doc.name": "withSemaphoreTry(_:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The closure to execute."
                }
              ],
              "name": "body"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The value returned by the closure or `nil` if the semaphore could not be acquired."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 553,
          "key.docline": 82,
          "key.docoffset": 5123,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withSemaphoreTry<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon11PGSemaphoreP16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>() <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphoreP16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphoreP16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\">T<\/ref.generic_type_param>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 63,
          "key.line": 90,
          "key.name": "withSemaphoreTry(_:)",
          "key.namecolumn": 10,
          "key.namelength": 43,
          "key.nameline": 90,
          "key.nameoffset": 5685,
          "key.offset": 5680,
          "key.parsed_declaration": "func withSemaphoreTry<T>(_ body: () throws -> T) rethrows -> T?",
          "key.parsed_scope.end": 90,
          "key.parsed_scope.start": 90,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphorePAAE16withSemaphoreTryyqd__Sgqd__yKXEKlF\">withSemaphoreTry&lt;T&gt;(_: () throws -&gt; T) rethrows -&gt; T?<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>T<\/Declaration>",
              "key.column": 27,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
              "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind": "source.lang.swift.decl.generic_type_param",
              "key.length": 1,
              "key.line": 90,
              "key.name": "T",
              "key.namecolumn": 27,
              "key.namelength": 1,
              "key.nameline": 90,
              "key.nameoffset": 5702,
              "key.offset": 5702,
              "key.parsed_declaration": "func withSemaphoreTry<T",
              "key.parsed_scope.end": 90,
              "key.parsed_scope.start": 90,
              "key.typename": "T.Type",
              "key.typeusr": "$sqd__mD",
              "key.usr": "s:7Rubicon11PGSemaphoreP16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp"
            }
          ],
          "key.typename": "<Self, T where Self : PGSemaphore> (Self) -> (() throws -> T) throws -> T?",
          "key.typeusr": "$syqd__Sgqd__yKXEKcluD",
          "key.usr": "s:7Rubicon11PGSemaphoreP16withSemaphoreTryyqd__Sgqd__yKXEKlF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>func withSemaphore&lt;T&gt;(waitUntil until: <Type usr=\"s:10Foundation4DateV\">Date<\/Type>, _ body: () throws -&gt; <Type usr=\"s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\">T<\/Type>) rethrows -&gt; <Type usr=\"s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\">T<\/Type>?<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.rethrows",
              "key.column": 74,
              "key.length": 8,
              "key.line": 103,
              "key.offset": 6619
            }
          ],
          "key.column": 5,
          "key.doc.column": 10,
          "key.doc.comment": "Execute the given closure with the acquired semaphore. This method will attempt to acquire the semaphore,\nexecute the closure, and then release the semaphore. If the semaphore cannot be acquired before the\ntimeout then `nil` is returned without the closure ever being executed.\n\n- Parameters:\n  - until: the absolute time that the method will wait trying to acquire the semaphore.\n  - body: the closure to execute.\n- Returns: The value returned by the closure or `nil` if the semaphore could not be acquired.\n- Throws: Any error thrown by the closure. The semaphore will be released if an error is thrown.",
          "key.doc.declaration": "func withSemaphore<T>(waitUntil until: Date, _ body: () throws -> T) rethrows -> T?",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"103\" column=\"10\"><Name>withSemaphore(waitUntil:_:)<\/Name><USR>s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF<\/USR><Declaration>func withSemaphore&lt;T&gt;(waitUntil until: Date, _ body: () throws -&gt; T) rethrows -&gt; T?<\/Declaration><CommentParts><Abstract><Para>Execute the given closure with the acquired semaphore. This method will attempt to acquire the semaphore, execute the closure, and then release the semaphore. If the semaphore cannot be acquired before the timeout then <codeVoice>nil<\/codeVoice> is returned without the closure ever being executed.<\/Para><\/Abstract><Parameters><Parameter><Name>until<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the absolute time that the method will wait trying to acquire the semaphore.<\/Para><\/Discussion><\/Parameter><Parameter><Name>body<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the closure to execute.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The value returned by the closure or <codeVoice>nil<\/codeVoice> if the semaphore could not be acquired.<\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>Any error thrown by the closure. The semaphore will be released if an error is thrown.<\/Para><\/ThrowsDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 103,
          "key.doc.name": "withSemaphore(waitUntil:_:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "the absolute time that the method will wait trying to acquire the semaphore."
                }
              ],
              "name": "until"
            },
            {
              "discussion": [
                {
                  "Para": "the closure to execute."
                }
              ],
              "name": "body"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The value returned by the closure or `nil` if the semaphore could not be acquired."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 682,
          "key.docline": 93,
          "key.docoffset": 5864,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withSemaphore<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>waitUntil<\/decl.var.parameter.argument_label> <decl.var.parameter.name>until<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Foundation4DateV\">Date<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>() <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\">T<\/ref.generic_type_param>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 83,
          "key.line": 103,
          "key.name": "withSemaphore(waitUntil:_:)",
          "key.namecolumn": 10,
          "key.namelength": 63,
          "key.nameline": 103,
          "key.nameoffset": 6555,
          "key.offset": 6550,
          "key.parsed_declaration": "func withSemaphore<T>(waitUntil until: Date, _ body: () throws -> T) rethrows -> T?",
          "key.parsed_scope.end": 103,
          "key.parsed_scope.start": 103,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF\">withSemaphore&lt;T&gt;(_: () throws -&gt; T) rethrows -&gt; T<\/RelatedName>"
            },
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF\">withSemaphore&lt;T&gt;(_: () throws -&gt; T) rethrows -&gt; T<\/RelatedName>"
            },
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF\">withSemaphore&lt;T&gt;(waitUntil: Date, _: () throws -&gt; T) rethrows -&gt; T?<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>T<\/Declaration>",
              "key.column": 24,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
              "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind": "source.lang.swift.decl.generic_type_param",
              "key.length": 1,
              "key.line": 103,
              "key.name": "T",
              "key.namecolumn": 24,
              "key.namelength": 1,
              "key.nameline": 103,
              "key.nameoffset": 6569,
              "key.offset": 6569,
              "key.parsed_declaration": "func withSemaphore<T",
              "key.parsed_scope.end": 103,
              "key.parsed_scope.start": 103,
              "key.typename": "T.Type",
              "key.typeusr": "$sqd__mD",
              "key.usr": "s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp"
            }
          ],
          "key.typename": "<Self, T where Self : PGSemaphore> (Self) -> (Date, () throws -> T) throws -> T?",
          "key.typeusr": "$s9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKcluD",
          "key.usr": "s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF"
        }
      ],
      "key.typename": "PGSemaphore.Protocol",
      "key.typeusr": "$s7Rubicon11PGSemaphore_pmD",
      "key.usr": "s:7Rubicon11PGSemaphoreP"
    },
    {
      "key.annotated_decl": "<Declaration>public protocol PGSemaphore<\/Declaration>",
      "key.bodycolumn": 24,
      "key.bodylength": 2566,
      "key.bodyline": 106,
      "key.bodyoffset": 6660,
      "key.column": 1,
      "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
      "key.fully_annotated_decl": "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>PGSemaphore<\/decl.name><\/decl.protocol>",
      "key.kind": "source.lang.swift.decl.extension",
      "key.length": 2590,
      "key.line": 106,
      "key.name": "PGSemaphore",
      "key.namecolumn": 11,
      "key.namelength": 11,
      "key.nameline": 106,
      "key.nameoffset": 6647,
      "key.offset": 6637,
      "key.parsed_declaration": "extension PGSemaphore",
      "key.parsed_scope.end": 153,
      "key.parsed_scope.start": 106,
      "key.substructure": [
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>@inlinable public func withSemaphore&lt;T&gt;(_ body: () throws -&gt; <Type usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\">T<\/Type>) rethrows -&gt; <Type usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\">T<\/Type><\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.rethrows",
              "key.column": 69,
              "key.length": 8,
              "key.line": 116,
              "key.offset": 7235
            },
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 16,
              "key.length": 6,
              "key.line": 116,
              "key.offset": 7182
            },
            {
              "key.attribute": "source.decl.attribute.inlinable",
              "key.column": 5,
              "key.length": 10,
              "key.line": 116,
              "key.offset": 7171
            }
          ],
          "key.bodycolumn": 84,
          "key.bodylength": 77,
          "key.bodyline": 116,
          "key.bodyoffset": 7250,
          "key.column": 23,
          "key.doc.column": 28,
          "key.doc.comment": "Execute the given closure with the acquired semaphore. This method will acquire the semaphore, execute the\nclosure, and then release the semaphore.\n\n- Parameter body: The closure to execute.\n- Returns: The value returned by the closure.\n- Throws: Any error thrown by the closure. The semaphore will be released if an error is thrown.",
          "key.doc.declaration": "@inlinable public func withSemaphore<T>(_ body: () throws -> T) rethrows -> T",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"116\" column=\"28\"><Name>withSemaphore(_:)<\/Name><USR>s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF<\/USR><Declaration>@inlinable public func withSemaphore&lt;T&gt;(_ body: () throws -&gt; T) rethrows -&gt; T<\/Declaration><CommentParts><Abstract><Para>Execute the given closure with the acquired semaphore. This method will acquire the semaphore, execute the closure, and then release the semaphore.<\/Para><\/Abstract><Parameters><Parameter><Name>body<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure to execute.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The value returned by the closure.<\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>Any error thrown by the closure. The semaphore will be released if an error is thrown.<\/Para><\/ThrowsDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 116,
          "key.doc.name": "withSemaphore(_:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The closure to execute."
                }
              ],
              "name": "body"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The value returned by the closure."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 386,
          "key.docline": 109,
          "key.docoffset": 6781,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withSemaphore<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>() <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 139,
          "key.line": 116,
          "key.name": "withSemaphore(_:)",
          "key.namecolumn": 28,
          "key.namelength": 40,
          "key.nameline": 116,
          "key.nameoffset": 7194,
          "key.offset": 7189,
          "key.parsed_declaration": "@inlinable public func withSemaphore<T>(_ body: () throws -> T) rethrows -> T",
          "key.parsed_scope.end": 120,
          "key.parsed_scope.start": 116,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF\">withSemaphore&lt;T&gt;(_: () throws -&gt; T) rethrows -&gt; T<\/RelatedName>"
            },
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF\">withSemaphore&lt;T&gt;(waitUntil: Date, _: () throws -&gt; T) rethrows -&gt; T?<\/RelatedName>"
            },
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF\">withSemaphore&lt;T&gt;(waitUntil: Date, _: () throws -&gt; T) rethrows -&gt; T?<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>T<\/Declaration>",
              "key.column": 42,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
              "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind": "source.lang.swift.decl.generic_type_param",
              "key.length": 1,
              "key.line": 116,
              "key.name": "T",
              "key.namecolumn": 42,
              "key.namelength": 1,
              "key.nameline": 116,
              "key.nameoffset": 7208,
              "key.offset": 7208,
              "key.parsed_declaration": "@inlinable public func withSemaphore<T",
              "key.parsed_scope.end": 116,
              "key.parsed_scope.start": 116,
              "key.typename": "T.Type",
              "key.typeusr": "$sqd__mD",
              "key.usr": "s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF1TL_qd__mfp"
            }
          ],
          "key.typename": "<Self, T where Self : PGSemaphore> (Self) -> (() throws -> T) throws -> T",
          "key.typeusr": "$syqd__qd__yKXEKcluD",
          "key.usr": "s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>@inlinable public func withSemaphoreTry&lt;T&gt;(_ body: () throws -&gt; <Type usr=\"s:7Rubicon11PGSemaphorePAAE16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\">T<\/Type>) rethrows -&gt; <Type usr=\"s:7Rubicon11PGSemaphorePAAE16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\">T<\/Type>?<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.rethrows",
              "key.column": 72,
              "key.length": 8,
              "key.line": 131,
              "key.offset": 8073
            },
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 16,
              "key.length": 6,
              "key.line": 131,
              "key.offset": 8017
            },
            {
              "key.attribute": "source.decl.attribute.inlinable",
              "key.column": 5,
              "key.length": 10,
              "key.line": 131,
              "key.offset": 8006
            }
          ],
          "key.bodycolumn": 88,
          "key.bodylength": 106,
          "key.bodyline": 131,
          "key.bodyoffset": 8089,
          "key.column": 23,
          "key.doc.column": 28,
          "key.doc.comment": "Execute the given closure with the acquired semaphore. This method will attempt to acquire the semaphore,\nexecute the closure, and then release the semaphore. If the semaphore cannot be acquired then `nil` is\nreturned without the closure ever being executed.\n\n- Parameter body: The closure to execute.\n- Returns: The value returned by the closure or `nil` if the semaphore could not be acquired.\n- Throws: Any error thrown by the closure. The semaphore will be released if an error is thrown.",
          "key.doc.declaration": "@inlinable public func withSemaphoreTry<T>(_ body: () throws -> T) rethrows -> T?",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"131\" column=\"28\"><Name>withSemaphoreTry(_:)<\/Name><USR>s:7Rubicon11PGSemaphorePAAE16withSemaphoreTryyqd__Sgqd__yKXEKlF<\/USR><Declaration>@inlinable public func withSemaphoreTry&lt;T&gt;(_ body: () throws -&gt; T) rethrows -&gt; T?<\/Declaration><CommentParts><Abstract><Para>Execute the given closure with the acquired semaphore. This method will attempt to acquire the semaphore, execute the closure, and then release the semaphore. If the semaphore cannot be acquired then <codeVoice>nil<\/codeVoice> is returned without the closure ever being executed.<\/Para><\/Abstract><Parameters><Parameter><Name>body<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The closure to execute.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The value returned by the closure or <codeVoice>nil<\/codeVoice> if the semaphore could not be acquired.<\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>Any error thrown by the closure. The semaphore will be released if an error is thrown.<\/Para><\/ThrowsDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 131,
          "key.doc.name": "withSemaphoreTry(_:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "The closure to execute."
                }
              ],
              "name": "body"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The value returned by the closure or `nil` if the semaphore could not be acquired."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 553,
          "key.docline": 123,
          "key.docoffset": 7449,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withSemaphoreTry<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon11PGSemaphorePAAE16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>() <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphorePAAE16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphorePAAE16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp\">T<\/ref.generic_type_param>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 172,
          "key.line": 131,
          "key.name": "withSemaphoreTry(_:)",
          "key.namecolumn": 28,
          "key.namelength": 43,
          "key.nameline": 131,
          "key.nameoffset": 8029,
          "key.offset": 8024,
          "key.parsed_declaration": "@inlinable public func withSemaphoreTry<T>(_ body: () throws -> T) rethrows -> T?",
          "key.parsed_scope.end": 135,
          "key.parsed_scope.start": 131,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphoreP16withSemaphoreTryyqd__Sgqd__yKXEKlF\">withSemaphoreTry&lt;T&gt;(_: () throws -&gt; T) rethrows -&gt; T?<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>T<\/Declaration>",
              "key.column": 45,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
              "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind": "source.lang.swift.decl.generic_type_param",
              "key.length": 1,
              "key.line": 131,
              "key.name": "T",
              "key.namecolumn": 45,
              "key.namelength": 1,
              "key.nameline": 131,
              "key.nameoffset": 8046,
              "key.offset": 8046,
              "key.parsed_declaration": "@inlinable public func withSemaphoreTry<T",
              "key.parsed_scope.end": 131,
              "key.parsed_scope.start": 131,
              "key.typename": "T.Type",
              "key.typeusr": "$sqd__mD",
              "key.usr": "s:7Rubicon11PGSemaphorePAAE16withSemaphoreTryyqd__Sgqd__yKXEKlF1TL_qd__mfp"
            }
          ],
          "key.typename": "<Self, T where Self : PGSemaphore> (Self) -> (() throws -> T) throws -> T?",
          "key.typeusr": "$syqd__Sgqd__yKXEKcluD",
          "key.usr": "s:7Rubicon11PGSemaphorePAAE16withSemaphoreTryyqd__Sgqd__yKXEKlF"
        },
        {
          "key.accessibility": "source.lang.swift.accessibility.public",
          "key.annotated_decl": "<Declaration>@inlinable public func withSemaphore&lt;T&gt;(waitUntil until: <Type usr=\"s:10Foundation4DateV\">Date<\/Type>, _ body: () throws -&gt; <Type usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\">T<\/Type>) rethrows -&gt; <Type usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\">T<\/Type>?<\/Declaration>",
          "key.attributes": [
            {
              "key.attribute": "source.decl.attribute.rethrows",
              "key.column": 92,
              "key.length": 8,
              "key.line": 148,
              "key.offset": 9090
            },
            {
              "key.attribute": "source.decl.attribute.public",
              "key.column": 16,
              "key.length": 6,
              "key.line": 148,
              "key.offset": 9014
            },
            {
              "key.attribute": "source.decl.attribute.inlinable",
              "key.column": 5,
              "key.length": 10,
              "key.line": 148,
              "key.offset": 9003
            }
          ],
          "key.bodycolumn": 108,
          "key.bodylength": 118,
          "key.bodyline": 148,
          "key.bodyoffset": 9106,
          "key.column": 23,
          "key.doc.column": 28,
          "key.doc.comment": "Execute the given closure with the acquired semaphore. This method will attempt to acquire the semaphore,\nexecute the closure, and then release the semaphore. If the semaphore cannot be acquired before the\ntimeout then `nil` is returned without the closure ever being executed.\n\n- Parameters:\n  - until: the absolute time that the method will wait trying to acquire the semaphore.\n  - body: the closure to execute.\n- Returns: The value returned by the closure or `nil` if the semaphore could not be acquired.\n- Throws: Any error thrown by the closure. The semaphore will be released if an error is thrown.",
          "key.doc.declaration": "@inlinable public func withSemaphore<T>(waitUntil until: Date, _ body: () throws -> T) rethrows -> T?",
          "key.doc.file": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.doc.full_as_xml": "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift\" line=\"148\" column=\"28\"><Name>withSemaphore(waitUntil:_:)<\/Name><USR>s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF<\/USR><Declaration>@inlinable public func withSemaphore&lt;T&gt;(waitUntil until: Date, _ body: () throws -&gt; T) rethrows -&gt; T?<\/Declaration><CommentParts><Abstract><Para>Execute the given closure with the acquired semaphore. This method will attempt to acquire the semaphore, execute the closure, and then release the semaphore. If the semaphore cannot be acquired before the timeout then <codeVoice>nil<\/codeVoice> is returned without the closure ever being executed.<\/Para><\/Abstract><Parameters><Parameter><Name>until<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the absolute time that the method will wait trying to acquire the semaphore.<\/Para><\/Discussion><\/Parameter><Parameter><Name>body<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>the closure to execute.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The value returned by the closure or <codeVoice>nil<\/codeVoice> if the semaphore could not be acquired.<\/Para><\/ResultDiscussion><ThrowsDiscussion><Para>Any error thrown by the closure. The semaphore will be released if an error is thrown.<\/Para><\/ThrowsDiscussion><\/CommentParts><\/Function>",
          "key.doc.line": 148,
          "key.doc.name": "withSemaphore(waitUntil:_:)",
          "key.doc.parameters": [
            {
              "discussion": [
                {
                  "Para": "the absolute time that the method will wait trying to acquire the semaphore."
                }
              ],
              "name": "until"
            },
            {
              "discussion": [
                {
                  "Para": "the closure to execute."
                }
              ],
              "name": "body"
            }
          ],
          "key.doc.result_discussion": [
            {
              "Para": "The value returned by the closure or `nil` if the semaphore could not be acquired."
            }
          ],
          "key.doc.type": "Function",
          "key.doccolumn": 5,
          "key.doclength": 682,
          "key.docline": 138,
          "key.docoffset": 8317,
          "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
          "key.fully_annotated_decl": "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withSemaphore<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>waitUntil<\/decl.var.parameter.argument_label> <decl.var.parameter.name>until<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:10Foundation4DateV\">Date<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>() <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\">T<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp\">T<\/ref.generic_type_param>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind": "source.lang.swift.decl.function.method.instance",
          "key.length": 204,
          "key.line": 148,
          "key.name": "withSemaphore(waitUntil:_:)",
          "key.namecolumn": 28,
          "key.namelength": 63,
          "key.nameline": 148,
          "key.nameoffset": 9026,
          "key.offset": 9021,
          "key.parsed_declaration": "@inlinable public func withSemaphore<T>(waitUntil until: Date, _ body: () throws -> T) rethrows -> T?",
          "key.parsed_scope.end": 152,
          "key.parsed_scope.start": 148,
          "key.related_decls": [
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphoreP13withSemaphoreyqd__qd__yKXEKlF\">withSemaphore&lt;T&gt;(_: () throws -&gt; T) rethrows -&gt; T<\/RelatedName>"
            },
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphoreP13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF\">withSemaphore&lt;T&gt;(waitUntil: Date, _: () throws -&gt; T) rethrows -&gt; T?<\/RelatedName>"
            },
            {
              "key.annotated_decl": "<RelatedName usr=\"s:7Rubicon11PGSemaphorePAAE13withSemaphoreyqd__qd__yKXEKlF\">withSemaphore&lt;T&gt;(_: () throws -&gt; T) rethrows -&gt; T<\/RelatedName>"
            }
          ],
          "key.substructure": [
            {
              "key.annotated_decl": "<Declaration>T<\/Declaration>",
              "key.column": 42,
              "key.filepath": "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Concurrency\/PGSemaphore.swift",
              "key.fully_annotated_decl": "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind": "source.lang.swift.decl.generic_type_param",
              "key.length": 1,
              "key.line": 148,
              "key.name": "T",
              "key.namecolumn": 42,
              "key.namelength": 1,
              "key.nameline": 148,
              "key.nameoffset": 9040,
              "key.offset": 9040,
              "key.parsed_declaration": "@inlinable public func withSemaphore<T",
              "key.parsed_scope.end": 148,
              "key.parsed_scope.start": 148,
              "key.typename": "T.Type",
              "key.typeusr": "$sqd__mD",
              "key.usr": "s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF1TL_qd__mfp"
            }
          ],
          "key.typename": "<Self, T where Self : PGSemaphore> (Self) -> (Date, () throws -> T) throws -> T?",
          "key.typeusr": "$s9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKcluD",
          "key.usr": "s:7Rubicon11PGSemaphorePAAE13withSemaphore9waitUntil_qd__Sg10Foundation4DateV_qd__yKXEtKlF"
        }
      ],
      "key.typename": "PGSemaphore.Protocol",
      "key.typeusr": "$s7Rubicon11PGSemaphore_pmD",
      "key.usr": "s:7Rubicon11PGSemaphoreP"
    }
  ]
}
