{
  "key.column" : 1,
  "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
  "key.length" : 38275,
  "key.line" : 1,
  "key.offset" : 0,
  "key.substructure" : [
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline let FormatPattern: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 22,
          "key.offset" : 1141
        }
      ],
      "key.column" : 19,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>FormatPattern<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 187,
      "key.line" : 22,
      "key.name" : "FormatPattern",
      "key.namecolumn" : 23,
      "key.namelength" : 13,
      "key.nameline" : 22,
      "key.nameoffset" : 1163,
      "key.offset" : 1159,
      "key.parsed_declaration" : "@usableFromInline let FormatPattern:       String = \"\\\\%(\\\\%|[nNrR]|(?:([1-9][0-9]*\\\\$|\\\\<)?([ 0#(+,-]*)(?:([0-9]+)(?:\\\\.([1-9][0-9]*))?)?([aAbBcCdeEfgGhHosSxX]|[tT]([aAbBcCdDeFhHIjJklLmMNpQrRsSTyYzZ]))))\"",
      "key.parsed_scope.end" : 22,
      "key.parsed_scope.start" : 22,
      "key.typename" : "String",
      "key.typeusr" : "$sSSD",
      "key.usr" : "s:7Rubicon13FormatPatternSSvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline let TextNaN: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 23,
          "key.offset" : 1347
        }
      ],
      "key.column" : 19,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>TextNaN<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 39,
      "key.line" : 23,
      "key.name" : "TextNaN",
      "key.namecolumn" : 23,
      "key.namelength" : 7,
      "key.nameline" : 23,
      "key.nameoffset" : 1369,
      "key.offset" : 1365,
      "key.parsed_declaration" : "@usableFromInline let TextNaN:             String = \"NaN\"",
      "key.parsed_scope.end" : 23,
      "key.parsed_scope.start" : 23,
      "key.typename" : "String",
      "key.typeusr" : "$sSSD",
      "key.usr" : "s:7Rubicon7TextNaNSSvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline let TextInfinity: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 24,
          "key.offset" : 1405
        }
      ],
      "key.column" : 19,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>TextInfinity<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 44,
      "key.line" : 24,
      "key.name" : "TextInfinity",
      "key.namecolumn" : 23,
      "key.namelength" : 12,
      "key.nameline" : 24,
      "key.nameoffset" : 1427,
      "key.offset" : 1423,
      "key.parsed_declaration" : "@usableFromInline let TextInfinity:        String = \"Infinity\"",
      "key.parsed_scope.end" : 24,
      "key.parsed_scope.start" : 24,
      "key.typename" : "String",
      "key.typeusr" : "$sSSD",
      "key.usr" : "s:7Rubicon12TextInfinitySSvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline let ErrorMessagePrefix: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 25,
          "key.offset" : 1468
        }
      ],
      "key.column" : 19,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ErrorMessagePrefix<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 64,
      "key.line" : 25,
      "key.name" : "ErrorMessagePrefix",
      "key.namecolumn" : 23,
      "key.namelength" : 18,
      "key.nameline" : 25,
      "key.nameoffset" : 1490,
      "key.offset" : 1486,
      "key.parsed_declaration" : "@usableFromInline let ErrorMessagePrefix:  String = \"StringProtocol.format(_:...)\"",
      "key.parsed_scope.end" : 25,
      "key.parsed_scope.start" : 25,
      "key.typename" : "String",
      "key.typeusr" : "$sSSD",
      "key.usr" : "s:7Rubicon18ErrorMessagePrefixSSvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline let WildAssErrorMessage: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 26,
          "key.offset" : 1551
        }
      ],
      "key.column" : 19,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>WildAssErrorMessage<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 95,
      "key.line" : 26,
      "key.name" : "WildAssErrorMessage",
      "key.namecolumn" : 23,
      "key.namelength" : 19,
      "key.nameline" : 26,
      "key.nameoffset" : 1573,
      "key.offset" : 1569,
      "key.parsed_declaration" : "@usableFromInline let WildAssErrorMessage: String = \"Something really bad happened that shouldn't have happened!\"",
      "key.parsed_scope.end" : 26,
      "key.parsed_scope.start" : 26,
      "key.typename" : "String",
      "key.typeusr" : "$sSSD",
      "key.usr" : "s:7Rubicon19WildAssErrorMessageSSvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline let ErrMsgTooFewArgs: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 27,
          "key.offset" : 1665
        }
      ],
      "key.column" : 19,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ErrMsgTooFewArgs<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 57,
      "key.line" : 27,
      "key.name" : "ErrMsgTooFewArgs",
      "key.namecolumn" : 23,
      "key.namelength" : 16,
      "key.nameline" : 27,
      "key.nameoffset" : 1687,
      "key.offset" : 1683,
      "key.parsed_declaration" : "@usableFromInline let ErrMsgTooFewArgs:    String = \"Not enough arguments.\"",
      "key.parsed_scope.end" : 27,
      "key.parsed_scope.start" : 27,
      "key.typename" : "String",
      "key.typeusr" : "$sSSD",
      "key.usr" : "s:7Rubicon16ErrMsgTooFewArgsSSvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline let ErrMsgArgIndex: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 28,
          "key.offset" : 1741
        }
      ],
      "key.column" : 19,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ErrMsgArgIndex<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 65,
      "key.line" : 28,
      "key.name" : "ErrMsgArgIndex",
      "key.namecolumn" : 23,
      "key.namelength" : 14,
      "key.nameline" : 28,
      "key.nameoffset" : 1763,
      "key.offset" : 1759,
      "key.parsed_declaration" : "@usableFromInline let ErrMsgArgIndex:      String = \"Argument index out of bounds.\"",
      "key.parsed_scope.end" : 28,
      "key.parsed_scope.start" : 28,
      "key.typename" : "String",
      "key.typeusr" : "$sSSD",
      "key.usr" : "s:7Rubicon14ErrMsgArgIndexSSvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline let ErrMsgNoPrevArg: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 29,
          "key.offset" : 1825
        }
      ],
      "key.column" : 19,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ErrMsgNoPrevArg<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 57,
      "key.line" : 29,
      "key.name" : "ErrMsgNoPrevArg",
      "key.namecolumn" : 23,
      "key.namelength" : 15,
      "key.nameline" : 29,
      "key.nameoffset" : 1847,
      "key.offset" : 1843,
      "key.parsed_declaration" : "@usableFromInline let ErrMsgNoPrevArg:     String = \"No previous argument.\"",
      "key.parsed_scope.end" : 29,
      "key.parsed_scope.start" : 29,
      "key.typename" : "String",
      "key.typeusr" : "$sSSD",
      "key.usr" : "s:7Rubicon15ErrMsgNoPrevArgSSvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline let ErrMsgArgNotDate: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 30,
          "key.offset" : 1901
        }
      ],
      "key.column" : 19,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>ErrMsgArgNotDate<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 59,
      "key.line" : 30,
      "key.name" : "ErrMsgArgNotDate",
      "key.namecolumn" : 23,
      "key.namelength" : 16,
      "key.nameline" : 30,
      "key.nameoffset" : 1923,
      "key.offset" : 1919,
      "key.parsed_declaration" : "@usableFromInline let ErrMsgArgNotDate:    String = \"Argument is not a date.\"",
      "key.parsed_scope.end" : 30,
      "key.parsed_scope.start" : 30,
      "key.typename" : "String",
      "key.typeusr" : "$sSSD",
      "key.usr" : "s:7Rubicon16ErrMsgArgNotDateSSvp"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.public",
      "key.annotated_decl" : "<Declaration>public var StringFormatIsStrict: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.public",
          "key.column" : 1,
          "key.length" : 6,
          "key.line" : 33,
          "key.offset" : 1987
        }
      ],
      "key.column" : 8,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>StringFormatIsStrict<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.global>",
      "key.kind" : "source.lang.swift.decl.var.global",
      "key.length" : 38,
      "key.line" : 33,
      "key.name" : "StringFormatIsStrict",
      "key.namecolumn" : 12,
      "key.namelength" : 20,
      "key.nameline" : 33,
      "key.nameoffset" : 1998,
      "key.offset" : 1994,
      "key.parsed_declaration" : "public var StringFormatIsStrict: Bool = false",
      "key.parsed_scope.end" : 33,
      "key.parsed_scope.start" : 33,
      "key.setter_accessibility" : "source.lang.swift.accessibility.public",
      "key.typename" : "Bool",
      "key.typeusr" : "$sSbD",
      "key.usr" : "s:7Rubicon20StringFormatIsStrictSbvp"
    },
    {
      "key.annotated_decl" : "<Declaration>protocol StringProtocol : <Type usr=\"s:SK\">BidirectionalCollection<\/Type>, <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:s32ExpressibleByStringInterpolationP\">ExpressibleByStringInterpolation<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s25LosslessStringConvertibleP\">LosslessStringConvertible<\/Type>, <Type usr=\"s:s16TextOutputStreamP\">TextOutputStream<\/Type>, <Type usr=\"s:s20TextOutputStreamableP\">TextOutputStreamable<\/Type> where <Type usr=\"s:Sy4Selfxmfp\">Self<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type> == <Type usr=\"s:SJ\">Character<\/Type>, <Type usr=\"s:Sy4Selfxmfp\">Self<\/Type>.<Type usr=\"s:Sl5IndexQa\">Index<\/Type> == <Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type>, <Type usr=\"s:Sy4Selfxmfp\">Self<\/Type>.<Type usr=\"s:s32ExpressibleByStringInterpolationP0cD0Qa\">StringInterpolation<\/Type> == <Type usr=\"s:s26DefaultStringInterpolationV\">DefaultStringInterpolation<\/Type>, <Type usr=\"s:Sy4Selfxmfp\">Self<\/Type>.<Type usr=\"s:Sl11SubSequenceQa\">SubSequence<\/Type> : <Type usr=\"s:Sy\">StringProtocol<\/Type><\/Declaration>",
      "key.bodycolumn" : 27,
      "key.bodylength" : 32678,
      "key.bodyline" : 35,
      "key.bodyoffset" : 2060,
      "key.column" : 1,
      "key.doc.declaration" : "protocol StringProtocol : BidirectionalCollection, Comparable, ExpressibleByStringInterpolation, Hashable, LosslessStringConvertible, TextOutputStream, TextOutputStreamable where Self.Element == Character, Self.Index == String.Index, Self.StringInterpolation == DefaultStringInterpolation, Self.SubSequence : StringProtocol",
      "key.doc.discussion" : [
        {
          "Para" : "Do not declare new conformances to `StringProtocol`. Only the `String` and `Substring` types in the standard library are valid conforming types."
        }
      ],
      "key.doc.full_as_xml" : "<Class><Name>StringProtocol<\/Name><USR>s:Sy<\/USR><Declaration>protocol StringProtocol : BidirectionalCollection, Comparable, ExpressibleByStringInterpolation, Hashable, LosslessStringConvertible, TextOutputStream, TextOutputStreamable where Self.Element == Character, Self.Index == String.Index, Self.StringInterpolation == DefaultStringInterpolation, Self.SubSequence : StringProtocol<\/Declaration><CommentParts><Abstract><Para>A type that can represent a string as a collection of characters.<\/Para><\/Abstract><Discussion><Para>Do not declare new conformances to <codeVoice>StringProtocol<\/codeVoice>. Only the <codeVoice>String<\/codeVoice> and <codeVoice>Substring<\/codeVoice> types in the standard library are valid conforming types.<\/Para><\/Discussion><\/CommentParts><\/Class>",
      "key.doc.name" : "StringProtocol",
      "key.doc.type" : "Class",
      "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>StringProtocol<\/decl.name> : <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol>, <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol>, <ref.protocol usr=\"s:s32ExpressibleByStringInterpolationP\">ExpressibleByStringInterpolation<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s25LosslessStringConvertibleP\">LosslessStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:s16TextOutputStreamP\">TextOutputStream<\/ref.protocol>, <ref.protocol usr=\"s:s20TextOutputStreamableP\">TextOutputStreamable<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sy4Selfxmfp\">Self<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype> == <ref.struct usr=\"s:SJ\">Character<\/ref.struct><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sy4Selfxmfp\">Self<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:Sl5IndexQa\">Index<\/ref.associatedtype> == <ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sy4Selfxmfp\">Self<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:s32ExpressibleByStringInterpolationP0cD0Qa\">StringInterpolation<\/ref.associatedtype> == <ref.struct usr=\"s:s26DefaultStringInterpolationV\">DefaultStringInterpolation<\/ref.struct><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sy4Selfxmfp\">Self<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:Sl11SubSequenceQa\">SubSequence<\/ref.associatedtype> : <ref.protocol usr=\"s:Sy\">StringProtocol<\/ref.protocol><\/decl.generic_type_requirement><\/decl.protocol>",
      "key.groupname" : "String",
      "key.is_system" : true,
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 32705,
      "key.line" : 35,
      "key.modulename" : "Swift",
      "key.name" : "StringProtocol",
      "key.namecolumn" : 11,
      "key.namelength" : 14,
      "key.nameline" : 35,
      "key.nameoffset" : 2044,
      "key.offset" : 2034,
      "key.parsed_declaration" : "extension StringProtocol",
      "key.parsed_scope.end" : 613,
      "key.parsed_scope.start" : 35,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public func format(_ args: Any?...) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 44,
              "key.offset" : 2467
            }
          ],
          "key.bodycolumn" : 52,
          "key.bodylength" : 3513,
          "key.bodyline" : 44,
          "key.bodyoffset" : 2514,
          "key.column" : 12,
          "key.doc.column" : 17,
          "key.doc.comment" : "Allows creating a string using printf like formatting strings and arguments. However this version is\nmodeled more after the Java version than the C version in order to make it a little easier to use.\n\n\n- Parameter args:\n- Returns:",
          "key.doc.declaration" : "public func format(_ args: Any?...) -> String",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"44\" column=\"17\"><Name>format(_:)<\/Name><USR>s:Sy7RubiconE6formatySSypSgd_tF<\/USR><Declaration>public func format(_ args: Any?...) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Allows creating a string using printf like formatting strings and arguments. However this version is modeled more after the Java version than the C version in order to make it a little easier to use.<\/Para><\/Abstract><Parameters><Parameter><Name>args<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para><\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para><\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 44,
          "key.doc.name" : "format(_:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : ""
                }
              ],
              "name" : "args"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : ""
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 283,
          "key.docline" : 37,
          "key.docoffset" : 2180,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>format<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>args<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.parameter.type>...<\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 3554,
          "key.line" : 44,
          "key.name" : "format(_:)",
          "key.namecolumn" : 17,
          "key.namelength" : 23,
          "key.nameline" : 44,
          "key.nameoffset" : 2479,
          "key.offset" : 2474,
          "key.parsed_declaration" : "public func format(_ args: Any?...) -> String",
          "key.parsed_scope.end" : 101,
          "key.parsed_scope.start" : 44,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>var out: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>out<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 27,
              "key.line" : 45,
              "key.name" : "out",
              "key.namecolumn" : 13,
              "key.namelength" : 3,
              "key.nameline" : 45,
              "key.nameoffset" : 2527,
              "key.offset" : 2523,
              "key.parsed_declaration" : "var out:  String       = \"\"",
              "key.parsed_scope.end" : 45,
              "key.parsed_scope.start" : 45,
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:Sy7RubiconE6formatySSypSgd_tF3outL_SSvp"
            },
            {
              "key.annotated_decl" : "<Declaration>var idx: <Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>idx<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 35,
              "key.line" : 46,
              "key.name" : "idx",
              "key.namecolumn" : 13,
              "key.namelength" : 3,
              "key.nameline" : 46,
              "key.nameoffset" : 2563,
              "key.offset" : 2559,
              "key.parsed_declaration" : "var idx:  String.Index = startIndex",
              "key.parsed_scope.end" : 46,
              "key.parsed_scope.start" : 46,
              "key.typename" : "String.Index",
              "key.typeusr" : "$sSS5IndexVD",
              "key.usr" : "s:Sy7RubiconE6formatySSypSgd_tF3idxL_SS5IndexVvp"
            },
            {
              "key.annotated_decl" : "<Declaration>var aIdx: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>aIdx<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 40,
              "key.line" : 47,
              "key.name" : "aIdx",
              "key.namecolumn" : 13,
              "key.namelength" : 4,
              "key.nameline" : 47,
              "key.nameoffset" : 2607,
              "key.offset" : 2603,
              "key.parsed_declaration" : "var aIdx: Int          = args.startIndex",
              "key.parsed_scope.end" : 47,
              "key.parsed_scope.start" : 47,
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:Sy7RubiconE6formatySSypSgd_tF4aIdxL_Sivp"
            },
            {
              "key.annotated_decl" : "<Declaration>var pIdx: <Type usr=\"s:Si\">Int<\/Type>?<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>pIdx<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 28,
              "key.line" : 48,
              "key.name" : "pIdx",
              "key.namecolumn" : 13,
              "key.namelength" : 4,
              "key.nameline" : 48,
              "key.nameoffset" : 2656,
              "key.offset" : 2652,
              "key.parsed_declaration" : "var pIdx: Int?         = nil",
              "key.parsed_scope.end" : 48,
              "key.parsed_scope.start" : 48,
              "key.typename" : "Int?",
              "key.typeusr" : "$sSiSgD",
              "key.usr" : "s:Sy7RubiconE6formatySSypSgd_tF4pIdxL_SiSgvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (Any?...) -> String",
          "key.typeusr" : "$sySSypSgd_tcD",
          "key.usr" : "s:Sy7RubiconE6formatySSypSgd_tF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatDateTime(to out: inout <Type usr=\"s:SS\">String<\/Type>, dateSpecifier tSpec: <Type usr=\"s:SS\">String<\/Type>?, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 113,
              "key.offset" : 6433
            }
          ],
          "key.bodycolumn" : 136,
          "key.bodylength" : 5093,
          "key.bodyline" : 113,
          "key.bodyoffset" : 6564,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format the argument as a date\/time.\n\n- Parameters:\n  - out: The output String.\n  - tSpec: The date\/time conversion specifier.\n  - arg:  The argument\n  - scale: The scale (width).\n  - flags: The formatting flags.",
          "key.doc.declaration" : "@inlinable func formatDateTime(to out: inout String, dateSpecifier tSpec: String?, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"113\" column=\"21\"><Name>formatDateTime(to:dateSpecifier:argument:scale:flags:)<\/Name><USR>s:Sy7RubiconE14formatDateTime2to13dateSpecifier8argument5scale5flagsySSz_SSSgypSiAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatDateTime(to out: inout String, dateSpecifier tSpec: String?, argument arg: Any, scale: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Format the argument as a date\/time.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output String.<\/Para><\/Discussion><\/Parameter><Parameter><Name>tSpec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The date\/time conversion specifier.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (width).<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 113,
          "key.doc.name" : "formatDateTime(to:dateSpecifier:argument:scale:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output String."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The date\/time conversion specifier."
                }
              ],
              "name" : "tSpec"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument"
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (width)."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 280,
          "key.docline" : 104,
          "key.docoffset" : 6149,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatDateTime<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>dateSpecifier<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tSpec<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 5214,
          "key.line" : 113,
          "key.name" : "formatDateTime(to:dateSpecifier:argument:scale:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 113,
          "key.nameline" : 113,
          "key.nameoffset" : 6449,
          "key.offset" : 6444,
          "key.parsed_declaration" : "@inlinable func formatDateTime(to out: inout String, dateSpecifier tSpec: String?, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 166,
          "key.parsed_scope.start" : 113,
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, String?, Any, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to13dateSpecifier8argument5scale5flagsySSz_SSSgypSi7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE14formatDateTime2to13dateSpecifier8argument5scale5flagsySSz_SSSgypSiAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func getDateFromArgument(argument arg: Any) -&gt; <Type usr=\"s:10Foundation4DateV\">Date<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 174,
              "key.offset" : 12005
            }
          ],
          "key.bodycolumn" : 70,
          "key.bodylength" : 1000,
          "key.bodyline" : 174,
          "key.bodyoffset" : 12070,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Attempt to get an instance of `Date` from the argument.\n\n- Parameter arg: The argument.\n- Returns: An instance of `Date` or `nil` if the argument could not be transformed into a `Date`.",
          "key.doc.declaration" : "@inlinable func getDateFromArgument(argument arg: Any) -> Date?",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"174\" column=\"21\"><Name>getDateFromArgument(argument:)<\/Name><USR>s:Sy7RubiconE19getDateFromArgument8argument10Foundation0C0VSgyp_tF<\/USR><Declaration>@inlinable func getDateFromArgument(argument arg: Any) -&gt; Date?<\/Declaration><CommentParts><Abstract><Para>Attempt to get an instance of <codeVoice>Date<\/codeVoice> from the argument.<\/Para><\/Abstract><Parameters><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>An instance of <codeVoice>Date<\/codeVoice> or <codeVoice>nil<\/codeVoice> if the argument could not be transformed into a <codeVoice>Date<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 174,
          "key.doc.name" : "getDateFromArgument(argument:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "An instance of `Date` or `nil` if the argument could not be transformed into a `Date`."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 222,
          "key.docline" : 169,
          "key.docoffset" : 11779,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getDateFromArgument<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:10Foundation4DateV\">Date<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 1055,
          "key.line" : 174,
          "key.name" : "getDateFromArgument(argument:)",
          "key.namecolumn" : 21,
          "key.namelength" : 38,
          "key.nameline" : 174,
          "key.nameoffset" : 12021,
          "key.offset" : 12016,
          "key.parsed_declaration" : "@inlinable func getDateFromArgument(argument arg: Any) -> Date?",
          "key.parsed_scope.end" : 191,
          "key.parsed_scope.start" : 174,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let oneSecInNanos: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>oneSecInNanos<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 43,
              "key.line" : 175,
              "key.name" : "oneSecInNanos",
              "key.namecolumn" : 13,
              "key.namelength" : 13,
              "key.nameline" : 175,
              "key.nameoffset" : 12083,
              "key.offset" : 12079,
              "key.parsed_declaration" : "let oneSecInNanos: Double = 1_000_000_000.0",
              "key.parsed_scope.end" : 175,
              "key.parsed_scope.start" : 175,
              "key.typename" : "Double",
              "key.typeusr" : "$sSdD",
              "key.usr" : "s:Sy7RubiconE19getDateFromArgument8argument10Foundation0C0VSgyp_tF13oneSecInNanosL_Sdvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (Any) -> Date?",
          "key.typeusr" : "$s8argument10Foundation4DateVSgyp_tcD",
          "key.usr" : "s:Sy7RubiconE19getDateFromArgument8argument10Foundation0C0VSgyp_tF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatDecimalOrScientific(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, prec: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 214,
              "key.offset" : 14169
            }
          ],
          "key.bodycolumn" : 128,
          "key.bodylength" : 307,
          "key.bodyline" : 214,
          "key.bodyoffset" : 14292,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format the argument as either a floating point or in scientific notation depending on the magnitude.\n\nAfter rounding for the precision, the formatting of the resulting magnitude `m` depends on its value.\n\nIf `m` is greater than or equal to 10<sup>-4<\/sup> but less than 10<sup>precision<\/sup> then it is\nrepresented in decimal format.\n\nIf `m` is less than 10<sup>-4<\/sup> or greater than or equal to 10<sup>precision<\/sup>, then it is\nrepresented in computerized scientific notation.\n\nThe total number of significant digits in `m` is equal to the precision. If the precision is not\nspecified, then the default value is 6. If the precision is 0, then it is taken to be 1.\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - scale: The scale.\n  - prec: The precision.\n  - flags: The formatting flags.",
          "key.doc.declaration" : "@inlinable func formatDecimalOrScientific(to out: inout String, argument arg: Any, scale: Int, prec: Int, flags: FlagSet)",
          "key.doc.discussion" : [
            {
              "Para" : "After rounding for the precision, the formatting of the resulting magnitude `m` depends on its value."
            },
            {
              "Para" : "If `m` is greater than or equal to 10<sup>-4<\/sup> but less than 10<sup>precision<\/sup> then it is represented in decimal format."
            },
            {
              "Para" : "If `m` is less than 10<sup>-4<\/sup> or greater than or equal to 10<sup>precision<\/sup>, then it is represented in computerized scientific notation."
            },
            {
              "Para" : "The total number of significant digits in `m` is equal to the precision. If the precision is not specified, then the default value is 6. If the precision is 0, then it is taken to be 1."
            }
          ],
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"214\" column=\"21\"><Name>formatDecimalOrScientific(to:argument:scale:prec:flags:)<\/Name><USR>s:Sy7RubiconE25formatDecimalOrScientific2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatDecimalOrScientific(to out: inout String, argument arg: Any, scale: Int, prec: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Format the argument as either a floating point or in scientific notation depending on the magnitude.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale.<\/Para><\/Discussion><\/Parameter><Parameter><Name>prec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The precision.<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>After rounding for the precision, the formatting of the resulting magnitude <codeVoice>m<\/codeVoice> depends on its value.<\/Para><Para>If <codeVoice>m<\/codeVoice> is greater than or equal to 10<rawHTML><![CDATA[<sup>]]><\/rawHTML>-4<rawHTML><![CDATA[<\/sup>]]><\/rawHTML> but less than 10<rawHTML><![CDATA[<sup>]]><\/rawHTML>precision<rawHTML><![CDATA[<\/sup>]]><\/rawHTML> then it is represented in decimal format.<\/Para><Para>If <codeVoice>m<\/codeVoice> is less than 10<rawHTML><![CDATA[<sup>]]><\/rawHTML>-4<rawHTML><![CDATA[<\/sup>]]><\/rawHTML> or greater than or equal to 10<rawHTML><![CDATA[<sup>]]><\/rawHTML>precision<rawHTML><![CDATA[<\/sup>]]><\/rawHTML>, then it is represented in computerized scientific notation.<\/Para><Para>The total number of significant digits in <codeVoice>m<\/codeVoice> is equal to the precision. If the precision is not specified, then the default value is 6. If the precision is 0, then it is taken to be 1.<\/Para><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.line" : 214,
          "key.doc.name" : "formatDecimalOrScientific(to:argument:scale:prec:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The precision."
                }
              ],
              "name" : "prec"
            },
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 973,
          "key.docline" : 194,
          "key.docoffset" : 13192,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatDecimalOrScientific<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>prec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 420,
          "key.line" : 214,
          "key.name" : "formatDecimalOrScientific(to:argument:scale:prec:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 105,
          "key.nameline" : 214,
          "key.nameoffset" : 14185,
          "key.offset" : 14180,
          "key.parsed_declaration" : "@inlinable func formatDecimalOrScientific(to out: inout String, argument arg: Any, scale: Int, prec: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 218,
          "key.parsed_scope.start" : 214,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sy7RubiconE25formatDecimalOrScientific2to5value5scale4prec5flagsySSz_SdS2iAA7FlagSetCtF\">formatDecimalOrScientific(to:value:scale:prec:flags:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let dbl: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dbl<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 29,
              "key.line" : 215,
              "key.name" : "dbl",
              "key.namecolumn" : 13,
              "key.namelength" : 3,
              "key.nameline" : 215,
              "key.nameoffset" : 14305,
              "key.offset" : 14301,
              "key.parsed_declaration" : "let dbl = getArgAsDouble(arg)",
              "key.parsed_scope.end" : 215,
              "key.parsed_scope.start" : 215,
              "key.typename" : "Double",
              "key.typeusr" : "$sSdD",
              "key.usr" : "s:Sy7RubiconE25formatDecimalOrScientific2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF3dblL_Sdvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any, Int, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5scale4prec5flagsySSz_ypS2i7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE25formatDecimalOrScientific2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatDecimalOrScientific(to out: inout <Type usr=\"s:SS\">String<\/Type>, value: <Type usr=\"s:Sd\">Double<\/Type>, scale: <Type usr=\"s:Si\">Int<\/Type>, prec: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 231,
              "key.offset" : 15089
            }
          ],
          "key.bodycolumn" : 124,
          "key.bodylength" : 276,
          "key.bodyline" : 231,
          "key.bodyoffset" : 15208,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Called by `formatDecimalOrScientific(to:argument:scale:prec:flags:)` after the double value has been\nrounded to the provided precision.\n\n- Parameters:\n  - out: The output string.\n  - value: The double value.\n  - scale: The scale.\n  - prec: The precision.\n  - flags: The formatting flags.",
          "key.doc.declaration" : "@inlinable func formatDecimalOrScientific(to out: inout String, value: Double, scale: Int, prec: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"231\" column=\"21\"><Name>formatDecimalOrScientific(to:value:scale:prec:flags:)<\/Name><USR>s:Sy7RubiconE25formatDecimalOrScientific2to5value5scale4prec5flagsySSz_SdS2iAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatDecimalOrScientific(to out: inout String, value: Double, scale: Int, prec: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Called by <codeVoice>formatDecimalOrScientific(to:argument:scale:prec:flags:)<\/codeVoice> after the double value has been rounded to the provided precision.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>value<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The double value.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale.<\/Para><\/Discussion><\/Parameter><Parameter><Name>prec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The precision.<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 231,
          "key.doc.name" : "formatDecimalOrScientific(to:value:scale:prec:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The double value."
                }
              ],
              "name" : "value"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The precision."
                }
              ],
              "name" : "prec"
            },
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 364,
          "key.docline" : 221,
          "key.docoffset" : 14721,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatDecimalOrScientific<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>value<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>prec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 385,
          "key.line" : 231,
          "key.name" : "formatDecimalOrScientific(to:value:scale:prec:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 101,
          "key.nameline" : 231,
          "key.nameoffset" : 15105,
          "key.offset" : 15100,
          "key.parsed_declaration" : "@inlinable func formatDecimalOrScientific(to out: inout String, value: Double, scale: Int, prec: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 234,
          "key.parsed_scope.start" : 231,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sy7RubiconE25formatDecimalOrScientific2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF\">formatDecimalOrScientific(to:argument:scale:prec:flags:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Double, Int, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to5value5scale4prec5flagsySSz_SdS2i7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE25formatDecimalOrScientific2to5value5scale4prec5flagsySSz_SdS2iAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatScientific(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, prec: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 246,
              "key.offset" : 15948
            }
          ],
          "key.bodycolumn" : 119,
          "key.bodylength" : 277,
          "key.bodyline" : 246,
          "key.bodyoffset" : 16062,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format the argument as a floating point value in scientific (exponential) form.\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - scale: The scale (width).\n  - prec: The precision (number of places after the decimal.\n  - flags: The formatting flags.",
          "key.doc.declaration" : "@inlinable func formatScientific(to out: inout String, argument arg: Any, scale: Int, prec: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"246\" column=\"21\"><Name>formatScientific(to:argument:scale:prec:flags:)<\/Name><USR>s:Sy7RubiconE16formatScientific2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatScientific(to out: inout String, argument arg: Any, scale: Int, prec: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Format the argument as a floating point value in scientific (exponential) form.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (width).<\/Para><\/Discussion><\/Parameter><Parameter><Name>prec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The precision (number of places after the decimal.<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 246,
          "key.doc.name" : "formatScientific(to:argument:scale:prec:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (width)."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The precision (number of places after the decimal."
                }
              ],
              "name" : "prec"
            },
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 338,
          "key.docline" : 237,
          "key.docoffset" : 15606,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatScientific<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>prec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 381,
          "key.line" : 246,
          "key.name" : "formatScientific(to:argument:scale:prec:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 96,
          "key.nameline" : 246,
          "key.nameoffset" : 15964,
          "key.offset" : 15959,
          "key.parsed_declaration" : "@inlinable func formatScientific(to out: inout String, argument arg: Any, scale: Int, prec: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 251,
          "key.parsed_scope.start" : 246,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let f: <Type usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>f<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/ref.class><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 73,
              "key.line" : 247,
              "key.name" : "f",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 247,
              "key.nameoffset" : 16075,
              "key.offset" : 16071,
              "key.parsed_declaration" : "let f = getFloatingPointFormatter(flags: flags, scale: scale, prec: prec)",
              "key.parsed_scope.end" : 247,
              "key.parsed_scope.start" : 247,
              "key.typename" : "NumberFormatter",
              "key.typeusr" : "$sSo17NSNumberFormatterCD",
              "key.usr" : "s:Sy7RubiconE16formatScientific2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF1fL_So17NSNumberFormatterCvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any, Int, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5scale4prec5flagsySSz_ypS2i7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE16formatScientific2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatCharacter(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 263,
              "key.offset" : 16850
            }
          ],
          "key.bodycolumn" : 107,
          "key.bodylength" : 182,
          "key.bodyline" : 263,
          "key.bodyoffset" : 16952,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format the argument as a character. If the argument is a string, or a type that can be converted to a\nstring, that has more than one character, then only the first character is displayed.\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - scale: The scale (width).\n  - flags: The formatting flags.",
          "key.doc.declaration" : "@inlinable func formatCharacter(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"263\" column=\"21\"><Name>formatCharacter(to:argument:scale:flags:)<\/Name><USR>s:Sy7RubiconE15formatCharacter2to8argument5scale5flagsySSz_ypSiAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatCharacter(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Format the argument as a character. If the argument is a string, or a type that can be converted to a string, that has more than one character, then only the first character is displayed.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (width).<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 263,
          "key.doc.name" : "formatCharacter(to:argument:scale:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (width)."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 385,
          "key.docline" : 254,
          "key.docoffset" : 16461,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatCharacter<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 274,
          "key.line" : 263,
          "key.name" : "formatCharacter(to:argument:scale:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 84,
          "key.nameline" : 263,
          "key.nameoffset" : 16866,
          "key.offset" : 16861,
          "key.parsed_declaration" : "@inlinable func formatCharacter(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 266,
          "key.parsed_scope.start" : 263,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let s: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>s<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 31,
              "key.line" : 264,
              "key.name" : "s",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 264,
              "key.nameoffset" : 16965,
              "key.offset" : 16961,
              "key.parsed_declaration" : "let s = String(describing: arg)",
              "key.parsed_scope.end" : 264,
              "key.parsed_scope.start" : 264,
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:Sy7RubiconE15formatCharacter2to8argument5scale5flagsySSz_ypSiAA7FlagSetCtF1sL_SSvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5scale5flagsySSz_ypSi7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE15formatCharacter2to8argument5scale5flagsySSz_ypSiAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatBoolean(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any?, scale: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 279,
              "key.offset" : 17768
            }
          ],
          "key.bodycolumn" : 106,
          "key.bodylength" : 176,
          "key.bodyline" : 279,
          "key.bodyoffset" : 17869,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format the argument as a boolean value. A boolean value displays as \"`true`\" or \"`false`\". If the argument\nis `nil` then it is taken to be \"`false`\". Non-boolean arguments are converted into strings and if the\nstring is equal to \"`true`\" then it is taken as \"`true`\" otherwise it is taken as \"`false`\".\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - scale: The scale (width).\n  - flags: The formatting flags.",
          "key.doc.declaration" : "@inlinable func formatBoolean(to out: inout String, argument arg: Any?, scale: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"279\" column=\"21\"><Name>formatBoolean(to:argument:scale:flags:)<\/Name><USR>s:Sy7RubiconE13formatBoolean2to8argument5scale5flagsySSz_ypSgSiAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatBoolean(to out: inout String, argument arg: Any?, scale: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Format the argument as a boolean value. A boolean value displays as “<codeVoice>true<\/codeVoice>” or “<codeVoice>false<\/codeVoice>”. If the argument is <codeVoice>nil<\/codeVoice> then it is taken to be “<codeVoice>false<\/codeVoice>”. Non-boolean arguments are converted into strings and if the string is equal to “<codeVoice>true<\/codeVoice>” then it is taken as “<codeVoice>true<\/codeVoice>” otherwise it is taken as “<codeVoice>false<\/codeVoice>”.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (width).<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 279,
          "key.doc.name" : "formatBoolean(to:argument:scale:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (width)."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 508,
          "key.docline" : 269,
          "key.docoffset" : 17256,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatBoolean<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 267,
          "key.line" : 279,
          "key.name" : "formatBoolean(to:argument:scale:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 83,
          "key.nameline" : 279,
          "key.nameoffset" : 17784,
          "key.offset" : 17779,
          "key.parsed_declaration" : "@inlinable func formatBoolean(to out: inout String, argument arg: Any?, scale: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 282,
          "key.parsed_scope.start" : 279,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let bool: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>bool<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 67,
              "key.line" : 280,
              "key.name" : "bool",
              "key.namecolumn" : 13,
              "key.namelength" : 4,
              "key.nameline" : 280,
              "key.nameoffset" : 17882,
              "key.offset" : 17878,
              "key.parsed_declaration" : "let bool: Bool = ((arg == nil) ? false : ((arg! as? Bool) ?? true))",
              "key.parsed_scope.end" : 280,
              "key.parsed_scope.start" : 280,
              "key.typename" : "Bool",
              "key.typeusr" : "$sSbD",
              "key.usr" : "s:Sy7RubiconE13formatBoolean2to8argument5scale5flagsySSz_ypSgSiAA7FlagSetCtF4boolL_Sbvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any?, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5scale5flagsySSz_ypSgSi7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE13formatBoolean2to8argument5scale5flagsySSz_ypSgSiAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatOctal(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 293,
              "key.offset" : 18413
            }
          ],
          "key.bodycolumn" : 103,
          "key.bodylength" : 101,
          "key.bodyline" : 293,
          "key.bodyoffset" : 18511,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format the argument as an integer in octal notation.\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - scale: The scale (width).\n  - flags: The formatting flags.",
          "key.doc.declaration" : "@inlinable func formatOctal(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"293\" column=\"21\"><Name>formatOctal(to:argument:scale:flags:)<\/Name><USR>s:Sy7RubiconE11formatOctal2to8argument5scale5flagsySSz_ypSiAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatOctal(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Format the argument as an integer in octal notation.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (width).<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 293,
          "key.doc.name" : "formatOctal(to:argument:scale:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (width)."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 242,
          "key.docline" : 285,
          "key.docoffset" : 18167,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatOctal<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 189,
          "key.line" : 293,
          "key.name" : "formatOctal(to:argument:scale:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 80,
          "key.nameline" : 293,
          "key.nameoffset" : 18429,
          "key.offset" : 18424,
          "key.parsed_declaration" : "@inlinable func formatOctal(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 295,
          "key.parsed_scope.start" : 293,
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5scale5flagsySSz_ypSi7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE11formatOctal2to8argument5scale5flagsySSz_ypSiAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatHexadecimal(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 306,
              "key.offset" : 18986
            }
          ],
          "key.bodycolumn" : 109,
          "key.bodylength" : 103,
          "key.bodyline" : 306,
          "key.bodyoffset" : 19090,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format the argument as an integer in hexadecimal notation.\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - scale: The scale (width).\n  - flags: The formatting flags.",
          "key.doc.declaration" : "@inlinable func formatHexadecimal(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"306\" column=\"21\"><Name>formatHexadecimal(to:argument:scale:flags:)<\/Name><USR>s:Sy7RubiconE17formatHexadecimal2to8argument5scale5flagsySSz_ypSiAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatHexadecimal(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Format the argument as an integer in hexadecimal notation.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (width).<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 306,
          "key.doc.name" : "formatHexadecimal(to:argument:scale:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (width)."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 248,
          "key.docline" : 298,
          "key.docoffset" : 18734,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatHexadecimal<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 197,
          "key.line" : 306,
          "key.name" : "formatHexadecimal(to:argument:scale:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 86,
          "key.nameline" : 306,
          "key.nameoffset" : 19002,
          "key.offset" : 18997,
          "key.parsed_declaration" : "@inlinable func formatHexadecimal(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 308,
          "key.parsed_scope.start" : 306,
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5scale5flagsySSz_ypSi7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE17formatHexadecimal2to8argument5scale5flagsySSz_ypSiAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatRadix(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any, radix: <Type usr=\"s:Si\">Int<\/Type>, prefix: <Type usr=\"s:SS\">String<\/Type>, scale: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 322,
              "key.offset" : 19818
            }
          ],
          "key.bodycolumn" : 131,
          "key.bodylength" : 467,
          "key.bodyline" : 322,
          "key.bodyoffset" : 19944,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format the argument as an integer in the given base such as 16 (hexadecimal) or 8 (octal).\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - radix: The radix (base) for the representation.\n  - prefix: The prefix to put on the representation if the alternate form is chosen such as \"0x\" for\n            hexadecimal or \"0\" for octal.\n  - scale: The scale (width).\n  - flags: The formatting flags.",
          "key.doc.declaration" : "@inlinable func formatRadix(to out: inout String, argument arg: Any, radix: Int, prefix: String, scale: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"322\" column=\"21\"><Name>formatRadix(to:argument:radix:prefix:scale:flags:)<\/Name><USR>s:Sy7RubiconE11formatRadix2to8argument5radix6prefix5scale5flagsySSz_ypSiSSSiAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatRadix(to out: inout String, argument arg: Any, radix: Int, prefix: String, scale: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Format the argument as an integer in the given base such as 16 (hexadecimal) or 8 (octal).<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>radix<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The radix (base) for the representation.<\/Para><\/Discussion><\/Parameter><Parameter><Name>prefix<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The prefix to put on the representation if the alternate form is chosen such as “0x” for hexadecimal or “0” for octal.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (width).<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 322,
          "key.doc.name" : "formatRadix(to:argument:radix:prefix:scale:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The radix (base) for the representation."
                }
              ],
              "name" : "radix"
            },
            {
              "discussion" : [
                {
                  "Para" : "The prefix to put on the representation if the alternate form is chosen such as “0x” for hexadecimal or “0” for octal."
                }
              ],
              "name" : "prefix"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (width)."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 499,
          "key.docline" : 311,
          "key.docoffset" : 19315,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatRadix<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>radix<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>prefix<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 583,
          "key.line" : 322,
          "key.name" : "formatRadix(to:argument:radix:prefix:scale:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 108,
          "key.nameline" : 322,
          "key.nameoffset" : 19834,
          "key.offset" : 19829,
          "key.parsed_declaration" : "@inlinable func formatRadix(to out: inout String, argument arg: Any, radix: Int, prefix: String, scale: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 329,
          "key.parsed_scope.start" : 322,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>var s: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>s<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 32,
              "key.line" : 324,
              "key.name" : "s",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 324,
              "key.nameoffset" : 20083,
              "key.offset" : 20079,
              "key.parsed_declaration" : "var s  = String(i, radix: radix)",
              "key.parsed_scope.end" : 324,
              "key.parsed_scope.start" : 324,
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:Sy7RubiconE11formatRadix2to8argument5radix6prefix5scale5flagsySSz_ypSiSSSiAA7FlagSetCtF1sL_SSvp"
            },
            {
              "key.annotated_decl" : "<Declaration>var ip: <Type usr=\"s:SS\">String<\/Type>.<Type usr=\"s:SS5IndexV\">Index<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>ip<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct>.<ref.struct usr=\"s:SS5IndexV\">Index<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 21,
              "key.line" : 325,
              "key.name" : "ip",
              "key.namecolumn" : 13,
              "key.namelength" : 2,
              "key.nameline" : 325,
              "key.nameoffset" : 20124,
              "key.offset" : 20120,
              "key.parsed_declaration" : "var ip = s.startIndex",
              "key.parsed_scope.end" : 325,
              "key.parsed_scope.start" : 325,
              "key.typename" : "String.Index",
              "key.typeusr" : "$sSS5IndexVD",
              "key.usr" : "s:Sy7RubiconE11formatRadix2to8argument5radix6prefix5scale5flagsySSz_ypSiSSSiAA7FlagSetCtF2ipL_SS5IndexVvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any, Int, String, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5radix6prefix5scale5flagsySSz_ypSiSSSi7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE11formatRadix2to8argument5radix6prefix5scale5flagsySSz_ypSiSSSiAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatInteger(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 340,
              "key.offset" : 20734
            }
          ],
          "key.bodycolumn" : 105,
          "key.bodylength" : 204,
          "key.bodyline" : 340,
          "key.bodyoffset" : 20834,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Formats an integer number.\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - scale: The scale.\n  - flags: The flags.",
          "key.doc.declaration" : "@inlinable func formatInteger(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"340\" column=\"21\"><Name>formatInteger(to:argument:scale:flags:)<\/Name><USR>s:Sy7RubiconE13formatInteger2to8argument5scale5flagsySSz_ypSiAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatInteger(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Formats an integer number.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale.<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 340,
          "key.doc.name" : "formatInteger(to:argument:scale:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 197,
          "key.docline" : 332,
          "key.docoffset" : 20533,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatInteger<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 294,
          "key.line" : 340,
          "key.name" : "formatInteger(to:argument:scale:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 82,
          "key.nameline" : 340,
          "key.nameoffset" : 20750,
          "key.offset" : 20745,
          "key.parsed_declaration" : "@inlinable func formatInteger(to out: inout String, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 343,
          "key.parsed_scope.start" : 340,
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5scale5flagsySSz_ypSi7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE13formatInteger2to8argument5scale5flagsySSz_ypSiAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatFloatingPoint(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, prec: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 355,
              "key.offset" : 21400
            }
          ],
          "key.bodycolumn" : 122,
          "key.bodylength" : 164,
          "key.bodyline" : 355,
          "key.bodyoffset" : 21517,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Formats a floating point number.\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - scale: The scale.\n  - prec: The precision.\n  - flags: The flags.",
          "key.doc.declaration" : "@inlinable func formatFloatingPoint(to out: inout String, argument arg: Any, scale: Int, prec: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"355\" column=\"21\"><Name>formatFloatingPoint(to:argument:scale:prec:flags:)<\/Name><USR>s:Sy7RubiconE19formatFloatingPoint2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatFloatingPoint(to out: inout String, argument arg: Any, scale: Int, prec: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Formats a floating point number.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale.<\/Para><\/Discussion><\/Parameter><Parameter><Name>prec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The precision.<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 355,
          "key.doc.name" : "formatFloatingPoint(to:argument:scale:prec:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The precision."
                }
              ],
              "name" : "prec"
            },
            {
              "discussion" : [
                {
                  "Para" : "The flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 236,
          "key.docline" : 346,
          "key.docoffset" : 21160,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatFloatingPoint<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>prec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 271,
          "key.line" : 355,
          "key.name" : "formatFloatingPoint(to:argument:scale:prec:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 99,
          "key.nameline" : 355,
          "key.nameoffset" : 21416,
          "key.offset" : 21411,
          "key.parsed_declaration" : "@inlinable func formatFloatingPoint(to out: inout String, argument arg: Any, scale: Int, prec: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 357,
          "key.parsed_scope.start" : 355,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sy7RubiconE19formatFloatingPoint2to9formatter8argument5scale5flagsySSz_So17NSNumberFormatterCypSiAA7FlagSetCtF\">formatFloatingPoint(to:formatter:argument:scale:flags:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any, Int, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5scale4prec5flagsySSz_ypS2i7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE19formatFloatingPoint2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatFloatingPoint(to out: inout <Type usr=\"s:SS\">String<\/Type>, formatter f: <Type usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/Type>, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 367,
              "key.offset" : 21987
            }
          ],
          "key.bodycolumn" : 141,
          "key.bodylength" : 357,
          "key.bodyline" : 367,
          "key.bodyoffset" : 22123,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Formats a floating point number.\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - f: The number formatter.",
          "key.doc.declaration" : "@inlinable func formatFloatingPoint(to out: inout String, formatter f: NumberFormatter, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"367\" column=\"21\"><Name>formatFloatingPoint(to:formatter:argument:scale:flags:)<\/Name><USR>s:Sy7RubiconE19formatFloatingPoint2to9formatter8argument5scale5flagsySSz_So17NSNumberFormatterCypSiAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatFloatingPoint(to out: inout String, formatter f: NumberFormatter, argument arg: Any, scale: Int, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Formats a floating point number.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>f<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number formatter.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 367,
          "key.doc.name" : "formatFloatingPoint(to:formatter:argument:scale:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The number formatter."
                }
              ],
              "name" : "f"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 180,
          "key.docline" : 360,
          "key.docoffset" : 21803,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatFloatingPoint<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>formatter<\/decl.var.parameter.argument_label> <decl.var.parameter.name>f<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 483,
          "key.line" : 367,
          "key.name" : "formatFloatingPoint(to:formatter:argument:scale:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 118,
          "key.nameline" : 367,
          "key.nameoffset" : 22003,
          "key.offset" : 21998,
          "key.parsed_declaration" : "@inlinable func formatFloatingPoint(to out: inout String, formatter f: NumberFormatter, argument arg: Any, scale: Int, flags: FlagSet)",
          "key.parsed_scope.end" : 372,
          "key.parsed_scope.start" : 367,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sy7RubiconE19formatFloatingPoint2to8argument5scale4prec5flagsySSz_ypS2iAA7FlagSetCtF\">formatFloatingPoint(to:argument:scale:prec:flags:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let dbl: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>dbl<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 29,
              "key.line" : 368,
              "key.name" : "dbl",
              "key.namecolumn" : 13,
              "key.namelength" : 3,
              "key.nameline" : 368,
              "key.nameoffset" : 22136,
              "key.offset" : 22132,
              "key.parsed_declaration" : "let dbl = getArgAsDouble(arg)",
              "key.parsed_scope.end" : 368,
              "key.parsed_scope.start" : 368,
              "key.typename" : "Double",
              "key.typeusr" : "$sSdD",
              "key.usr" : "s:Sy7RubiconE19formatFloatingPoint2to9formatter8argument5scale5flagsySSz_So17NSNumberFormatterCypSiAA7FlagSetCtF3dblL_Sdvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, NumberFormatter, Any, Int, FlagSet) -> ()",
          "key.typeusr" : "$s2to9formatter8argument5scale5flagsySSz_So17NSNumberFormatterCypSi7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE19formatFloatingPoint2to9formatter8argument5scale5flagsySSz_So17NSNumberFormatterCypSiAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatString(to out: inout <Type usr=\"s:SS\">String<\/Type>, argument arg: Any, scale: <Type usr=\"s:Si\">Int<\/Type>, prec: <Type usr=\"s:Si\">Int<\/Type>? = nil, flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 383,
              "key.offset" : 22868
            }
          ],
          "key.bodycolumn" : 122,
          "key.bodylength" : 483,
          "key.bodyline" : 383,
          "key.bodyoffset" : 22985,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format the argument as a string. The string is created as by `String(describing:)`.\n\n- Parameters:\n  - out: The output string.\n  - arg: The argument.\n  - scale: The scale (width).\n  - flags: The flags.",
          "key.doc.declaration" : "@inlinable func formatString(to out: inout String, argument arg: Any, scale: Int, prec: Int? = nil, flags: FlagSet)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"383\" column=\"21\"><Name>formatString(to:argument:scale:prec:flags:)<\/Name><USR>s:Sy7RubiconE12formatString2to8argument5scale4prec5flagsySSz_ypS2iSgAA7FlagSetCtF<\/USR><Declaration>@inlinable func formatString(to out: inout String, argument arg: Any, scale: Int, prec: Int? = nil, flags: FlagSet)<\/Declaration><CommentParts><Abstract><Para>Format the argument as a string. The string is created as by <codeVoice>String(describing:)<\/codeVoice>.<\/Para><\/Abstract><Parameters><Parameter><Name>out<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The output string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (width).<\/Para><\/Discussion><\/Parameter><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The flags.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 383,
          "key.doc.name" : "formatString(to:argument:scale:prec:flags:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The output string."
                }
              ],
              "name" : "out"
            },
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (width)."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The flags."
                }
              ],
              "name" : "flags"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 262,
          "key.docline" : 375,
          "key.docoffset" : 22602,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatString<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>out<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>prec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.var.parameter.type> = nil<\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 590,
          "key.line" : 383,
          "key.name" : "formatString(to:argument:scale:prec:flags:)",
          "key.namecolumn" : 21,
          "key.namelength" : 99,
          "key.nameline" : 383,
          "key.nameoffset" : 22884,
          "key.offset" : 22879,
          "key.parsed_declaration" : "@inlinable func formatString(to out: inout String, argument arg: Any, scale: Int, prec: Int? = nil, flags: FlagSet)",
          "key.parsed_scope.end" : 397,
          "key.parsed_scope.start" : 383,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>var s: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>s<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 32,
              "key.line" : 384,
              "key.name" : "s",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 384,
              "key.nameoffset" : 22998,
              "key.offset" : 22994,
              "key.parsed_declaration" : "var s  = String(describing: arg)",
              "key.parsed_scope.end" : 384,
              "key.parsed_scope.start" : 384,
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:Sy7RubiconE12formatString2to8argument5scale4prec5flagsySSz_ypS2iSgAA7FlagSetCtF1sL_SSvp"
            },
            {
              "key.annotated_decl" : "<Declaration>var sc: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>sc<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 16,
              "key.line" : 385,
              "key.name" : "sc",
              "key.namecolumn" : 13,
              "key.namelength" : 2,
              "key.nameline" : 385,
              "key.nameoffset" : 23039,
              "key.offset" : 23035,
              "key.parsed_declaration" : "var sc = s.count",
              "key.parsed_scope.end" : 385,
              "key.parsed_scope.start" : 385,
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:Sy7RubiconE12formatString2to8argument5scale4prec5flagsySSz_ypS2iSgAA7FlagSetCtF2scL_Sivp"
            },
            {
              "key.annotated_decl" : "<Declaration>let cc: (<Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cc<\/decl.name>: <decl.var.type>(<ref.struct usr=\"s:Si\">Int<\/ref.struct>)<\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 21,
              "key.line" : 393,
              "key.name" : "cc",
              "key.namecolumn" : 13,
              "key.namelength" : 2,
              "key.nameline" : 393,
              "key.nameoffset" : 23226,
              "key.offset" : 23222,
              "key.parsed_declaration" : "let cc = (scale - sc)",
              "key.parsed_scope.end" : 393,
              "key.parsed_scope.start" : 393,
              "key.typename" : "(Int)",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:Sy7RubiconE12formatString2to8argument5scale4prec5flagsySSz_ypS2iSgAA7FlagSetCtF2ccL_Sivp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (inout String, Any, Int, Int?, FlagSet) -> ()",
          "key.typeusr" : "$s2to8argument5scale4prec5flagsySSz_ypS2iSg7Rubicon7FlagSetCtcD",
          "key.usr" : "s:Sy7RubiconE12formatString2to8argument5scale4prec5flagsySSz_ypS2iSgAA7FlagSetCtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func getArgAsDouble(_ arg: Any) -&gt; <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 407,
              "key.offset" : 23931
            }
          ],
          "key.bodycolumn" : 59,
          "key.bodylength" : 295,
          "key.bodyline" : 407,
          "key.bodyoffset" : 23985,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Attempt to get the argument as a Double value. If the argument cannot be converted into a Double value\nthen a NaN value is returned.\n\n- Parameter arg: The argument.\n- Returns: The Double value. If conversion failed then the value's Double.isNaN property will return\n           `true`.",
          "key.doc.declaration" : "@inlinable func getArgAsDouble(_ arg: Any) -> Double",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"407\" column=\"21\"><Name>getArgAsDouble(_:)<\/Name><USR>s:Sy7RubiconE14getArgAsDoubleySdypF<\/USR><Declaration>@inlinable func getArgAsDouble(_ arg: Any) -&gt; Double<\/Declaration><CommentParts><Abstract><Para>Attempt to get the argument as a Double value. If the argument cannot be converted into a Double value then a NaN value is returned.<\/Para><\/Abstract><Parameters><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The Double value. If conversion failed then the value’s Double.isNaN property will return <codeVoice>true<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 407,
          "key.doc.name" : "getArgAsDouble(_:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The Double value. If conversion failed then the value’s Double.isNaN property will return `true`."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 337,
          "key.docline" : 400,
          "key.docoffset" : 23590,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getArgAsDouble<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 339,
          "key.line" : 407,
          "key.name" : "getArgAsDouble(_:)",
          "key.namecolumn" : 21,
          "key.namelength" : 26,
          "key.nameline" : 407,
          "key.nameoffset" : 23947,
          "key.offset" : 23942,
          "key.parsed_declaration" : "@inlinable func getArgAsDouble(_ arg: Any) -> Double",
          "key.parsed_scope.end" : 413,
          "key.parsed_scope.start" : 407,
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (Any) -> Double",
          "key.typeusr" : "$sySdypcD",
          "key.usr" : "s:Sy7RubiconE14getArgAsDoubleySdypF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func getArgAsUInt(_ arg: Any) -&gt; <Type usr=\"s:s6UInt64V\">UInt64<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 422,
              "key.offset" : 24691
            }
          ],
          "key.bodycolumn" : 58,
          "key.bodylength" : 280,
          "key.bodyline" : 422,
          "key.bodyoffset" : 24744,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Attempt to get the argument as a UInt64 value. If the argument cannot be converted into a UInt64 value\nthen `nil` is returned.\n\n- Parameter arg: The argument.\n- Returns: The UInt64 value. If conversion failed then `nil` is returned instead.",
          "key.doc.declaration" : "@inlinable func getArgAsUInt(_ arg: Any) -> UInt64?",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"422\" column=\"21\"><Name>getArgAsUInt(_:)<\/Name><USR>s:Sy7RubiconE12getArgAsUIntys6UInt64VSgypF<\/USR><Declaration>@inlinable func getArgAsUInt(_ arg: Any) -&gt; UInt64?<\/Declaration><CommentParts><Abstract><Para>Attempt to get the argument as a UInt64 value. If the argument cannot be converted into a UInt64 value then <codeVoice>nil<\/codeVoice> is returned.<\/Para><\/Abstract><Parameters><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The UInt64 value. If conversion failed then <codeVoice>nil<\/codeVoice> is returned instead.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 422,
          "key.doc.name" : "getArgAsUInt(_:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The UInt64 value. If conversion failed then `nil` is returned instead."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 285,
          "key.docline" : 416,
          "key.docoffset" : 24402,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getArgAsUInt<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s6UInt64V\">UInt64<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 323,
          "key.line" : 422,
          "key.name" : "getArgAsUInt(_:)",
          "key.namecolumn" : 21,
          "key.namelength" : 24,
          "key.nameline" : 422,
          "key.nameoffset" : 24707,
          "key.offset" : 24702,
          "key.parsed_declaration" : "@inlinable func getArgAsUInt(_ arg: Any) -> UInt64?",
          "key.parsed_scope.end" : 427,
          "key.parsed_scope.start" : 422,
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (Any) -> UInt64?",
          "key.typeusr" : "$sys6UInt64VSgypcD",
          "key.usr" : "s:Sy7RubiconE12getArgAsUIntys6UInt64VSgypF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func getArgAsNSNumber(_ arg: Any) -&gt; <Type usr=\"c:objc(cs)NSNumber\">NSNumber<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 436,
              "key.offset" : 25459
            }
          ],
          "key.bodycolumn" : 64,
          "key.bodylength" : 367,
          "key.bodyline" : 436,
          "key.bodyoffset" : 25518,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Attempt to get the argument as a Double or Integer NSNumber value. If the argument cannot be converted\ninto a NSNumber value then `nil` is returned.\n\n- Parameter arg: The argument.\n- Returns: The NSNumber value. If conversion failed then `nil` is returned instead.",
          "key.doc.declaration" : "@inlinable func getArgAsNSNumber(_ arg: Any) -> NSNumber?",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"436\" column=\"21\"><Name>getArgAsNSNumber(_:)<\/Name><USR>s:Sy7RubiconE16getArgAsNSNumberySo0E0CSgypF<\/USR><Declaration>@inlinable func getArgAsNSNumber(_ arg: Any) -&gt; NSNumber?<\/Declaration><CommentParts><Abstract><Para>Attempt to get the argument as a Double or Integer NSNumber value. If the argument cannot be converted into a NSNumber value then <codeVoice>nil<\/codeVoice> is returned.<\/Para><\/Abstract><Parameters><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The NSNumber value. If conversion failed then <codeVoice>nil<\/codeVoice> is returned instead.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 436,
          "key.doc.name" : "getArgAsNSNumber(_:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The NSNumber value. If conversion failed then `nil` is returned instead."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 309,
          "key.docline" : 430,
          "key.docoffset" : 25146,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getArgAsNSNumber<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"c:objc(cs)NSNumber\">NSNumber<\/ref.class>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 416,
          "key.line" : 436,
          "key.name" : "getArgAsNSNumber(_:)",
          "key.namecolumn" : 21,
          "key.namelength" : 28,
          "key.nameline" : 436,
          "key.nameoffset" : 25475,
          "key.offset" : 25470,
          "key.parsed_declaration" : "@inlinable func getArgAsNSNumber(_ arg: Any) -> NSNumber?",
          "key.parsed_scope.end" : 442,
          "key.parsed_scope.start" : 436,
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (Any) -> NSNumber?",
          "key.typeusr" : "$sySo8NSNumberCSgypcD",
          "key.usr" : "s:Sy7RubiconE16getArgAsNSNumberySo0E0CSgypF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func castArgAsDouble(argument arg: Any) -&gt; <Type usr=\"s:Sd\">Double<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 451,
              "key.offset" : 26368
            }
          ],
          "key.bodycolumn" : 68,
          "key.bodylength" : 310,
          "key.bodyline" : 451,
          "key.bodyoffset" : 26431,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Attempt to cast the argument as a Double. If the argument is not a Double, Float, or Float80 value then\n`nil` is returned. If the value is a Float or Float80 then it is converted to a Double.\n\n- Parameter arg: The argument.\n- Returns: The Double value or `nil` if the argument is not a Double, Float, or Float80.",
          "key.doc.declaration" : "@inlinable func castArgAsDouble(argument arg: Any) -> Double?",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"451\" column=\"21\"><Name>castArgAsDouble(argument:)<\/Name><USR>s:Sy7RubiconE15castArgAsDouble8argumentSdSgyp_tF<\/USR><Declaration>@inlinable func castArgAsDouble(argument arg: Any) -&gt; Double?<\/Declaration><CommentParts><Abstract><Para>Attempt to cast the argument as a Double. If the argument is not a Double, Float, or Float80 value then <codeVoice>nil<\/codeVoice> is returned. If the value is a Float or Float80 then it is converted to a Double.<\/Para><\/Abstract><Parameters><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The Double value or <codeVoice>nil<\/codeVoice> if the argument is not a Double, Float, or Float80.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 451,
          "key.doc.name" : "castArgAsDouble(argument:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The Double value or `nil` if the argument is not a Double, Float, or Float80."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 357,
          "key.docline" : 445,
          "key.docoffset" : 26007,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>castArgAsDouble<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sd\">Double<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 363,
          "key.line" : 451,
          "key.name" : "castArgAsDouble(argument:)",
          "key.namecolumn" : 21,
          "key.namelength" : 34,
          "key.nameline" : 451,
          "key.nameoffset" : 26384,
          "key.offset" : 26379,
          "key.parsed_declaration" : "@inlinable func castArgAsDouble(argument arg: Any) -> Double?",
          "key.parsed_scope.end" : 459,
          "key.parsed_scope.start" : 451,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let t: Any.Type<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>t<\/decl.name>: <decl.var.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>.Type<\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 21,
              "key.line" : 452,
              "key.name" : "t",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 452,
              "key.nameoffset" : 26444,
              "key.offset" : 26440,
              "key.parsed_declaration" : "let t = type(of: arg)",
              "key.parsed_scope.end" : 452,
              "key.parsed_scope.start" : 452,
              "key.typename" : "Any.Type",
              "key.typeusr" : "$sypXpD",
              "key.usr" : "s:Sy7RubiconE15castArgAsDouble8argumentSdSgyp_tF1tL_ypXpvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (Any) -> Double?",
          "key.typeusr" : "$s8argumentSdSgyp_tcD",
          "key.usr" : "s:Sy7RubiconE15castArgAsDouble8argumentSdSgyp_tF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func castArgAsUInt(argument arg: Any) -&gt; <Type usr=\"s:s6UInt64V\">UInt64<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 470,
              "key.offset" : 27304
            }
          ],
          "key.bodycolumn" : 66,
          "key.bodylength" : 372,
          "key.bodyline" : 470,
          "key.bodyoffset" : 27365,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Attempt to cast the argument as an UInt64. If the argument is not one of the five standard unsigned\ninteger types (UInt, UInt8, UInt16, UInt32, or UInt64) then `nil` is returned. Otherwise the value is\nconverted to a UInt64.\n\n- Parameter arg: The argument.\n- Returns: The UInt64 value or `nil` if the argument is not one of the five standard unsigned integer\n           types.",
          "key.doc.declaration" : "@inlinable func castArgAsUInt(argument arg: Any) -> UInt64?",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"470\" column=\"21\"><Name>castArgAsUInt(argument:)<\/Name><USR>s:Sy7RubiconE13castArgAsUInt8arguments6UInt64VSgyp_tF<\/USR><Declaration>@inlinable func castArgAsUInt(argument arg: Any) -&gt; UInt64?<\/Declaration><CommentParts><Abstract><Para>Attempt to cast the argument as an UInt64. If the argument is not one of the five standard unsigned integer types (UInt, UInt8, UInt16, UInt32, or UInt64) then <codeVoice>nil<\/codeVoice> is returned. Otherwise the value is converted to a UInt64.<\/Para><\/Abstract><Parameters><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The UInt64 value or <codeVoice>nil<\/codeVoice> if the argument is not one of the five standard unsigned integer types.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 470,
          "key.doc.name" : "castArgAsUInt(argument:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The UInt64 value or `nil` if the argument is not one of the five standard unsigned integer types."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 437,
          "key.docline" : 462,
          "key.docoffset" : 26863,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>castArgAsUInt<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s6UInt64V\">UInt64<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 423,
          "key.line" : 470,
          "key.name" : "castArgAsUInt(argument:)",
          "key.namecolumn" : 21,
          "key.namelength" : 32,
          "key.nameline" : 470,
          "key.nameoffset" : 27320,
          "key.offset" : 27315,
          "key.parsed_declaration" : "@inlinable func castArgAsUInt(argument arg: Any) -> UInt64?",
          "key.parsed_scope.end" : 478,
          "key.parsed_scope.start" : 470,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let t: Any.Type<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>t<\/decl.name>: <decl.var.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>.Type<\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 21,
              "key.line" : 471,
              "key.name" : "t",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 471,
              "key.nameoffset" : 27378,
              "key.offset" : 27374,
              "key.parsed_declaration" : "let t = type(of: arg)",
              "key.parsed_scope.end" : 471,
              "key.parsed_scope.start" : 471,
              "key.typename" : "Any.Type",
              "key.typeusr" : "$sypXpD",
              "key.usr" : "s:Sy7RubiconE13castArgAsUInt8arguments6UInt64VSgyp_tF1tL_ypXpvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (Any) -> UInt64?",
          "key.typeusr" : "$s8arguments6UInt64VSgyp_tcD",
          "key.usr" : "s:Sy7RubiconE13castArgAsUInt8arguments6UInt64VSgyp_tF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func castArgAsInt(argument arg: Any) -&gt; <Type usr=\"s:s5Int64V\">Int64<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 488,
              "key.offset" : 28269
            }
          ],
          "key.bodycolumn" : 64,
          "key.bodylength" : 362,
          "key.bodyline" : 488,
          "key.bodyoffset" : 28328,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Attempt to cast the argument as an Int64. If the argument is not one of the five standard signed integer\ntypes (Int, Int8, Int16, Int32, or Int64) then `nil` is returned. Otherwise the value is converted to a\nInt64.\n\n- Parameter arg: The argument.\n- Returns: The Int64 value or `nil` if the argument is not one of the five standard signed integer types.",
          "key.doc.declaration" : "@inlinable func castArgAsInt(argument arg: Any) -> Int64?",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"488\" column=\"21\"><Name>castArgAsInt(argument:)<\/Name><USR>s:Sy7RubiconE12castArgAsInt8arguments5Int64VSgyp_tF<\/USR><Declaration>@inlinable func castArgAsInt(argument arg: Any) -&gt; Int64?<\/Declaration><CommentParts><Abstract><Para>Attempt to cast the argument as an Int64. If the argument is not one of the five standard signed integer types (Int, Int8, Int16, Int32, or Int64) then <codeVoice>nil<\/codeVoice> is returned. Otherwise the value is converted to a Int64.<\/Para><\/Abstract><Parameters><Parameter><Name>arg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The Int64 value or <codeVoice>nil<\/codeVoice> if the argument is not one of the five standard signed integer types.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 488,
          "key.doc.name" : "castArgAsInt(argument:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The argument."
                }
              ],
              "name" : "arg"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The Int64 value or `nil` if the argument is not one of the five standard signed integer types."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 406,
          "key.docline" : 481,
          "key.docoffset" : 27859,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>castArgAsInt<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>argument<\/decl.var.parameter.argument_label> <decl.var.parameter.name>arg<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>Any<\/syntaxtype.keyword><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:s5Int64V\">Int64<\/ref.struct>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 411,
          "key.line" : 488,
          "key.name" : "castArgAsInt(argument:)",
          "key.namecolumn" : 21,
          "key.namelength" : 31,
          "key.nameline" : 488,
          "key.nameoffset" : 28285,
          "key.offset" : 28280,
          "key.parsed_declaration" : "@inlinable func castArgAsInt(argument arg: Any) -> Int64?",
          "key.parsed_scope.end" : 496,
          "key.parsed_scope.start" : 488,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let t: Any.Type<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>t<\/decl.name>: <decl.var.type><syntaxtype.keyword>Any<\/syntaxtype.keyword>.Type<\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 21,
              "key.line" : 489,
              "key.name" : "t",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 489,
              "key.nameoffset" : 28341,
              "key.offset" : 28337,
              "key.parsed_declaration" : "let t = type(of: arg)",
              "key.parsed_scope.end" : 489,
              "key.parsed_scope.start" : 489,
              "key.typename" : "Any.Type",
              "key.typeusr" : "$sypXpD",
              "key.usr" : "s:Sy7RubiconE12castArgAsInt8arguments5Int64VSgyp_tF1tL_ypXpvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (Any) -> Int64?",
          "key.typeusr" : "$s8arguments5Int64VSgyp_tcD",
          "key.usr" : "s:Sy7RubiconE12castArgAsInt8arguments5Int64VSgyp_tF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func getDecimalFormatter(flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>, scale: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 509,
              "key.offset" : 29331
            }
          ],
          "key.bodycolumn" : 89,
          "key.bodylength" : 641,
          "key.bodyline" : 509,
          "key.bodyoffset" : 29415,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Creates the base number formatter for use by `format(_:)`. Some implementations will throw an exception\nwhen you provide conflicting flags such as `-` and `0`. In our case we will simply choose one over the\nother.\n\n- Parameters:\n  - flags: The formatting flags.\n  - scale: The scale (minimum width).\n- Returns: The instance of\n           <code>[NumberFormatter](https:\/\/developer.apple.com\/documentation\/foundation\/NumberFormatter)<\/code>",
          "key.doc.declaration" : "@inlinable func getDecimalFormatter(flags: FlagSet, scale: Int) -> NumberFormatter",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"509\" column=\"21\"><Name>getDecimalFormatter(flags:scale:)<\/Name><USR>s:Sy7RubiconE19getDecimalFormatter5flags5scaleSo08NSNumberD0CAA7FlagSetC_SitF<\/USR><Declaration>@inlinable func getDecimalFormatter(flags: FlagSet, scale: Int) -&gt; NumberFormatter<\/Declaration><CommentParts><Abstract><Para>Creates the base number formatter for use by <codeVoice>format(_:)<\/codeVoice>. Some implementations will throw an exception when you provide conflicting flags such as <codeVoice>-<\/codeVoice> and <codeVoice>0<\/codeVoice>. In our case we will simply choose one over the other.<\/Para><\/Abstract><Parameters><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (minimum width).<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The instance of <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/foundation\/NumberFormatter\">NumberFormatter<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML><\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 509,
          "key.doc.name" : "getDecimalFormatter(flags:scale:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (minimum width)."
                }
              ],
              "name" : "scale"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The instance of <code><\/code>"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 515,
          "key.docline" : 499,
          "key.docoffset" : 28812,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getDecimalFormatter<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/ref.class><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 715,
          "key.line" : 509,
          "key.name" : "getDecimalFormatter(flags:scale:)",
          "key.namecolumn" : 21,
          "key.namelength" : 47,
          "key.nameline" : 509,
          "key.nameoffset" : 29347,
          "key.offset" : 29342,
          "key.parsed_declaration" : "@inlinable func getDecimalFormatter(flags: FlagSet, scale: Int) -> NumberFormatter",
          "key.parsed_scope.end" : 524,
          "key.parsed_scope.start" : 509,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let f: <Type usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>f<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/ref.class><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 25,
              "key.line" : 510,
              "key.name" : "f",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 510,
              "key.nameoffset" : 29428,
              "key.offset" : 29424,
              "key.parsed_declaration" : "let f = NumberFormatter()",
              "key.parsed_scope.end" : 510,
              "key.parsed_scope.start" : 510,
              "key.typename" : "NumberFormatter",
              "key.typeusr" : "$sSo17NSNumberFormatterCD",
              "key.usr" : "s:Sy7RubiconE19getDecimalFormatter5flags5scaleSo08NSNumberD0CAA7FlagSetC_SitF1fL_AFvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (FlagSet, Int) -> NumberFormatter",
          "key.typeusr" : "$s5flags5scaleSo17NSNumberFormatterC7Rubicon7FlagSetC_SitcD",
          "key.usr" : "s:Sy7RubiconE19getDecimalFormatter5flags5scaleSo08NSNumberD0CAA7FlagSetC_SitF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func getFloatingPointFormatter(flags: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>, scale: <Type usr=\"s:Si\">Int<\/Type>, prec: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 538,
              "key.offset" : 30771
            }
          ],
          "key.bodycolumn" : 106,
          "key.bodylength" : 202,
          "key.bodyline" : 538,
          "key.bodyoffset" : 30872,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Creates the floating-point number formatter for use by `format(_:)`. Some implementations will throw an\nexception when you provide conflicting flags such as `-` and `0`. In our case we will simply choose one\nover the other.\n\n- Parameters:\n  - flags: The formatting flags.\n  - scale: The scale (minimum width).\n  - prec: The number of digits after the decimal point.\n- Returns: The instance of\n           <code>[NumberFormatter](https:\/\/developer.apple.com\/documentation\/foundation\/NumberFormatter)<\/code>",
          "key.doc.declaration" : "@inlinable func getFloatingPointFormatter(flags: FlagSet, scale: Int, prec: Int) -> NumberFormatter",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"538\" column=\"21\"><Name>getFloatingPointFormatter(flags:scale:prec:)<\/Name><USR>s:Sy7RubiconE25getFloatingPointFormatter5flags5scale4precSo08NSNumberE0CAA7FlagSetC_S2itF<\/USR><Declaration>@inlinable func getFloatingPointFormatter(flags: FlagSet, scale: Int, prec: Int) -&gt; NumberFormatter<\/Declaration><CommentParts><Abstract><Para>Creates the floating-point number formatter for use by <codeVoice>format(_:)<\/codeVoice>. Some implementations will throw an exception when you provide conflicting flags such as <codeVoice>-<\/codeVoice> and <codeVoice>0<\/codeVoice>. In our case we will simply choose one over the other.<\/Para><\/Abstract><Parameters><Parameter><Name>flags<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The formatting flags.<\/Para><\/Discussion><\/Parameter><Parameter><Name>scale<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The scale (minimum width).<\/Para><\/Discussion><\/Parameter><Parameter><Name>prec<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of digits after the decimal point.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The instance of <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/developer.apple.com\/documentation\/foundation\/NumberFormatter\">NumberFormatter<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML><\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 538,
          "key.doc.name" : "getFloatingPointFormatter(flags:scale:prec:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The formatting flags."
                }
              ],
              "name" : "flags"
            },
            {
              "discussion" : [
                {
                  "Para" : "The scale (minimum width)."
                }
              ],
              "name" : "scale"
            },
            {
              "discussion" : [
                {
                  "Para" : "The number of digits after the decimal point."
                }
              ],
              "name" : "prec"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The instance of <code><\/code>"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 589,
          "key.docline" : 527,
          "key.docoffset" : 30178,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getFloatingPointFormatter<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>flags<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>scale<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>prec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/ref.class><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 293,
          "key.line" : 538,
          "key.name" : "getFloatingPointFormatter(flags:scale:prec:)",
          "key.namecolumn" : 21,
          "key.namelength" : 64,
          "key.nameline" : 538,
          "key.nameoffset" : 30787,
          "key.offset" : 30782,
          "key.parsed_declaration" : "@inlinable func getFloatingPointFormatter(flags: FlagSet, scale: Int, prec: Int) -> NumberFormatter",
          "key.parsed_scope.end" : 543,
          "key.parsed_scope.start" : 538,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let f: <Type usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>f<\/decl.name>: <decl.var.type><ref.class usr=\"c:objc(cs)NSNumberFormatter\">NumberFormatter<\/ref.class><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 55,
              "key.line" : 539,
              "key.name" : "f",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 539,
              "key.nameoffset" : 30885,
              "key.offset" : 30881,
              "key.parsed_declaration" : "let f = getDecimalFormatter(flags: flags, scale: scale)",
              "key.parsed_scope.end" : 539,
              "key.parsed_scope.start" : 539,
              "key.typename" : "NumberFormatter",
              "key.typeusr" : "$sSo17NSNumberFormatterCD",
              "key.usr" : "s:Sy7RubiconE25getFloatingPointFormatter5flags5scale4precSo08NSNumberE0CAA7FlagSetC_S2itF1fL_AGvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (FlagSet, Int, Int) -> NumberFormatter",
          "key.typeusr" : "$s5flags5scale4precSo17NSNumberFormatterC7Rubicon7FlagSetC_S2itcD",
          "key.usr" : "s:Sy7RubiconE25getFloatingPointFormatter5flags5scale4precSo08NSNumberE0CAA7FlagSetC_S2itF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func getFormatArgument(argSpec argp: <Type usr=\"s:SS\">String<\/Type>?, argIndex aIdx: inout <Type usr=\"s:Si\">Int<\/Type>, prevArgIndex pIdx: inout <Type usr=\"s:Si\">Int<\/Type>?, args: [Any?]) -&gt; Any?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 559,
              "key.offset" : 31989
            }
          ],
          "key.bodycolumn" : 142,
          "key.bodylength" : 598,
          "key.bodyline" : 559,
          "key.bodyoffset" : 32126,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Get the argument to format. If the argument specifier was provided it will tell us which one to use.\nInstead of throwing an exception like Java does for invalid or missing arguments we will simply return\n`nil`.\n\n- Parameters:\n  - argp: The argument specifier in the form of either `&lt;` or `n$` where `n` is the ordinal number,\n          starting with `1`.\n  - aIdx: The current <code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code>-based index of the next\n          argument to get if no argument specifier is given.\n  - pIdx: The previous argument index specified.\n  - args: The arguments.\n- Returns: The argument or `nil` if an invalid specifier was given or there is no next argument.",
          "key.doc.declaration" : "@inlinable func getFormatArgument(argSpec argp: String?, argIndex aIdx: inout Int, prevArgIndex pIdx: inout Int?, args: [Any?]) -> Any?",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"559\" column=\"21\"><Name>getFormatArgument(argSpec:argIndex:prevArgIndex:args:)<\/Name><USR>s:Sy7RubiconE17getFormatArgument7argSpec0E5Index07prevArgG04argsypSgSSSg_SizSiSgzSayAGGtF<\/USR><Declaration>@inlinable func getFormatArgument(argSpec argp: String?, argIndex aIdx: inout Int, prevArgIndex pIdx: inout Int?, args: [Any?]) -&gt; Any?<\/Declaration><CommentParts><Abstract><Para>Get the argument to format. If the argument specifier was provided it will tell us which one to use. Instead of throwing an exception like Java does for invalid or missing arguments we will simply return <codeVoice>nil<\/codeVoice>.<\/Para><\/Abstract><Parameters><Parameter><Name>argp<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The argument specifier in the form of either <codeVoice>&amp;lt;<\/codeVoice> or <codeVoice>n$<\/codeVoice> where <codeVoice>n<\/codeVoice> is the ordinal number, starting with <codeVoice>1<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><Parameter><Name>aIdx<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The current <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML>-based index of the next argument to get if no argument specifier is given.<\/Para><\/Discussion><\/Parameter><Parameter><Name>pIdx<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The previous argument index specified.<\/Para><\/Discussion><\/Parameter><Parameter><Name>args<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The arguments.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The argument or <codeVoice>nil<\/codeVoice> if an invalid specifier was given or there is no next argument.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 559,
          "key.doc.name" : "getFormatArgument(argSpec:argIndex:prevArgIndex:args:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The argument specifier in the form of either `&lt;` or `n$` where `n` is the ordinal number, starting with `1`."
                }
              ],
              "name" : "argp"
            },
            {
              "discussion" : [
                {
                  "Para" : "The current <code><\/code>-based index of the next argument to get if no argument specifier is given."
                }
              ],
              "name" : "aIdx"
            },
            {
              "discussion" : [
                {
                  "Para" : "The previous argument index specified."
                }
              ],
              "name" : "pIdx"
            },
            {
              "discussion" : [
                {
                  "Para" : "The arguments."
                }
              ],
              "name" : "args"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The argument or `nil` if an invalid specifier was given or there is no next argument."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 789,
          "key.docline" : 546,
          "key.docoffset" : 31196,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getFormatArgument<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>argSpec<\/decl.var.parameter.argument_label> <decl.var.parameter.name>argp<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argIndex<\/decl.var.parameter.argument_label> <decl.var.parameter.name>aIdx<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>prevArgIndex<\/decl.var.parameter.argument_label> <decl.var.parameter.name>pIdx<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>args<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<syntaxtype.keyword>Any<\/syntaxtype.keyword>?]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 725,
          "key.line" : 559,
          "key.name" : "getFormatArgument(argSpec:argIndex:prevArgIndex:args:)",
          "key.namecolumn" : 21,
          "key.namelength" : 111,
          "key.nameline" : 559,
          "key.nameoffset" : 32005,
          "key.offset" : 32000,
          "key.parsed_declaration" : "@inlinable func getFormatArgument(argSpec argp: String?, argIndex aIdx: inout Int, prevArgIndex pIdx: inout Int?, args: [Any?]) -> Any?",
          "key.parsed_scope.end" : 569,
          "key.parsed_scope.start" : 559,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sy7RubiconE17getFormatArgument12errorMessage8argIndex07prevArgH04argsypSgSS_S2iSgzSayAGGtF\">getFormatArgument(errorMessage:argIndex:prevArgIndex:args:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (String?, inout Int, inout Int?, [Any?]) -> Any?",
          "key.typeusr" : "$s7argSpec0A5Index07prevArgC04argsypSgSSSg_SizSiSgzSayAEGtcD",
          "key.usr" : "s:Sy7RubiconE17getFormatArgument7argSpec0E5Index07prevArgG04argsypSgSSSg_SizSiSgzSayAGGtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func getFormatArgument(errorMessage msg: <Type usr=\"s:SS\">String<\/Type>, argIndex aIdx: <Type usr=\"s:Si\">Int<\/Type>, prevArgIndex pIdx: inout <Type usr=\"s:Si\">Int<\/Type>?, args: [Any?]) -&gt; Any?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 580,
              "key.offset" : 33283
            }
          ],
          "key.bodycolumn" : 139,
          "key.bodylength" : 216,
          "key.bodyline" : 580,
          "key.bodyoffset" : 33417,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Get the argument to format.\n\n- Parameters:\n  - msg: The error message to display if `StringFormatIsString` is `true` and the argument doesn't exist.\n  - idx: The index of the argument - <code>[zero](https:\/\/en.wikipedia.org\/wiki\/0)<\/code> based.\n  - args: The arguments.\n- Returns: The argument or `nil` if `StringFormatIsString` is `false` and the argument doesn't exist.",
          "key.doc.declaration" : "@inlinable func getFormatArgument(errorMessage msg: String, argIndex aIdx: Int, prevArgIndex pIdx: inout Int?, args: [Any?]) -> Any?",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"580\" column=\"21\"><Name>getFormatArgument(errorMessage:argIndex:prevArgIndex:args:)<\/Name><USR>s:Sy7RubiconE17getFormatArgument12errorMessage8argIndex07prevArgH04argsypSgSS_S2iSgzSayAGGtF<\/USR><Declaration>@inlinable func getFormatArgument(errorMessage msg: String, argIndex aIdx: Int, prevArgIndex pIdx: inout Int?, args: [Any?]) -&gt; Any?<\/Declaration><CommentParts><Abstract><Para>Get the argument to format.<\/Para><\/Abstract><Parameters><Parameter><Name>msg<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The error message to display if <codeVoice>StringFormatIsString<\/codeVoice> is <codeVoice>true<\/codeVoice> and the argument doesn’t exist.<\/Para><\/Discussion><\/Parameter><Parameter><Name>idx<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The index of the argument - <rawHTML><![CDATA[<code>]]><\/rawHTML><Link href=\"https:\/\/en.wikipedia.org\/wiki\/0\">zero<\/Link><rawHTML><![CDATA[<\/code>]]><\/rawHTML> based.<\/Para><\/Discussion><\/Parameter><Parameter><Name>args<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The arguments.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The argument or <codeVoice>nil<\/codeVoice> if <codeVoice>StringFormatIsString<\/codeVoice> is <codeVoice>false<\/codeVoice> and the argument doesn’t exist.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 580,
          "key.doc.name" : "getFormatArgument(errorMessage:argIndex:prevArgIndex:args:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The error message to display if `StringFormatIsString` is `true` and the argument doesn’t exist."
                }
              ],
              "name" : "msg"
            },
            {
              "discussion" : [
                {
                  "Para" : "The index of the argument - <code><\/code> based."
                }
              ],
              "name" : "idx"
            },
            {
              "discussion" : [
                {
                  "Para" : "The arguments."
                }
              ],
              "name" : "args"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The argument or `nil` if `StringFormatIsString` is `false` and the argument doesn’t exist."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 433,
          "key.docline" : 572,
          "key.docoffset" : 32846,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getFormatArgument<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>errorMessage<\/decl.var.parameter.argument_label> <decl.var.parameter.name>msg<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>argIndex<\/decl.var.parameter.argument_label> <decl.var.parameter.name>aIdx<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>prevArgIndex<\/decl.var.parameter.argument_label> <decl.var.parameter.name>pIdx<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>args<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<syntaxtype.keyword>Any<\/syntaxtype.keyword>?]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><syntaxtype.keyword>Any<\/syntaxtype.keyword>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 340,
          "key.line" : 580,
          "key.name" : "getFormatArgument(errorMessage:argIndex:prevArgIndex:args:)",
          "key.namecolumn" : 21,
          "key.namelength" : 108,
          "key.nameline" : 580,
          "key.nameoffset" : 33299,
          "key.offset" : 33294,
          "key.parsed_declaration" : "@inlinable func getFormatArgument(errorMessage msg: String, argIndex aIdx: Int, prevArgIndex pIdx: inout Int?, args: [Any?]) -> Any?",
          "key.parsed_scope.end" : 587,
          "key.parsed_scope.start" : 580,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:Sy7RubiconE17getFormatArgument7argSpec0E5Index07prevArgG04argsypSgSSSg_SizSiSgzSayAGGtF\">getFormatArgument(argSpec:argIndex:prevArgIndex:args:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (String, Int, inout Int?, [Any?]) -> Any?",
          "key.typeusr" : "$s12errorMessage8argIndex07prevArgD04argsypSgSS_S2iSgzSayAEGtcD",
          "key.usr" : "s:Sy7RubiconE17getFormatArgument12errorMessage8argIndex07prevArgH04argsypSgSS_S2iSgzSayAGGtF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func formatFatalError(message: <Type usr=\"s:SS\">String<\/Type>) -&gt; <Type usr=\"s:s5NeverO\">Never<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 595,
              "key.offset" : 33915
            }
          ],
          "key.bodycolumn" : 65,
          "key.bodylength" : 49,
          "key.bodyline" : 595,
          "key.bodyoffset" : 33975,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Display an error message and terminate the application.\n\n- Parameter message: The message to display.\n- Returns: Never.",
          "key.doc.declaration" : "@inlinable func formatFatalError(message: String) -> Never",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"595\" column=\"21\"><Name>formatFatalError(message:)<\/Name><USR>s:Sy7RubiconE16formatFatalError7messages5NeverOSS_tF<\/USR><Declaration>@inlinable func formatFatalError(message: String) -&gt; Never<\/Declaration><CommentParts><Abstract><Para>Display an error message and terminate the application.<\/Para><\/Abstract><Parameters><Parameter><Name>message<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The message to display.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>Never.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 595,
          "key.doc.name" : "formatFatalError(message:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The message to display."
                }
              ],
              "name" : "message"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "Never."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 156,
          "key.docline" : 590,
          "key.docoffset" : 33755,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatFatalError<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>message<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.enum usr=\"s:s5NeverO\">Never<\/ref.enum><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 99,
          "key.line" : 595,
          "key.name" : "formatFatalError(message:)",
          "key.namecolumn" : 21,
          "key.namelength" : 33,
          "key.nameline" : 595,
          "key.nameoffset" : 33931,
          "key.offset" : 33926,
          "key.parsed_declaration" : "@inlinable func formatFatalError(message: String) -> Never",
          "key.parsed_scope.end" : 595,
          "key.parsed_scope.start" : 595,
          "key.substructure" : [

          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (String) -> Never",
          "key.typeusr" : "$s7messages5NeverOSS_tcD",
          "key.usr" : "s:Sy7RubiconE16formatFatalError7messages5NeverOSS_tF"
        },
        {
          "key.annotated_decl" : "<Declaration>@inlinable func fmtDt(_ value: <Type usr=\"s:Si\">Int<\/Type>, places: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 605,
              "key.offset" : 34419
            }
          ],
          "key.bodycolumn" : 65,
          "key.bodylength" : 257,
          "key.bodyline" : 605,
          "key.bodyoffset" : 34479,
          "key.column" : 16,
          "key.doc.column" : 21,
          "key.doc.comment" : "Format an integer number to a given number of places padding with zeros if needed.\n\n- Parameters:\n  - value: The value to format.\n  - places: The number of places to pad to if needed.\n- Returns: The resulting string.",
          "key.doc.declaration" : "@inlinable func fmtDt(_ value: Int, places: Int) -> String",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"605\" column=\"21\"><Name>fmtDt(_:places:)<\/Name><USR>s:Sy7RubiconE5fmtDt_6placesSSSi_SitF<\/USR><Declaration>@inlinable func fmtDt(_ value: Int, places: Int) -&gt; String<\/Declaration><CommentParts><Abstract><Para>Format an integer number to a given number of places padding with zeros if needed.<\/Para><\/Abstract><Parameters><Parameter><Name>value<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The value to format.<\/Para><\/Discussion><\/Parameter><Parameter><Name>places<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The number of places to pad to if needed.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The resulting string.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
          "key.doc.line" : 605,
          "key.doc.name" : "fmtDt(_:places:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The value to format."
                }
              ],
              "name" : "value"
            },
            {
              "discussion" : [
                {
                  "Para" : "The number of places to pad to if needed."
                }
              ],
              "name" : "places"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The resulting string."
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 269,
          "key.docline" : 598,
          "key.docoffset" : 34146,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>fmtDt<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>places<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.groupname" : "String",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 307,
          "key.line" : 605,
          "key.name" : "fmtDt(_:places:)",
          "key.namecolumn" : 21,
          "key.namelength" : 32,
          "key.nameline" : 605,
          "key.nameoffset" : 34435,
          "key.offset" : 34430,
          "key.parsed_declaration" : "@inlinable func fmtDt(_ value: Int, places: Int) -> String",
          "key.parsed_scope.end" : 612,
          "key.parsed_scope.start" : 605,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>var str: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>str<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.groupname" : "String",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 23,
              "key.line" : 606,
              "key.name" : "str",
              "key.namecolumn" : 13,
              "key.namelength" : 3,
              "key.nameline" : 606,
              "key.nameoffset" : 34492,
              "key.offset" : 34488,
              "key.parsed_declaration" : "var str = String(value)",
              "key.parsed_scope.end" : 606,
              "key.parsed_scope.start" : 606,
              "key.typename" : "String",
              "key.typeusr" : "$sSSD",
              "key.usr" : "s:Sy7RubiconE5fmtDt_6placesSSSi_SitF3strL_SSvp"
            }
          ],
          "key.typename" : "<Self where Self : StringProtocol> (Self) -> (Int, Int) -> String",
          "key.typeusr" : "$s_6placesSSSi_SitcD",
          "key.usr" : "s:Sy7RubiconE5fmtDt_6placesSSSi_SitF"
        }
      ],
      "key.typename" : "StringProtocol.Protocol",
      "key.typeusr" : "$sSy_pmD",
      "key.usr" : "s:Sy"
    },
    {
      "key.accessibility" : "source.lang.swift.accessibility.internal",
      "key.annotated_decl" : "<Declaration>@usableFromInline class FlagSet<\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.usableFromInline",
          "key.column" : 1,
          "key.length" : 17,
          "key.line" : 618,
          "key.offset" : 34902
        }
      ],
      "key.bodycolumn" : 34,
      "key.bodylength" : 3338,
      "key.bodyline" : 618,
      "key.bodyoffset" : 34935,
      "key.column" : 19,
      "key.doc.column" : 25,
      "key.doc.comment" : "A class for holding formatting flags.",
      "key.doc.declaration" : "@usableFromInline\nclass FlagSet",
      "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.doc.full_as_xml" : "<Class file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"618\" column=\"25\"><Name>FlagSet<\/Name><USR>s:7Rubicon7FlagSetC<\/USR><Declaration>@usableFromInline\nclass FlagSet<\/Declaration><CommentParts><Abstract><Para>A class for holding formatting flags.<\/Para><\/Abstract><\/CommentParts><\/Class>",
      "key.doc.line" : 618,
      "key.doc.name" : "FlagSet",
      "key.doc.type" : "Class",
      "key.doccolumn" : 1,
      "key.doclength" : 46,
      "key.docline" : 616,
      "key.docoffset" : 34856,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>FlagSet<\/decl.name><\/decl.class>",
      "key.kind" : "source.lang.swift.decl.class",
      "key.length" : 3354,
      "key.line" : 618,
      "key.name" : "FlagSet",
      "key.namecolumn" : 25,
      "key.namelength" : 7,
      "key.nameline" : 618,
      "key.nameoffset" : 34926,
      "key.offset" : 34920,
      "key.parsed_declaration" : "@usableFromInline class FlagSet",
      "key.parsed_scope.end" : 687,
      "key.parsed_scope.start" : 618,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline enum <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>.FormatFlags<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 622,
              "key.offset" : 35109
            }
          ],
          "key.bodycolumn" : 41,
          "key.bodylength" : 83,
          "key.bodyline" : 622,
          "key.bodyoffset" : 35145,
          "key.column" : 23,
          "key.doc.column" : 28,
          "key.doc.comment" : "An enumeration of the possible flags.",
          "key.doc.declaration" : "@usableFromInline\nenum Rubicon.FlagSet.FormatFlags",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"622\" column=\"28\"><Name>FormatFlags<\/Name><USR>s:7Rubicon7FlagSetC11FormatFlagsO<\/USR><Declaration>@usableFromInline\nenum Rubicon.FlagSet.FormatFlags<\/Declaration><CommentParts><Abstract><Para>An enumeration of the possible flags.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line" : 622,
          "key.doc.name" : "FormatFlags",
          "key.doc.type" : "Other",
          "key.doccolumn" : 5,
          "key.doclength" : 50,
          "key.docline" : 620,
          "key.docoffset" : 35055,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.enum><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class>.<decl.name>FormatFlags<\/decl.name><\/decl.enum>",
          "key.kind" : "source.lang.swift.decl.enum",
          "key.length" : 102,
          "key.line" : 622,
          "key.name" : "FormatFlags",
          "key.namecolumn" : 28,
          "key.namelength" : 11,
          "key.nameline" : 622,
          "key.nameoffset" : 35132,
          "key.offset" : 35127,
          "key.parsed_declaration" : "@usableFromInline enum FormatFlags",
          "key.parsed_scope.end" : 622,
          "key.parsed_scope.start" : 622,
          "key.substructure" : [
            {
              "key.column" : 42,
              "key.kind" : "source.lang.swift.decl.enumcase",
              "key.length" : 81,
              "key.line" : 622,
              "key.namelength" : 0,
              "key.nameoffset" : 0,
              "key.offset" : 35146,
              "key.substructure" : [
                {
                  "key.accessibility" : "source.lang.swift.accessibility.internal",
                  "key.annotated_decl" : "<Declaration>case Space<\/Declaration>",
                  "key.column" : 47,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Space<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 5,
                  "key.line" : 622,
                  "key.name" : "Space",
                  "key.namecolumn" : 47,
                  "key.namelength" : 5,
                  "key.nameline" : 622,
                  "key.nameoffset" : 35151,
                  "key.offset" : 35151,
                  "key.parsed_declaration" : "@usableFromInline enum FormatFlags { case Space",
                  "key.parsed_scope.end" : 622,
                  "key.parsed_scope.start" : 622,
                  "key.typename" : "(FlagSet.FormatFlags.Type) -> FlagSet.FormatFlags",
                  "key.typeusr" : "$sy7Rubicon7FlagSetC11FormatFlagsOAEmcD",
                  "key.usr" : "s:7Rubicon7FlagSetC11FormatFlagsO5SpaceyA2EmF"
                },
                {
                  "key.accessibility" : "source.lang.swift.accessibility.internal",
                  "key.annotated_decl" : "<Declaration>case Zeros<\/Declaration>",
                  "key.column" : 54,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Zeros<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 5,
                  "key.line" : 622,
                  "key.name" : "Zeros",
                  "key.namecolumn" : 54,
                  "key.namelength" : 5,
                  "key.nameline" : 622,
                  "key.nameoffset" : 35158,
                  "key.offset" : 35158,
                  "key.parsed_declaration" : "@usableFromInline enum FormatFlags { case Space, Zeros",
                  "key.parsed_scope.end" : 622,
                  "key.parsed_scope.start" : 622,
                  "key.typename" : "(FlagSet.FormatFlags.Type) -> FlagSet.FormatFlags",
                  "key.typeusr" : "$sy7Rubicon7FlagSetC11FormatFlagsOAEmcD",
                  "key.usr" : "s:7Rubicon7FlagSetC11FormatFlagsO5ZerosyA2EmF"
                },
                {
                  "key.accessibility" : "source.lang.swift.accessibility.internal",
                  "key.annotated_decl" : "<Declaration>case Sign<\/Declaration>",
                  "key.column" : 61,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Sign<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 4,
                  "key.line" : 622,
                  "key.name" : "Sign",
                  "key.namecolumn" : 61,
                  "key.namelength" : 4,
                  "key.nameline" : 622,
                  "key.nameoffset" : 35165,
                  "key.offset" : 35165,
                  "key.parsed_declaration" : "@usableFromInline enum FormatFlags { case Space, Zeros, Sign",
                  "key.parsed_scope.end" : 622,
                  "key.parsed_scope.start" : 622,
                  "key.typename" : "(FlagSet.FormatFlags.Type) -> FlagSet.FormatFlags",
                  "key.typeusr" : "$sy7Rubicon7FlagSetC11FormatFlagsOAEmcD",
                  "key.usr" : "s:7Rubicon7FlagSetC11FormatFlagsO4SignyA2EmF"
                },
                {
                  "key.accessibility" : "source.lang.swift.accessibility.internal",
                  "key.annotated_decl" : "<Declaration>case Parenthesis<\/Declaration>",
                  "key.column" : 67,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Parenthesis<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 11,
                  "key.line" : 622,
                  "key.name" : "Parenthesis",
                  "key.namecolumn" : 67,
                  "key.namelength" : 11,
                  "key.nameline" : 622,
                  "key.nameoffset" : 35171,
                  "key.offset" : 35171,
                  "key.parsed_declaration" : "@usableFromInline enum FormatFlags { case Space, Zeros, Sign, Parenthesis",
                  "key.parsed_scope.end" : 622,
                  "key.parsed_scope.start" : 622,
                  "key.typename" : "(FlagSet.FormatFlags.Type) -> FlagSet.FormatFlags",
                  "key.typeusr" : "$sy7Rubicon7FlagSetC11FormatFlagsOAEmcD",
                  "key.usr" : "s:7Rubicon7FlagSetC11FormatFlagsO11ParenthesisyA2EmF"
                },
                {
                  "key.accessibility" : "source.lang.swift.accessibility.internal",
                  "key.annotated_decl" : "<Declaration>case Justified<\/Declaration>",
                  "key.column" : 80,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Justified<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 9,
                  "key.line" : 622,
                  "key.name" : "Justified",
                  "key.namecolumn" : 80,
                  "key.namelength" : 9,
                  "key.nameline" : 622,
                  "key.nameoffset" : 35184,
                  "key.offset" : 35184,
                  "key.parsed_declaration" : "@usableFromInline enum FormatFlags { case Space, Zeros, Sign, Parenthesis, Justified",
                  "key.parsed_scope.end" : 622,
                  "key.parsed_scope.start" : 622,
                  "key.typename" : "(FlagSet.FormatFlags.Type) -> FlagSet.FormatFlags",
                  "key.typeusr" : "$sy7Rubicon7FlagSetC11FormatFlagsOAEmcD",
                  "key.usr" : "s:7Rubicon7FlagSetC11FormatFlagsO9JustifiedyA2EmF"
                },
                {
                  "key.accessibility" : "source.lang.swift.accessibility.internal",
                  "key.annotated_decl" : "<Declaration>case Separators<\/Declaration>",
                  "key.column" : 91,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Separators<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 10,
                  "key.line" : 622,
                  "key.name" : "Separators",
                  "key.namecolumn" : 91,
                  "key.namelength" : 10,
                  "key.nameline" : 622,
                  "key.nameoffset" : 35195,
                  "key.offset" : 35195,
                  "key.parsed_declaration" : "@usableFromInline enum FormatFlags { case Space, Zeros, Sign, Parenthesis, Justified, Separators",
                  "key.parsed_scope.end" : 622,
                  "key.parsed_scope.start" : 622,
                  "key.typename" : "(FlagSet.FormatFlags.Type) -> FlagSet.FormatFlags",
                  "key.typeusr" : "$sy7Rubicon7FlagSetC11FormatFlagsOAEmcD",
                  "key.usr" : "s:7Rubicon7FlagSetC11FormatFlagsO10SeparatorsyA2EmF"
                },
                {
                  "key.accessibility" : "source.lang.swift.accessibility.internal",
                  "key.annotated_decl" : "<Declaration>case Uppercase<\/Declaration>",
                  "key.column" : 103,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Uppercase<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 9,
                  "key.line" : 622,
                  "key.name" : "Uppercase",
                  "key.namecolumn" : 103,
                  "key.namelength" : 9,
                  "key.nameline" : 622,
                  "key.nameoffset" : 35207,
                  "key.offset" : 35207,
                  "key.parsed_declaration" : "@usableFromInline enum FormatFlags { case Space, Zeros, Sign, Parenthesis, Justified, Separators, Uppercase",
                  "key.parsed_scope.end" : 622,
                  "key.parsed_scope.start" : 622,
                  "key.typename" : "(FlagSet.FormatFlags.Type) -> FlagSet.FormatFlags",
                  "key.typeusr" : "$sy7Rubicon7FlagSetC11FormatFlagsOAEmcD",
                  "key.usr" : "s:7Rubicon7FlagSetC11FormatFlagsO9UppercaseyA2EmF"
                },
                {
                  "key.accessibility" : "source.lang.swift.accessibility.internal",
                  "key.annotated_decl" : "<Declaration>case Alternate<\/Declaration>",
                  "key.column" : 114,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
                  "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Alternate<\/decl.name><\/decl.enumelement>",
                  "key.kind" : "source.lang.swift.decl.enumelement",
                  "key.length" : 9,
                  "key.line" : 622,
                  "key.name" : "Alternate",
                  "key.namecolumn" : 114,
                  "key.namelength" : 9,
                  "key.nameline" : 622,
                  "key.nameoffset" : 35218,
                  "key.offset" : 35218,
                  "key.parsed_declaration" : "@usableFromInline enum FormatFlags { case Space, Zeros, Sign, Parenthesis, Justified, Separators, Uppercase, Alternate",
                  "key.parsed_scope.end" : 622,
                  "key.parsed_scope.start" : 622,
                  "key.typename" : "(FlagSet.FormatFlags.Type) -> FlagSet.FormatFlags",
                  "key.typeusr" : "$sy7Rubicon7FlagSetC11FormatFlagsOAEmcD",
                  "key.usr" : "s:7Rubicon7FlagSetC11FormatFlagsO9AlternateyA2EmF"
                }
              ]
            }
          ],
          "key.typename" : "FlagSet.FormatFlags.Type",
          "key.typeusr" : "$s7Rubicon7FlagSetC11FormatFlagsOmD",
          "key.usr" : "s:7Rubicon7FlagSetC11FormatFlagsO"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline private(set) lazy var flags: <Type usr=\"s:Sh\">Set<\/Type>&lt;<Type usr=\"s:7Rubicon7FlagSetC11FormatFlagsO\">FormatFlags<\/Type>&gt; { get set }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.lazy",
              "key.column" : 36,
              "key.length" : 4,
              "key.line" : 627,
              "key.offset" : 35432
            },
            {
              "key.attribute" : "source.decl.attribute.setter_access.private",
              "key.column" : 23,
              "key.length" : 12,
              "key.line" : 627,
              "key.offset" : 35419
            },
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 627,
              "key.offset" : 35401
            }
          ],
          "key.column" : 41,
          "key.doc.column" : 45,
          "key.doc.comment" : "A set of the current active flags.",
          "key.doc.declaration" : "@usableFromInline\nprivate(set) lazy var flags: Set<FormatFlags> { get set }",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.doc.full_as_xml" : "<Other file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift\" line=\"627\" column=\"45\"><Name>flags<\/Name><USR>s:7Rubicon7FlagSetC5flagsShyAC11FormatFlagsOGvp<\/USR><Declaration>@usableFromInline\nprivate(set) lazy var flags: Set&lt;FormatFlags&gt; { get set }<\/Declaration><CommentParts><Abstract><Para>A set of the current active flags.<\/Para><\/Abstract><\/CommentParts><\/Other>",
          "key.doc.line" : 627,
          "key.doc.name" : "flags",
          "key.doc.type" : "Other",
          "key.doccolumn" : 5,
          "key.doclength" : 47,
          "key.docline" : 625,
          "key.docoffset" : 35350,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>private<\/syntaxtype.keyword>(set) <syntaxtype.keyword>lazy<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>flags<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sh\">Set<\/ref.struct>&lt;<ref.enum usr=\"s:7Rubicon7FlagSetC11FormatFlagsO\">FormatFlags<\/ref.enum>&gt;<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 38,
          "key.line" : 627,
          "key.name" : "flags",
          "key.namecolumn" : 45,
          "key.namelength" : 5,
          "key.nameline" : 627,
          "key.nameoffset" : 35441,
          "key.offset" : 35437,
          "key.parsed_declaration" : "@usableFromInline private(set) lazy var flags: Set<FormatFlags> = getSet()",
          "key.parsed_scope.end" : 627,
          "key.parsed_scope.start" : 627,
          "key.setter_accessibility" : "source.lang.swift.accessibility.private",
          "key.typename" : "Set<FlagSet.FormatFlags>",
          "key.typeusr" : "$sShy7Rubicon7FlagSetC11FormatFlagsOGD",
          "key.usr" : "s:7Rubicon7FlagSetC5flagsShyAC11FormatFlagsOGvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline let useSpaceForPlusSign: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 629,
              "key.offset" : 35481
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>useSpaceForPlusSign<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 31,
          "key.line" : 629,
          "key.name" : "useSpaceForPlusSign",
          "key.namecolumn" : 27,
          "key.namelength" : 19,
          "key.nameline" : 629,
          "key.nameoffset" : 35503,
          "key.offset" : 35499,
          "key.parsed_declaration" : "@usableFromInline let useSpaceForPlusSign:   Bool",
          "key.parsed_scope.end" : 629,
          "key.parsed_scope.start" : 629,
          "key.typename" : "Bool",
          "key.typeusr" : "$sSbD",
          "key.usr" : "s:7Rubicon7FlagSetC19useSpaceForPlusSignSbvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline let isZeroPadded: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 630,
              "key.offset" : 35535
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>isZeroPadded<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 31,
          "key.line" : 630,
          "key.name" : "isZeroPadded",
          "key.namecolumn" : 27,
          "key.namelength" : 12,
          "key.nameline" : 630,
          "key.nameoffset" : 35557,
          "key.offset" : 35553,
          "key.parsed_declaration" : "@usableFromInline let isZeroPadded:          Bool",
          "key.parsed_scope.end" : 630,
          "key.parsed_scope.start" : 630,
          "key.typename" : "Bool",
          "key.typeusr" : "$sSbD",
          "key.usr" : "s:7Rubicon7FlagSetC12isZeroPaddedSbvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline let useParensForMinusSign: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 631,
              "key.offset" : 35589
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>useParensForMinusSign<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 31,
          "key.line" : 631,
          "key.name" : "useParensForMinusSign",
          "key.namecolumn" : 27,
          "key.namelength" : 21,
          "key.nameline" : 631,
          "key.nameoffset" : 35611,
          "key.offset" : 35607,
          "key.parsed_declaration" : "@usableFromInline let useParensForMinusSign: Bool",
          "key.parsed_scope.end" : 631,
          "key.parsed_scope.start" : 631,
          "key.typename" : "Bool",
          "key.typeusr" : "$sSbD",
          "key.usr" : "s:7Rubicon7FlagSetC21useParensForMinusSignSbvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline let alwaysShowPlusSign: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 632,
              "key.offset" : 35643
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>alwaysShowPlusSign<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 31,
          "key.line" : 632,
          "key.name" : "alwaysShowPlusSign",
          "key.namecolumn" : 27,
          "key.namelength" : 18,
          "key.nameline" : 632,
          "key.nameoffset" : 35665,
          "key.offset" : 35661,
          "key.parsed_declaration" : "@usableFromInline let alwaysShowPlusSign:    Bool",
          "key.parsed_scope.end" : 632,
          "key.parsed_scope.start" : 632,
          "key.typename" : "Bool",
          "key.typeusr" : "$sSbD",
          "key.usr" : "s:7Rubicon7FlagSetC18alwaysShowPlusSignSbvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline let isLeftJustified: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 633,
              "key.offset" : 35697
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>isLeftJustified<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 31,
          "key.line" : 633,
          "key.name" : "isLeftJustified",
          "key.namecolumn" : 27,
          "key.namelength" : 15,
          "key.nameline" : 633,
          "key.nameoffset" : 35719,
          "key.offset" : 35715,
          "key.parsed_declaration" : "@usableFromInline let isLeftJustified:       Bool",
          "key.parsed_scope.end" : 633,
          "key.parsed_scope.start" : 633,
          "key.typename" : "Bool",
          "key.typeusr" : "$sSbD",
          "key.usr" : "s:7Rubicon7FlagSetC15isLeftJustifiedSbvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline let useSeparators: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 634,
              "key.offset" : 35751
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>useSeparators<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 31,
          "key.line" : 634,
          "key.name" : "useSeparators",
          "key.namecolumn" : 27,
          "key.namelength" : 13,
          "key.nameline" : 634,
          "key.nameoffset" : 35773,
          "key.offset" : 35769,
          "key.parsed_declaration" : "@usableFromInline let useSeparators:         Bool",
          "key.parsed_scope.end" : 634,
          "key.parsed_scope.start" : 634,
          "key.typename" : "Bool",
          "key.typeusr" : "$sSbD",
          "key.usr" : "s:7Rubicon7FlagSetC13useSeparatorsSbvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline let isUppercase: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 635,
              "key.offset" : 35805
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>isUppercase<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 31,
          "key.line" : 635,
          "key.name" : "isUppercase",
          "key.namecolumn" : 27,
          "key.namelength" : 11,
          "key.nameline" : 635,
          "key.nameoffset" : 35827,
          "key.offset" : 35823,
          "key.parsed_declaration" : "@usableFromInline let isUppercase:           Bool",
          "key.parsed_scope.end" : 635,
          "key.parsed_scope.start" : 635,
          "key.typename" : "Bool",
          "key.typeusr" : "$sSbD",
          "key.usr" : "s:7Rubicon7FlagSetC11isUppercaseSbvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline let isAlternate: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 636,
              "key.offset" : 35859
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>isAlternate<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 31,
          "key.line" : 636,
          "key.name" : "isAlternate",
          "key.namecolumn" : 27,
          "key.namelength" : 11,
          "key.nameline" : 636,
          "key.nameoffset" : 35881,
          "key.offset" : 35877,
          "key.parsed_declaration" : "@usableFromInline let isAlternate:           Bool",
          "key.parsed_scope.end" : 636,
          "key.parsed_scope.start" : 636,
          "key.typename" : "Bool",
          "key.typeusr" : "$sSbD",
          "key.usr" : "s:7Rubicon7FlagSetC11isAlternateSbvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@inlinable init(_ str: <Type usr=\"s:SS\">String<\/Type>?, convSpec: inout <Type usr=\"s:SS\">String<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 638,
              "key.offset" : 35914
            }
          ],
          "key.bodycolumn" : 62,
          "key.bodylength" : 1028,
          "key.bodyline" : 638,
          "key.bodyoffset" : 35971,
          "key.column" : 16,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>str<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SS\">String<\/ref.struct>?<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>convSpec<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 1075,
          "key.line" : 638,
          "key.name" : "init(_:convSpec:)",
          "key.namecolumn" : 16,
          "key.namelength" : 44,
          "key.nameline" : 638,
          "key.nameoffset" : 35925,
          "key.offset" : 35925,
          "key.parsed_declaration" : "@inlinable init(_ str: String?, convSpec: inout String)",
          "key.parsed_scope.end" : 662,
          "key.parsed_scope.start" : 638,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7FlagSetC3set7withoutA2C_AC11FormatFlagsOdtcfc\">init(set:without:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "(FlagSet.Type) -> (String?, inout String) -> FlagSet",
          "key.typeusr" : "$s_8convSpec7Rubicon7FlagSetCSSSg_SSztcD",
          "key.usr" : "s:7Rubicon7FlagSetC_8convSpecACSSSg_SSztcfc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@inlinable init(set: <Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>, without flags: <Type usr=\"s:7Rubicon7FlagSetC11FormatFlagsO\">FormatFlags<\/Type>...)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 664,
              "key.offset" : 37006
            }
          ],
          "key.bodycolumn" : 67,
          "key.bodylength" : 667,
          "key.bodyline" : 664,
          "key.bodyoffset" : 37068,
          "key.column" : 16,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>set<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>without<\/decl.var.parameter.argument_label> <decl.var.parameter.name>flags<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:7Rubicon7FlagSetC11FormatFlagsO\">FormatFlags<\/ref.enum><\/decl.var.parameter.type>...<\/decl.var.parameter>)<\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 719,
          "key.line" : 664,
          "key.name" : "init(set:without:)",
          "key.namecolumn" : 16,
          "key.namelength" : 49,
          "key.nameline" : 664,
          "key.nameoffset" : 37017,
          "key.offset" : 37017,
          "key.parsed_declaration" : "@inlinable init(set: FlagSet, without flags: FormatFlags...)",
          "key.parsed_scope.end" : 673,
          "key.parsed_scope.start" : 664,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon7FlagSetC_8convSpecACSSSg_SSztcfc\">init(_:convSpec:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "(FlagSet.Type) -> (FlagSet, FlagSet.FormatFlags...) -> FlagSet",
          "key.typeusr" : "$s3set7without7Rubicon7FlagSetCAE_AE11FormatFlagsOdtcD",
          "key.usr" : "s:7Rubicon7FlagSetC3set7withoutA2C_AC11FormatFlagsOdtcfc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@inlinable func getSet() -&gt; <Type usr=\"s:Sh\">Set<\/Type>&lt;<Type usr=\"s:7Rubicon7FlagSetC11FormatFlagsO\">FormatFlags<\/Type>&gt;<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 675,
              "key.offset" : 37742
            }
          ],
          "key.bodycolumn" : 51,
          "key.bodylength" : 483,
          "key.bodyline" : 675,
          "key.bodyoffset" : 37788,
          "key.column" : 16,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>getSet<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:Sh\">Set<\/ref.struct>&lt;<ref.enum usr=\"s:7Rubicon7FlagSetC11FormatFlagsO\">FormatFlags<\/ref.enum>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 519,
          "key.line" : 675,
          "key.name" : "getSet()",
          "key.namecolumn" : 21,
          "key.namelength" : 8,
          "key.nameline" : 675,
          "key.nameoffset" : 37758,
          "key.offset" : 37753,
          "key.parsed_declaration" : "@inlinable func getSet() -> Set<FormatFlags>",
          "key.parsed_scope.end" : 686,
          "key.parsed_scope.start" : 675,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>var set: <Type usr=\"s:Sh\">Set<\/Type>&lt;<Type usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/Type>.<Type usr=\"s:7Rubicon7FlagSetC11FormatFlagsO\">FormatFlags<\/Type>&gt;<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/Text\/StringFormat.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>set<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sh\">Set<\/ref.struct>&lt;<ref.class usr=\"s:7Rubicon7FlagSetC\">FlagSet<\/ref.class>.<ref.enum usr=\"s:7Rubicon7FlagSetC11FormatFlagsO\">FormatFlags<\/ref.enum>&gt;<\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 28,
              "key.line" : 676,
              "key.name" : "set",
              "key.namecolumn" : 13,
              "key.namelength" : 3,
              "key.nameline" : 676,
              "key.nameoffset" : 37801,
              "key.offset" : 37797,
              "key.parsed_declaration" : "var set = Set<FormatFlags>()",
              "key.parsed_scope.end" : 676,
              "key.parsed_scope.start" : 676,
              "key.typename" : "Set<FlagSet.FormatFlags>",
              "key.typeusr" : "$sShy7Rubicon7FlagSetC11FormatFlagsOGD",
              "key.usr" : "s:7Rubicon7FlagSetC03getC0ShyAC11FormatFlagsOGyF3setL_AGvp"
            }
          ],
          "key.typename" : "(FlagSet) -> () -> Set<FlagSet.FormatFlags>",
          "key.typeusr" : "$sShy7Rubicon7FlagSetC11FormatFlagsOGycD",
          "key.usr" : "s:7Rubicon7FlagSetC03getC0ShyAC11FormatFlagsOGyF"
        }
      ],
      "key.typename" : "FlagSet.Type",
      "key.typeusr" : "$s7Rubicon7FlagSetCmD",
      "key.usr" : "s:7Rubicon7FlagSetC"
    }
  ]
}