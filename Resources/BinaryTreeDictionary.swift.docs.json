{
  "key.column" : 1,
  "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
  "key.length" : 13338,
  "key.line" : 1,
  "key.offset" : 0,
  "key.substructure" : [
    {
      "key.accessibility" : "source.lang.swift.accessibility.open",
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.attributes" : [
        {
          "key.attribute" : "source.decl.attribute.open",
          "key.column" : 1,
          "key.length" : 4,
          "key.line" : 25,
          "key.offset" : 1109
        }
      ],
      "key.bodycolumn" : 138,
      "key.bodylength" : 5186,
      "key.bodyline" : 25,
      "key.bodyoffset" : 1246,
      "key.column" : 6,
      "key.doc.comment" : "",
      "key.elements" : [
        {
          "key.column" : 81,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 30,
          "key.line" : 25,
          "key.offset" : 1189
        },
        {
          "key.column" : 113,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 23,
          "key.line" : 25,
          "key.offset" : 1221
        }
      ],
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.inheritedtypes" : [
        {
          "key.name" : "ExpressibleByDictionaryLiteral"
        },
        {
          "key.name" : "BidirectionalCollection"
        }
      ],
      "key.kind" : "source.lang.swift.decl.class",
      "key.length" : 5319,
      "key.line" : 25,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 12,
      "key.namelength" : 20,
      "key.nameline" : 25,
      "key.nameoffset" : 1120,
      "key.offset" : 1114,
      "key.parsed_declaration" : "open class BinaryTreeDictionary<Key: Comparable & Hashable & Equatable, Value>: ExpressibleByDictionaryLiteral, BidirectionalCollection",
      "key.parsed_scope.end" : 155,
      "key.parsed_scope.start" : 25,
      "key.substructure" : [
        {
          "key.annotated_decl" : "<Declaration>Key : <Type usr=\"s:SL\">Comparable<\/Type> &amp; <Type usr=\"s:SH\">Hashable<\/Type> &amp; <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
          "key.column" : 33,
          "key.elements" : [
            {
              "key.column" : 38,
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 33,
              "key.line" : 25,
              "key.offset" : 1146
            }
          ],
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Key<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol> &amp; <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol> &amp; <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
          "key.inheritedtypes" : [
            {
              "key.name" : "Comparable & Hashable & Equatable"
            }
          ],
          "key.kind" : "source.lang.swift.decl.generic_type_param",
          "key.length" : 38,
          "key.line" : 25,
          "key.name" : "Key",
          "key.namecolumn" : 33,
          "key.namelength" : 3,
          "key.nameline" : 25,
          "key.nameoffset" : 1141,
          "key.offset" : 1141,
          "key.parsed_declaration" : "open class BinaryTreeDictionary<Key: Comparable & Hashable & Equatable",
          "key.parsed_scope.end" : 25,
          "key.parsed_scope.start" : 25,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keya\">Key<\/RelatedName>"
            }
          ],
          "key.typename" : "Key.Type",
          "key.typeusr" : "$sxmD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp"
        },
        {
          "key.annotated_decl" : "<Declaration>Value<\/Declaration>",
          "key.column" : 73,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>",
          "key.kind" : "source.lang.swift.decl.generic_type_param",
          "key.length" : 5,
          "key.line" : 25,
          "key.name" : "Value",
          "key.namecolumn" : 73,
          "key.namelength" : 5,
          "key.nameline" : 25,
          "key.nameoffset" : 1181,
          "key.offset" : 1181,
          "key.parsed_declaration" : "open class BinaryTreeDictionary<Key: Comparable & Hashable & Equatable, Value",
          "key.parsed_scope.end" : 25,
          "key.parsed_scope.start" : 25,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valuea\">Value<\/RelatedName>"
            }
          ],
          "key.typename" : "Value.Type",
          "key.typeusr" : "$sq_mD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.Index = <Type usr=\"s:7Rubicon9ShadowIntV\">ShadowInt<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 27,
              "key.offset" : 1262
            }
          ],
          "key.column" : 12,
          "key.doc.declaration" : "associatedtype Index : Comparable where Self.Index == Self.Indices.Element, Self.Indices.Element == Self.Indices.Index, Self.Indices.Index == Self.SubSequence.Index, Self.SubSequence.Index == Self.Indices.Indices.Element, Self.Indices.Indices.Element == Self.Indices.Indices.Index, Self.Indices.Indices.Index == Self.SubSequence.Indices.Element, Self.SubSequence.Indices.Element == Self.SubSequence.Indices.Index, Self.SubSequence.Indices.Index == Self.Indices.Indices.Indices.Element, Self.Indices.Indices.Indices.Element == Self.Indices.Indices.Indices.Index, Self.Indices.Indices.Indices.Index == Self.SubSequence.Indices.Indices.Element, Self.SubSequence.Indices.Indices.Element == Self.SubSequence.Indices.Indices.Index, Self.SubSequence.Indices.Indices.Index == Self.SubSequence.Indices.Indices.Indices.Element, Self.SubSequence.Indices.Indices.Indices.Element == Self.SubSequence.Indices.Indices.Indices.Index",
          "key.doc.discussion" : [
            {
              "Para" : "Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>Index<\/Name><USR>s:Sl5IndexQa<\/USR><Declaration>associatedtype Index : Comparable where Self.Index == Self.Indices.Element, Self.Indices.Element == Self.Indices.Index, Self.Indices.Index == Self.SubSequence.Index, Self.SubSequence.Index == Self.Indices.Indices.Element, Self.Indices.Indices.Element == Self.Indices.Indices.Index, Self.Indices.Indices.Index == Self.SubSequence.Indices.Element, Self.SubSequence.Indices.Element == Self.SubSequence.Indices.Index, Self.SubSequence.Indices.Index == Self.Indices.Indices.Indices.Element, Self.Indices.Indices.Indices.Element == Self.Indices.Indices.Indices.Index, Self.Indices.Indices.Indices.Index == Self.SubSequence.Indices.Indices.Element, Self.SubSequence.Indices.Indices.Element == Self.SubSequence.Indices.Indices.Index, Self.SubSequence.Indices.Indices.Index == Self.SubSequence.Indices.Indices.Indices.Element, Self.SubSequence.Indices.Indices.Indices.Element == Self.SubSequence.Indices.Indices.Indices.Index<\/Declaration><CommentParts><Abstract><Para>A type that represents a position in the collection.<\/Para><\/Abstract><Discussion><Para>Valid indices consist of the position of every element and a “past the end” position that’s not valid for use as a subscript argument.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "Index",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<decl.name>Index<\/decl.name> = <ref.struct usr=\"s:7Rubicon9ShadowIntV\">ShadowInt<\/ref.struct><\/decl.typealias>",
          "key.kind" : "source.lang.swift.decl.typealias",
          "key.length" : 33,
          "key.line" : 27,
          "key.name" : "Index",
          "key.namecolumn" : 22,
          "key.namelength" : 5,
          "key.nameline" : 27,
          "key.nameoffset" : 1279,
          "key.offset" : 1269,
          "key.overrides" : [
            {
              "key.usr" : "s:SK5IndexQa"
            },
            {
              "key.usr" : "s:Sl5IndexQa"
            },
            {
              "key.usr" : "s:Sk5IndexQa"
            }
          ],
          "key.parsed_declaration" : "public typealias Index       = ShadowInt",
          "key.parsed_scope.end" : 27,
          "key.parsed_scope.start" : 27,
          "key.typename" : "ShadowInt.Type",
          "key.typeusr" : "$s7Rubicon9ShadowIntVmD",
          "key.usr" : "s:Sl5IndexQa"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.Element = (key: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, value: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 28,
              "key.offset" : 1307
            }
          ],
          "key.column" : 12,
          "key.doc.declaration" : "associatedtype Element where Self.Element == Self.Iterator.Element",
          "key.doc.discussion" : [
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>Element<\/Name><USR>s:ST7ElementQa<\/USR><Declaration>associatedtype Element where Self.Element == Self.Iterator.Element<\/Declaration><CommentParts><Abstract><Para>A type representing the sequence’s elements.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Sequence<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "Element",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<decl.name>Element<\/decl.name> = <tuple>(<tuple.element><tuple.element.argument_label>key<\/tuple.element.argument_label>: <tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.argument_label>value<\/tuple.element.argument_label>: <tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.typealias>",
          "key.kind" : "source.lang.swift.decl.typealias",
          "key.length" : 48,
          "key.line" : 28,
          "key.name" : "Element",
          "key.namecolumn" : 22,
          "key.namelength" : 7,
          "key.nameline" : 28,
          "key.nameoffset" : 1324,
          "key.offset" : 1314,
          "key.overrides" : [
            {
              "key.usr" : "s:SK7ElementQa"
            },
            {
              "key.usr" : "s:Sl7ElementQa"
            },
            {
              "key.usr" : "s:ST7ElementQa"
            },
            {
              "key.usr" : "s:Sk7ElementQa"
            }
          ],
          "key.parsed_declaration" : "public typealias Element     = (key: Key, value: Value)",
          "key.parsed_scope.end" : 28,
          "key.parsed_scope.start" : 28,
          "key.typename" : "(key: Key, value: Value).Type",
          "key.typeusr" : "$sx3key_q_5valuetmD",
          "key.usr" : "s:ST7ElementQa"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.SubSequence = <Type usr=\"s:s5SliceV\">Slice<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;&gt;<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 29,
              "key.offset" : 1367
            }
          ],
          "key.column" : 12,
          "key.doc.declaration" : "associatedtype SubSequence : Collection = Slice<Self> where Self.Element == Self.SubSequence.Element, Self.SubSequence == Self.SubSequence.SubSequence",
          "key.doc.discussion" : [
            {
              "Para" : "This associated type appears as a requirement in the `Sequence` protocol, but it is restated here with stricter constraints. In a collection, the subsequence should also conform to `Collection`."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>SubSequence<\/Name><USR>s:Sl11SubSequenceQa<\/USR><Declaration>associatedtype SubSequence : Collection = Slice&lt;Self&gt; where Self.Element == Self.SubSequence.Element, Self.SubSequence == Self.SubSequence.SubSequence<\/Declaration><CommentParts><Abstract><Para>A sequence that represents a contiguous subrange of the collection’s elements.<\/Para><\/Abstract><Discussion><Para>This associated type appears as a requirement in the <codeVoice>Sequence<\/codeVoice> protocol, but it is restated here with stricter constraints. In a collection, the subsequence should also conform to <codeVoice>Collection<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "SubSequence",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<decl.name>SubSequence<\/decl.name> = <ref.struct usr=\"s:s5SliceV\">Slice<\/ref.struct>&lt;<ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;&gt;<\/decl.typealias>",
          "key.kind" : "source.lang.swift.decl.typealias",
          "key.length" : 63,
          "key.line" : 29,
          "key.name" : "SubSequence",
          "key.namecolumn" : 22,
          "key.namelength" : 11,
          "key.nameline" : 29,
          "key.nameoffset" : 1384,
          "key.offset" : 1374,
          "key.overrides" : [
            {
              "key.usr" : "s:SK11SubSequenceQa"
            },
            {
              "key.usr" : "s:Sl11SubSequenceQa"
            },
            {
              "key.usr" : "s:Sk11SubSequenceQa"
            }
          ],
          "key.parsed_declaration" : "public typealias SubSequence = Slice<BinaryTreeDictionary<Key, Value>>",
          "key.parsed_scope.end" : 29,
          "key.parsed_scope.start" : 29,
          "key.typename" : "Slice<BinaryTreeDictionary<Key, Value>>.Type",
          "key.typeusr" : "$ss5SliceVy7Rubicon20BinaryTreeDictionaryCyxq_GGmD",
          "key.usr" : "s:Sl11SubSequenceQa"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.Indices = <Type usr=\"s:SI\">DefaultIndices<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;&gt;<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 30,
              "key.offset" : 1442
            }
          ],
          "key.column" : 12,
          "key.doc.declaration" : "associatedtype Indices : Collection = DefaultIndices<Self> where Self.Indices == Self.Indices.SubSequence",
          "key.doc.discussion" : [
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>Indices<\/Name><USR>s:Sl7IndicesQa<\/USR><Declaration>associatedtype Indices : Collection = DefaultIndices&lt;Self&gt; where Self.Indices == Self.Indices.SubSequence<\/Declaration><CommentParts><Abstract><Para>A type that represents the indices that are valid for subscripting the collection, in ascending order.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "Indices",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<decl.name>Indices<\/decl.name> = <ref.struct usr=\"s:SI\">DefaultIndices<\/ref.struct>&lt;<ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;&gt;<\/decl.typealias>",
          "key.kind" : "source.lang.swift.decl.typealias",
          "key.length" : 72,
          "key.line" : 30,
          "key.name" : "Indices",
          "key.namecolumn" : 22,
          "key.namelength" : 7,
          "key.nameline" : 30,
          "key.nameoffset" : 1459,
          "key.offset" : 1449,
          "key.overrides" : [
            {
              "key.usr" : "s:SK7IndicesQa"
            },
            {
              "key.usr" : "s:Sl7IndicesQa"
            },
            {
              "key.usr" : "s:Sk7IndicesQa"
            }
          ],
          "key.parsed_declaration" : "public typealias Indices     = DefaultIndices<BinaryTreeDictionary<Key, Value>>",
          "key.parsed_scope.end" : 30,
          "key.parsed_scope.start" : 30,
          "key.typename" : "DefaultIndices<BinaryTreeDictionary<Key, Value>>.Type",
          "key.typeusr" : "$sSIy7Rubicon20BinaryTreeDictionaryCyxq_GGmD",
          "key.usr" : "s:Sl7IndicesQa"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public let capacity: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 32,
              "key.offset" : 1527
            }
          ],
          "key.column" : 34,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>capacity<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 32,
          "key.line" : 32,
          "key.name" : "capacity",
          "key.namecolumn" : 38,
          "key.namelength" : 8,
          "key.nameline" : 32,
          "key.nameoffset" : 1560,
          "key.offset" : 1556,
          "key.parsed_declaration" : "public                       let capacity:   Int    = Int.max",
          "key.parsed_scope.end" : 32,
          "key.parsed_scope.start" : 32,
          "key.typename" : "Int",
          "key.typeusr" : "$sSiD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC8capacitySivp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public let startIndex: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 33,
              "key.offset" : 1593
            }
          ],
          "key.column" : 34,
          "key.doc.declaration" : "var startIndex: Self.Index { get }",
          "key.doc.discussion" : [
            {
              "Para" : "If the collection is empty, `startIndex` is equal to `endIndex`."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>startIndex<\/Name><USR>s:Sl10startIndex0B0Qzvp<\/USR><Declaration>var startIndex: Self.Index { get }<\/Declaration><CommentParts><Abstract><Para>The position of the first element in a nonempty collection.<\/Para><\/Abstract><Discussion><Para>If the collection is empty, <codeVoice>startIndex<\/codeVoice> is equal to <codeVoice>endIndex<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "startIndex",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>startIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 33,
          "key.line" : 33,
          "key.name" : "startIndex",
          "key.namecolumn" : 38,
          "key.namelength" : 10,
          "key.nameline" : 33,
          "key.nameoffset" : 1626,
          "key.offset" : 1622,
          "key.overrides" : [
            {
              "key.usr" : "s:SK10startIndex0B0Qzvp"
            },
            {
              "key.usr" : "s:Sl10startIndex0B0Qzvp"
            },
            {
              "key.usr" : "s:Sk10startIndex0B0Qzvp"
            }
          ],
          "key.parsed_declaration" : "public                       let startIndex: Index  = Index(0)",
          "key.parsed_scope.end" : 33,
          "key.parsed_scope.start" : 33,
          "key.typename" : "ShadowInt",
          "key.typeusr" : "$s7Rubicon9ShadowIntVD",
          "key.usr" : "s:Sl10startIndex0B0Qzvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public fileprivate(set) lazy var keys: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/Type> { get set }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.lazy",
              "key.column" : 29,
              "key.length" : 4,
              "key.line" : 34,
              "key.offset" : 1684
            },
            {
              "key.attribute" : "source.decl.attribute.setter_access.fileprivate",
              "key.column" : 12,
              "key.length" : 16,
              "key.line" : 34,
              "key.offset" : 1667
            },
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 34,
              "key.offset" : 1660
            }
          ],
          "key.column" : 34,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>fileprivate<\/syntaxtype.keyword>(set) <syntaxtype.keyword>lazy<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>keys<\/decl.name>: <decl.var.type><ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 35,
          "key.line" : 34,
          "key.name" : "keys",
          "key.namecolumn" : 38,
          "key.namelength" : 4,
          "key.nameline" : 34,
          "key.nameoffset" : 1693,
          "key.offset" : 1689,
          "key.parsed_declaration" : "public fileprivate(set) lazy var keys:       Keys   = Keys(self)",
          "key.parsed_scope.end" : 34,
          "key.parsed_scope.start" : 34,
          "key.setter_accessibility" : "source.lang.swift.accessibility.fileprivate",
          "key.typename" : "BinaryTreeDictionary<Key, Value>.Keys",
          "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryC4KeysVyxq__GD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC4keysAC4KeysVyxq__Gvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public fileprivate(set) lazy var values: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/Type> { get set }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.lazy",
              "key.column" : 29,
              "key.length" : 4,
              "key.line" : 35,
              "key.offset" : 1753
            },
            {
              "key.attribute" : "source.decl.attribute.setter_access.fileprivate",
              "key.column" : 12,
              "key.length" : 16,
              "key.line" : 35,
              "key.offset" : 1736
            },
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 35,
              "key.offset" : 1729
            }
          ],
          "key.column" : 34,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>fileprivate<\/syntaxtype.keyword>(set) <syntaxtype.keyword>lazy<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>values<\/decl.name>: <decl.var.type><ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 37,
          "key.line" : 35,
          "key.name" : "values",
          "key.namecolumn" : 38,
          "key.namelength" : 6,
          "key.nameline" : 35,
          "key.nameoffset" : 1762,
          "key.offset" : 1758,
          "key.parsed_declaration" : "public fileprivate(set) lazy var values:     Values = Values(self)",
          "key.parsed_scope.end" : 35,
          "key.parsed_scope.start" : 35,
          "key.setter_accessibility" : "source.lang.swift.accessibility.fileprivate",
          "key.typename" : "BinaryTreeDictionary<Key, Value>.Values",
          "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryC6ValuesVyxq__GD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6valuesAC6ValuesVyxq__Gvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public var endIndex: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type> { get }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 36,
              "key.offset" : 1800
            }
          ],
          "key.bodycolumn" : 58,
          "key.bodylength" : 22,
          "key.bodyline" : 36,
          "key.bodyoffset" : 1853,
          "key.column" : 34,
          "key.doc.declaration" : "var endIndex: Self.Index { get }",
          "key.doc.discussion" : [
            {
              "Para" : "When you need a range that includes the last element of a collection, use the half-open range operator (`..<`) with `endIndex`. The `..<` operator creates a range that doesn’t include the upper bound, so it’s always safe to use with `endIndex`. For example:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "If the collection is empty, `endIndex` is equal to `startIndex`."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>endIndex<\/Name><USR>s:Sl8endIndex0B0Qzvp<\/USR><Declaration>var endIndex: Self.Index { get }<\/Declaration><CommentParts><Abstract><Para>The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.<\/Para><\/Abstract><Discussion><Para>When you need a range that includes the last element of a collection, use the half-open range operator (<codeVoice>..&lt;<\/codeVoice>) with <codeVoice>endIndex<\/codeVoice>. The <codeVoice>..&lt;<\/codeVoice> operator creates a range that doesn’t include the upper bound, so it’s always safe to use with <codeVoice>endIndex<\/codeVoice>. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let numbers = [10, 20, 30, 40, 50]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let index = numbers.firstIndex(of: 30) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(numbers[index ..< numbers.endIndex])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[30, 40, 50]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If the collection is empty, <codeVoice>endIndex<\/codeVoice> is equal to <codeVoice>startIndex<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "endIndex",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>endIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 47,
          "key.line" : 36,
          "key.name" : "endIndex",
          "key.namecolumn" : 38,
          "key.namelength" : 8,
          "key.nameline" : 36,
          "key.nameoffset" : 1833,
          "key.offset" : 1829,
          "key.overrides" : [
            {
              "key.usr" : "s:SK8endIndex0B0Qzvp"
            },
            {
              "key.usr" : "s:Sl8endIndex0B0Qzvp"
            },
            {
              "key.usr" : "s:Sk8endIndex0B0Qzvp"
            }
          ],
          "key.parsed_declaration" : "public                       var endIndex:   Index",
          "key.parsed_scope.end" : 36,
          "key.parsed_scope.start" : 36,
          "key.typename" : "ShadowInt",
          "key.typeusr" : "$s7Rubicon9ShadowIntVD",
          "key.usr" : "s:Sl8endIndex0B0Qzvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public var isEmpty: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 37,
              "key.offset" : 1881
            }
          ],
          "key.bodycolumn" : 58,
          "key.bodylength" : 22,
          "key.bodyline" : 37,
          "key.bodyoffset" : 1934,
          "key.column" : 34,
          "key.doc.declaration" : "var isEmpty: Bool { get }",
          "key.doc.discussion" : [
            {
              "Para" : "When you need to check whether your collection is empty, use the `isEmpty` property instead of checking that the `count` property is equal to zero. For collections that don’t conform to `RandomAccessCollection`, accessing the `count` property iterates through the elements of the collection."
            },
            {
              "CodeListing" : ""
            },
            {
              "Complexity" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>isEmpty<\/Name><USR>s:Sl7isEmptySbvp<\/USR><Declaration>var isEmpty: Bool { get }<\/Declaration><CommentParts><Abstract><Para>A Boolean value indicating whether the collection is empty.<\/Para><\/Abstract><Discussion><Para>When you need to check whether your collection is empty, use the <codeVoice>isEmpty<\/codeVoice> property instead of checking that the <codeVoice>count<\/codeVoice> property is equal to zero. For collections that don’t conform to <codeVoice>RandomAccessCollection<\/codeVoice>, accessing the <codeVoice>count<\/codeVoice> property iterates through the elements of the collection.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let horseName = \"Silver\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if horseName.isEmpty {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"My horse has no name.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Hi ho, \\(horseName)!\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Hi ho, Silver!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "isEmpty",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isEmpty<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 47,
          "key.line" : 37,
          "key.name" : "isEmpty",
          "key.namecolumn" : 38,
          "key.namelength" : 7,
          "key.nameline" : 37,
          "key.nameoffset" : 1914,
          "key.offset" : 1910,
          "key.overrides" : [
            {
              "key.usr" : "s:Sl7isEmptySbvp"
            }
          ],
          "key.parsed_declaration" : "public                       var isEmpty:    Bool",
          "key.parsed_scope.end" : 37,
          "key.parsed_scope.start" : 37,
          "key.typename" : "Bool",
          "key.typeusr" : "$sSbD",
          "key.usr" : "s:Sl7isEmptySbvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public var count: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 38,
              "key.offset" : 1962
            }
          ],
          "key.bodycolumn" : 58,
          "key.bodylength" : 22,
          "key.bodyline" : 38,
          "key.bodyoffset" : 2015,
          "key.column" : 34,
          "key.doc.declaration" : "var count: Int { get }",
          "key.doc.discussion" : [
            {
              "Para" : "To check whether a collection is empty, use its `isEmpty` property instead of comparing `count` to zero. Unless the collection guarantees random-access performance, calculating `count` can be an O() operation."
            },
            {
              "Complexity" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>count<\/Name><USR>s:Sl5countSivp<\/USR><Declaration>var count: Int { get }<\/Declaration><CommentParts><Abstract><Para>The number of elements in the collection.<\/Para><\/Abstract><Discussion><Para>To check whether a collection is empty, use its <codeVoice>isEmpty<\/codeVoice> property instead of comparing <codeVoice>count<\/codeVoice> to zero. Unless the collection guarantees random-access performance, calculating <codeVoice>count<\/codeVoice> can be an O(<emphasis>n<\/emphasis>) operation.<\/Para><Complexity><Para>O(1) if the collection conforms to <codeVoice>RandomAccessCollection<\/codeVoice>; otherwise, O(<emphasis>n<\/emphasis>), where <emphasis>n<\/emphasis> is the length of the collection.<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "count",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 47,
          "key.line" : 38,
          "key.name" : "count",
          "key.namecolumn" : 38,
          "key.namelength" : 5,
          "key.nameline" : 38,
          "key.nameoffset" : 1995,
          "key.offset" : 1991,
          "key.overrides" : [
            {
              "key.usr" : "s:Sl5countSivp"
            }
          ],
          "key.parsed_declaration" : "public                       var count:      Int",
          "key.parsed_scope.end" : 38,
          "key.parsed_scope.start" : 38,
          "key.typename" : "Int",
          "key.typeusr" : "$sSiD",
          "key.usr" : "s:Sl5countSivp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline var _hashValue: <Type usr=\"s:Si\">Int<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 40,
              "key.offset" : 2044
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_hashValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 43,
          "key.line" : 40,
          "key.name" : "_hashValue",
          "key.namecolumn" : 27,
          "key.namelength" : 10,
          "key.nameline" : 40,
          "key.nameoffset" : 2066,
          "key.offset" : 2062,
          "key.parsed_declaration" : "@usableFromInline var _hashValue: Int?                  = nil",
          "key.parsed_scope.end" : 40,
          "key.parsed_scope.start" : 40,
          "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
          "key.typename" : "Int?",
          "key.typeusr" : "$sSiSgD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC10_hashValueSiSgvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline var rootNode: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 41,
              "key.offset" : 2110
            }
          ],
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>rootNode<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;?<\/decl.var.type><\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 43,
          "key.line" : 41,
          "key.name" : "rootNode",
          "key.namecolumn" : 27,
          "key.namelength" : 8,
          "key.nameline" : 41,
          "key.nameoffset" : 2132,
          "key.offset" : 2128,
          "key.parsed_declaration" : "@usableFromInline var rootNode:   TreeNode<Key, Value>? = nil",
          "key.parsed_scope.end" : 41,
          "key.parsed_scope.start" : 41,
          "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
          "key.typename" : "TreeNode<Key, Value>?",
          "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GSgD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC8rootNodeAA0cF0Cyxq_GSgvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public required init()<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.required",
              "key.column" : 12,
              "key.length" : 8,
              "key.line" : 47,
              "key.offset" : 2347
            },
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 47,
              "key.offset" : 2340
            }
          ],
          "key.bodycolumn" : 29,
          "key.bodylength" : 0,
          "key.bodyline" : 47,
          "key.bodyoffset" : 2364,
          "key.column" : 21,
          "key.doc.column" : 21,
          "key.doc.comment" : "Default constructor.",
          "key.doc.declaration" : "public required init()",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift\" line=\"47\" column=\"21\"><Name>init()<\/Name><USR>s:7Rubicon20BinaryTreeDictionaryCACyxq_Gycfc<\/USR><Declaration>public required init()<\/Declaration><CommentParts><Abstract><Para>Default constructor.<\/Para><\/Abstract><\/CommentParts><\/Function>",
          "key.doc.line" : 47,
          "key.doc.name" : "init()",
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 33,
          "key.docline" : 45,
          "key.docoffset" : 2303,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>required<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>()<\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 9,
          "key.line" : 47,
          "key.name" : "init()",
          "key.namecolumn" : 21,
          "key.namelength" : 6,
          "key.nameline" : 47,
          "key.nameoffset" : 2356,
          "key.offset" : 2356,
          "key.parsed_declaration" : "public required init()",
          "key.parsed_scope.end" : 47,
          "key.parsed_scope.start" : 47,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC9repeating5countACyxq_Gx3key_q_5valuet_Sitcfc\">init(repeating:count:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc\">init&lt;S&gt;(_: S) where S : Sequence, S.Element == BinaryTreeDictionary&lt;Key, Value&gt;.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC4fromACyxq_Gs7Decoder_p_tKcSeRzSeR_rlufc\">init(from:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC15minimumCapacityACyxq_GSi_tcfc\">init(minimumCapacity:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC17dictionaryLiteralACyxq_Gx_q_td_tcfc\">init(dictionaryLiteral:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GSDyxq_Gcfc\">init(_: [Key : Value])<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GADcfc\">init(_: BinaryTreeDictionary&lt;Key, Value&gt;)<\/RelatedName>"
            }
          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> () -> BinaryTreeDictionary<Key, Value>",
          "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GycD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryCACyxq_Gycfc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public required init(repeating repeatedValue: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/Type>, count: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.required",
              "key.column" : 12,
              "key.length" : 8,
              "key.line" : 49,
              "key.offset" : 2378
            },
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 49,
              "key.offset" : 2371
            }
          ],
          "key.bodycolumn" : 73,
          "key.bodylength" : 64,
          "key.bodyline" : 49,
          "key.bodyoffset" : 2439,
          "key.column" : 21,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>required<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>repeating<\/decl.var.parameter.argument_label> <decl.var.parameter.name>repeatedValue<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>count<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 117,
          "key.line" : 49,
          "key.name" : "init(repeating:count:)",
          "key.namecolumn" : 21,
          "key.namelength" : 50,
          "key.nameline" : 49,
          "key.nameoffset" : 2387,
          "key.offset" : 2387,
          "key.parsed_declaration" : "public required init(repeating repeatedValue: Element, count: Int)",
          "key.parsed_scope.end" : 49,
          "key.parsed_scope.start" : 49,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCACyxq_Gycfc\">init()<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc\">init&lt;S&gt;(_: S) where S : Sequence, S.Element == BinaryTreeDictionary&lt;Key, Value&gt;.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC4fromACyxq_Gs7Decoder_p_tKcSeRzSeR_rlufc\">init(from:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC15minimumCapacityACyxq_GSi_tcfc\">init(minimumCapacity:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC17dictionaryLiteralACyxq_Gx_q_td_tcfc\">init(dictionaryLiteral:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GSDyxq_Gcfc\">init(_: [Key : Value])<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GADcfc\">init(_: BinaryTreeDictionary&lt;Key, Value&gt;)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> ((key: Key, value: Value), Int) -> BinaryTreeDictionary<Key, Value>",
          "key.typeusr" : "$s9repeating5count7Rubicon20BinaryTreeDictionaryCyxq_Gx3key_q_5valuet_SitcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC9repeating5countACyxq_Gx3key_q_5valuet_Sitcfc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public required init&lt;S&gt;(_ elements: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc1SL_qd__mfp\">S<\/Type>) where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc1SL_qd__mfp\">S<\/Type> : <Type usr=\"s:ST\">Sequence<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc1SL_qd__mfp\">S<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type> == <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.required",
              "key.column" : 12,
              "key.length" : 8,
              "key.line" : 51,
              "key.offset" : 2517
            },
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 51,
              "key.offset" : 2510
            }
          ],
          "key.bodycolumn" : 85,
          "key.bodylength" : 49,
          "key.bodyline" : 51,
          "key.bodyoffset" : 2590,
          "key.column" : 21,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>required<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc1SL_qd__mfp\"><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>elements<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype> == <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/ref.typealias><\/decl.generic_type_requirement><\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 114,
          "key.line" : 51,
          "key.name" : "init(_:)",
          "key.namecolumn" : 21,
          "key.namelength" : 22,
          "key.nameline" : 51,
          "key.nameoffset" : 2526,
          "key.offset" : 2526,
          "key.parsed_declaration" : "public required init<S>(_ elements: S) where S: Sequence, Element == S.Element",
          "key.parsed_scope.end" : 51,
          "key.parsed_scope.start" : 51,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCACyxq_Gycfc\">init()<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC9repeating5countACyxq_Gx3key_q_5valuet_Sitcfc\">init(repeating:count:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC4fromACyxq_Gs7Decoder_p_tKcSeRzSeR_rlufc\">init(from:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC15minimumCapacityACyxq_GSi_tcfc\">init(minimumCapacity:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC17dictionaryLiteralACyxq_Gx_q_td_tcfc\">init(dictionaryLiteral:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GSDyxq_Gcfc\">init(_: [Key : Value])<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GADcfc\">init(_: BinaryTreeDictionary&lt;Key, Value&gt;)<\/RelatedName>"
            }
          ],
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>S<\/Declaration>",
              "key.column" : 26,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind" : "source.lang.swift.decl.generic_type_param",
              "key.length" : 1,
              "key.line" : 51,
              "key.name" : "S",
              "key.namecolumn" : 26,
              "key.namelength" : 1,
              "key.nameline" : 51,
              "key.nameoffset" : 2531,
              "key.offset" : 2531,
              "key.parsed_declaration" : "public required init<S",
              "key.parsed_scope.end" : 51,
              "key.parsed_scope.start" : 51,
              "key.typename" : "S.Type",
              "key.typeusr" : "$sqd__mD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc1SL_qd__mfp"
            }
          ],
          "key.typename" : "<Key, Value, S where Key : Comparable, Key : Hashable, S : Sequence, S.Element == (key: Key, value: Value)> (BinaryTreeDictionary<Key, Value>.Type) -> (S) -> BinaryTreeDictionary<Key, Value>",
          "key.typeusr" : "$sy7Rubicon20BinaryTreeDictionaryCyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__luD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public required init(from decoder: <Type usr=\"s:s7DecoderP\">Decoder<\/Type>) throws where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:Se\">Decodable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type> : <Type usr=\"s:Se\">Decodable<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.required",
              "key.column" : 12,
              "key.length" : 8,
              "key.line" : 53,
              "key.offset" : 2653
            },
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 53,
              "key.offset" : 2646
            }
          ],
          "key.bodycolumn" : 96,
          "key.bodylength" : 235,
          "key.bodyline" : 53,
          "key.bodyoffset" : 2737,
          "key.column" : 21,
          "key.doc.declaration" : "init(from decoder: Decoder) throws",
          "key.doc.discussion" : [
            {
              "Para" : "This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>init(from:)<\/Name><USR>s:Se4fromxs7Decoder_p_tKcfc<\/USR><Declaration>init(from decoder: Decoder) throws<\/Declaration><CommentParts><Abstract><Para>Creates a new instance by decoding from the given decoder.<\/Para><\/Abstract><Parameters><Parameter><Name>decoder<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The decoder to read data from.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Decodable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "init(from:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The decoder to read data from."
                }
              ],
              "name" : "decoder"
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>required<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>decoder<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.protocol usr=\"s:s7DecoderP\">Decoder<\/ref.protocol><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:Se\">Decodable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param> : <ref.protocol usr=\"s:Se\">Decodable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 311,
          "key.line" : 53,
          "key.name" : "init(from:)",
          "key.namecolumn" : 21,
          "key.namelength" : 27,
          "key.nameline" : 53,
          "key.nameoffset" : 2662,
          "key.offset" : 2662,
          "key.overrides" : [
            {
              "key.usr" : "s:Se4fromxs7Decoder_p_tKcfc"
            }
          ],
          "key.parsed_declaration" : "public required init(from decoder: Decoder) throws where Key: Decodable, Value: Decodable",
          "key.parsed_scope.end" : 60,
          "key.parsed_scope.start" : 53,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCACyxq_Gycfc\">init()<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC9repeating5countACyxq_Gx3key_q_5valuet_Sitcfc\">init(repeating:count:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc\">init&lt;S&gt;(_: S) where S : Sequence, S.Element == BinaryTreeDictionary&lt;Key, Value&gt;.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC15minimumCapacityACyxq_GSi_tcfc\">init(minimumCapacity:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC17dictionaryLiteralACyxq_Gx_q_td_tcfc\">init(dictionaryLiteral:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GSDyxq_Gcfc\">init(_: [Key : Value])<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GADcfc\">init(_: BinaryTreeDictionary&lt;Key, Value&gt;)<\/RelatedName>"
            }
          ],
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let cc: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>cc<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 31,
              "key.line" : 54,
              "key.name" : "cc",
              "key.namecolumn" : 13,
              "key.namelength" : 2,
              "key.nameline" : 54,
              "key.nameoffset" : 2750,
              "key.offset" : 2746,
              "key.parsed_declaration" : "let cc = try Int(from: decoder)",
              "key.parsed_scope.end" : 54,
              "key.parsed_scope.start" : 54,
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC4fromACyxq_Gs7Decoder_p_tKcSeRzSeR_rlufc2ccL_Sivp"
            }
          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Decodable, Key : Hashable, Value : Decodable> (BinaryTreeDictionary<Key, Value>.Type) -> (Decoder) throws -> BinaryTreeDictionary<Key, Value>",
          "key.typeusr" : "$s4from7Rubicon20BinaryTreeDictionaryCyxq_Gs7Decoder_p_tKcSeRzSeR_rluD",
          "key.usr" : "s:Se4fromxs7Decoder_p_tKcfc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public init(minimumCapacity: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 67,
              "key.offset" : 3265
            }
          ],
          "key.bodycolumn" : 40,
          "key.bodylength" : 0,
          "key.bodyline" : 67,
          "key.bodyoffset" : 3300,
          "key.column" : 12,
          "key.doc.column" : 12,
          "key.doc.comment" : "Only for compatibility with Dictionary. The minimum capacity of a BinaryTreeDictionary is always 0.\n\n- Parameter minimumCapacity: ignored.",
          "key.doc.declaration" : "public init(minimumCapacity: Int)",
          "key.doc.file" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.doc.full_as_xml" : "<Function file=\"\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift\" line=\"67\" column=\"12\"><Name>init(minimumCapacity:)<\/Name><USR>s:7Rubicon20BinaryTreeDictionaryC15minimumCapacityACyxq_GSi_tcfc<\/USR><Declaration>public init(minimumCapacity: Int)<\/Declaration><CommentParts><Abstract><Para>Only for compatibility with Dictionary. The minimum capacity of a BinaryTreeDictionary is always 0.<\/Para><\/Abstract><Parameters><Parameter><Name>minimumCapacity<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>ignored.<\/Para><\/Discussion><\/Parameter><\/Parameters><\/CommentParts><\/Function>",
          "key.doc.line" : 67,
          "key.doc.name" : "init(minimumCapacity:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "ignored."
                }
              ],
              "name" : "minimumCapacity"
            }
          ],
          "key.doc.type" : "Function",
          "key.doccolumn" : 5,
          "key.doclength" : 167,
          "key.docline" : 63,
          "key.docoffset" : 3094,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>minimumCapacity<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 29,
          "key.line" : 67,
          "key.name" : "init(minimumCapacity:)",
          "key.namecolumn" : 12,
          "key.namelength" : 26,
          "key.nameline" : 67,
          "key.nameoffset" : 3272,
          "key.offset" : 3272,
          "key.parsed_declaration" : "public init(minimumCapacity: Int)",
          "key.parsed_scope.end" : 67,
          "key.parsed_scope.start" : 67,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCACyxq_Gycfc\">init()<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC9repeating5countACyxq_Gx3key_q_5valuet_Sitcfc\">init(repeating:count:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc\">init&lt;S&gt;(_: S) where S : Sequence, S.Element == BinaryTreeDictionary&lt;Key, Value&gt;.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC4fromACyxq_Gs7Decoder_p_tKcSeRzSeR_rlufc\">init(from:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC17dictionaryLiteralACyxq_Gx_q_td_tcfc\">init(dictionaryLiteral:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GSDyxq_Gcfc\">init(_: [Key : Value])<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GADcfc\">init(_: BinaryTreeDictionary&lt;Key, Value&gt;)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> (Int) -> BinaryTreeDictionary<Key, Value>",
          "key.typeusr" : "$s15minimumCapacity7Rubicon20BinaryTreeDictionaryCyxq_GSi_tcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC15minimumCapacityACyxq_GSi_tcfc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public required init(dictionaryLiteral elements: (<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>)...)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.required",
              "key.column" : 12,
              "key.length" : 8,
              "key.line" : 69,
              "key.offset" : 3314
            },
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 69,
              "key.offset" : 3307
            }
          ],
          "key.bodycolumn" : 72,
          "key.bodylength" : 40,
          "key.bodyline" : 69,
          "key.bodyoffset" : 3374,
          "key.column" : 21,
          "key.doc.declaration" : "init(dictionaryLiteral elements: (Self.Key, Self.Value)...)",
          "key.doc.discussion" : [
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>init(dictionaryLiteral:)<\/Name><USR>s:s30ExpressibleByDictionaryLiteralP010dictionaryD0x3KeyQz_5ValueQztd_tcfc<\/USR><Declaration>init(dictionaryLiteral elements: (Self.Key, Self.Value)...)<\/Declaration><CommentParts><Abstract><Para>Creates an instance initialized with the given key-value pairs.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>ExpressibleByDictionaryLiteral<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "init(dictionaryLiteral:)",
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>required<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>dictionaryLiteral<\/decl.var.parameter.argument_label> <decl.var.parameter.name>elements<\/decl.var.parameter.name>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.parameter.type>...<\/decl.var.parameter>)<\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 92,
          "key.line" : 69,
          "key.name" : "init(dictionaryLiteral:)",
          "key.namecolumn" : 21,
          "key.namelength" : 49,
          "key.nameline" : 69,
          "key.nameoffset" : 3323,
          "key.offset" : 3323,
          "key.overrides" : [
            {
              "key.usr" : "s:s30ExpressibleByDictionaryLiteralP010dictionaryD0x3KeyQz_5ValueQztd_tcfc"
            }
          ],
          "key.parsed_declaration" : "public required init(dictionaryLiteral elements: (Key, Value)...)",
          "key.parsed_scope.end" : 69,
          "key.parsed_scope.start" : 69,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCACyxq_Gycfc\">init()<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC9repeating5countACyxq_Gx3key_q_5valuet_Sitcfc\">init(repeating:count:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc\">init&lt;S&gt;(_: S) where S : Sequence, S.Element == BinaryTreeDictionary&lt;Key, Value&gt;.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC4fromACyxq_Gs7Decoder_p_tKcSeRzSeR_rlufc\">init(from:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC15minimumCapacityACyxq_GSi_tcfc\">init(minimumCapacity:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GSDyxq_Gcfc\">init(_: [Key : Value])<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GADcfc\">init(_: BinaryTreeDictionary&lt;Key, Value&gt;)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> ((Key, Value)...) -> BinaryTreeDictionary<Key, Value>",
          "key.typeusr" : "$s17dictionaryLiteral7Rubicon20BinaryTreeDictionaryCyxq_Gx_q_td_tcD",
          "key.usr" : "s:s30ExpressibleByDictionaryLiteralP010dictionaryD0x3KeyQz_5ValueQztd_tcfc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public init(_ dictionary: [<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>])<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 71,
              "key.offset" : 3421
            }
          ],
          "key.bodycolumn" : 46,
          "key.bodylength" : 48,
          "key.bodyline" : 71,
          "key.bodyoffset" : 3462,
          "key.column" : 12,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dictionary<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 83,
          "key.line" : 71,
          "key.name" : "init(_:)",
          "key.namecolumn" : 12,
          "key.namelength" : 32,
          "key.nameline" : 71,
          "key.nameoffset" : 3428,
          "key.offset" : 3428,
          "key.parsed_declaration" : "public init(_ dictionary: [Key: Value])",
          "key.parsed_scope.end" : 71,
          "key.parsed_scope.start" : 71,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCACyxq_Gycfc\">init()<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC9repeating5countACyxq_Gx3key_q_5valuet_Sitcfc\">init(repeating:count:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc\">init&lt;S&gt;(_: S) where S : Sequence, S.Element == BinaryTreeDictionary&lt;Key, Value&gt;.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC4fromACyxq_Gs7Decoder_p_tKcSeRzSeR_rlufc\">init(from:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC15minimumCapacityACyxq_GSi_tcfc\">init(minimumCapacity:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC17dictionaryLiteralACyxq_Gx_q_td_tcfc\">init(dictionaryLiteral:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GADcfc\">init(_: BinaryTreeDictionary&lt;Key, Value&gt;)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> ([Key : Value]) -> BinaryTreeDictionary<Key, Value>",
          "key.typeusr" : "$sy7Rubicon20BinaryTreeDictionaryCyxq_GSDyxq_GcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryCyACyxq_GSDyxq_Gcfc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public init(_ tree: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 73,
              "key.offset" : 3517
            }
          ],
          "key.bodycolumn" : 60,
          "key.bodylength" : 42,
          "key.bodyline" : 73,
          "key.bodyoffset" : 3572,
          "key.column" : 12,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tree<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 91,
          "key.line" : 73,
          "key.name" : "init(_:)",
          "key.namecolumn" : 12,
          "key.namelength" : 46,
          "key.nameline" : 73,
          "key.nameoffset" : 3524,
          "key.offset" : 3524,
          "key.parsed_declaration" : "public init(_ tree: BinaryTreeDictionary<Key, Value>)",
          "key.parsed_scope.end" : 73,
          "key.parsed_scope.start" : 73,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCACyxq_Gycfc\">init()<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC9repeating5countACyxq_Gx3key_q_5valuet_Sitcfc\">init(repeating:count:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_Gqd__cSTRd__x3key_q_5valuet7ElementRtd__lufc\">init&lt;S&gt;(_: S) where S : Sequence, S.Element == BinaryTreeDictionary&lt;Key, Value&gt;.Element<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC4fromACyxq_Gs7Decoder_p_tKcSeRzSeR_rlufc\">init(from:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC15minimumCapacityACyxq_GSi_tcfc\">init(minimumCapacity:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC17dictionaryLiteralACyxq_Gx_q_td_tcfc\">init(dictionaryLiteral:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyACyxq_GSDyxq_Gcfc\">init(_: [Key : Value])<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> (BinaryTreeDictionary<Key, Value>) -> BinaryTreeDictionary<Key, Value>",
          "key.typeusr" : "$sy7Rubicon20BinaryTreeDictionaryCyxq_GADcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryCyACyxq_GADcfc"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open subscript(bounds: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>&gt;) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC11SubSequencea\">SubSequence<\/Type> { get }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 75,
              "key.offset" : 3621
            }
          ],
          "key.bodycolumn" : 58,
          "key.bodylength" : 41,
          "key.bodyline" : 75,
          "key.bodyoffset" : 3674,
          "key.column" : 10,
          "key.doc.declaration" : "override subscript(bounds: Range<Self.Index>) -> Self.SubSequence { get }",
          "key.doc.discussion" : [
            {
              "Para" : "The accessed slice uses the same indices for the same elements as the original collection uses. Always use the slice’s `startIndex` property instead of assuming that its indices start at a particular value."
            },
            {
              "Para" : "This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array."
            },
            {
              "CodeListing" : ""
            },
            {
              "Complexity" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>subscript(_:)<\/Name><USR>s:SKy11SubSequenceQzSny5IndexQzGcip<\/USR><Declaration>override subscript(bounds: Range&lt;Self.Index&gt;) -&gt; Self.SubSequence { get }<\/Declaration><CommentParts><Abstract><Para>Accesses a contiguous subrange of the collection’s elements.<\/Para><\/Abstract><Parameters><Parameter><Name>bounds<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A range of the collection’s indices. The bounds of the range must be valid indices of the collection.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>The accessed slice uses the same indices for the same elements as the original collection uses. Always use the slice’s <codeVoice>startIndex<\/codeVoice> property instead of assuming that its indices start at a particular value.<\/Para><Para>This example demonstrates getting a slice of an array of strings, finding the index of one of the strings in the slice, and then using that index in the original array.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let streetsSlice = streets[2 ..< streets.endIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(streetsSlice)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let index = streetsSlice.firstIndex(of: \"Evarts\")    \/\/ 4]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(streets[index!])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Evarts\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>BidirectionalCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "subscript(_:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "A range of the collection’s indices. The bounds of the range must be valid indices of the collection."
                }
              ],
              "name" : "bounds"
            }
          ],
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>bounds<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC11SubSequencea\">SubSequence<\/ref.typealias><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.function.subscript>",
          "key.kind" : "source.lang.swift.decl.function.subscript",
          "key.length" : 90,
          "key.line" : 75,
          "key.name" : "subscript(_:)",
          "key.namecolumn" : 10,
          "key.namelength" : 31,
          "key.nameline" : 75,
          "key.nameoffset" : 3626,
          "key.offset" : 3626,
          "key.overrides" : [
            {
              "key.usr" : "s:SKy11SubSequenceQzSny5IndexQzGcip"
            },
            {
              "key.usr" : "s:Sly11SubSequenceQzSny5IndexQzGcip"
            },
            {
              "key.usr" : "s:Sky11SubSequenceQzSny5IndexQzGcip"
            }
          ],
          "key.parsed_declaration" : "open subscript(bounds: Range<Index>) -> SubSequence",
          "key.parsed_scope.end" : 75,
          "key.parsed_scope.start" : 75,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyq_Sgxcip\">subscript(_:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyx3key_q_5valuetAA9ShadowIntVcip\">subscript(_:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (Range<ShadowInt>) -> Slice<BinaryTreeDictionary<Key, Value>>",
          "key.typeusr" : "$sys5SliceVy7Rubicon20BinaryTreeDictionaryCyxq_GGSnyAC9ShadowIntVGcD",
          "key.usr" : "s:SKy11SubSequenceQzSny5IndexQzGcip"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open func distance(from start: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>, to end: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 77,
              "key.offset" : 3722
            }
          ],
          "key.bodycolumn" : 66,
          "key.bodylength" : 27,
          "key.bodyline" : 77,
          "key.bodyoffset" : 3783,
          "key.column" : 10,
          "key.doc.declaration" : "func distance(from start: Self.Index, to end: Self.Index) -> Int",
          "key.doc.discussion" : [
            {
              "Para" : "Unless the collection conforms to the `BidirectionalCollection` protocol, `start` must be less than or equal to `end`."
            },
            {
              "Complexity" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>distance(from:to:)<\/Name><USR>s:SK8distance4from2toSi5IndexQz_AEtF<\/USR><Declaration>func distance(from start: Self.Index, to end: Self.Index) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Returns the distance between two indices.<\/Para><\/Abstract><Parameters><Parameter><Name>start<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection.<\/Para><\/Discussion><\/Parameter><Parameter><Name>end<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Another valid index of the collection. If <codeVoice>end<\/codeVoice> is equal to <codeVoice>start<\/codeVoice>, the result is zero.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The distance between <codeVoice>start<\/codeVoice> and <codeVoice>end<\/codeVoice>. The result can be negative only if the collection conforms to the <codeVoice>BidirectionalCollection<\/codeVoice> protocol.<\/Para><\/ResultDiscussion><Discussion><Para>Unless the collection conforms to the <codeVoice>BidirectionalCollection<\/codeVoice> protocol, <codeVoice>start<\/codeVoice> must be less than or equal to <codeVoice>end<\/codeVoice>.<\/Para><Complexity><Para>O(1) if the collection conforms to <codeVoice>RandomAccessCollection<\/codeVoice>; otherwise, O(<emphasis>k<\/emphasis>), where <emphasis>k<\/emphasis> is the resulting distance.<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>BidirectionalCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "distance(from:to:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "A valid index of the collection."
                }
              ],
              "name" : "start"
            },
            {
              "discussion" : [
                {
                  "Para" : "Another valid index of the collection. If `end` is equal to `start`, the result is zero."
                }
              ],
              "name" : "end"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The distance between `start` and `end`. The result can be negative only if the collection conforms to the `BidirectionalCollection` protocol."
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>distance<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>start<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>end<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 84,
          "key.line" : 77,
          "key.name" : "distance(from:to:)",
          "key.namecolumn" : 15,
          "key.namelength" : 42,
          "key.nameline" : 77,
          "key.nameoffset" : 3732,
          "key.offset" : 3727,
          "key.overrides" : [
            {
              "key.usr" : "s:SK8distance4from2toSi5IndexQz_AEtF"
            },
            {
              "key.usr" : "s:Sl8distance4from2toSi5IndexQz_AEtF"
            },
            {
              "key.usr" : "s:Sk8distance4from2toSi5IndexQz_AEtF"
            }
          ],
          "key.parsed_declaration" : "open func distance(from start: Index, to end: Index) -> Int",
          "key.parsed_scope.end" : 77,
          "key.parsed_scope.start" : 77,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (ShadowInt, ShadowInt) -> Int",
          "key.typeusr" : "$s4from2toSi7Rubicon9ShadowIntV_AEtcD",
          "key.usr" : "s:SK8distance4from2toSi5IndexQz_AEtF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open subscript(key: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>? { get set }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 79,
              "key.offset" : 3817
            }
          ],
          "key.bodycolumn" : 41,
          "key.bodylength" : 562,
          "key.bodyline" : 79,
          "key.bodyoffset" : 3853,
          "key.column" : 10,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>?<\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
          "key.kind" : "source.lang.swift.decl.function.subscript",
          "key.length" : 594,
          "key.line" : 79,
          "key.name" : "subscript(_:)",
          "key.namecolumn" : 10,
          "key.namelength" : 19,
          "key.nameline" : 79,
          "key.nameoffset" : 3822,
          "key.offset" : 3822,
          "key.parsed_declaration" : "open subscript(key: Key) -> Value?",
          "key.parsed_scope.end" : 98,
          "key.parsed_scope.start" : 79,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCys5SliceVyACyxq_GGSnyAA9ShadowIntVGcip\">subscript(_:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyx3key_q_5valuetAA9ShadowIntVcip\">subscript(_:)<\/RelatedName>"
            }
          ],
          "key.setter_accessibility" : "source.lang.swift.accessibility.open",
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (Key) -> Value?",
          "key.typeusr" : "$syq_SgxcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryCyq_Sgxcip"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>@discardableResult open func remove(at index: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 24,
              "key.length" : 4,
              "key.line" : 100,
              "key.offset" : 4441
            },
            {
              "key.attribute" : "source.decl.attribute.discardableResult",
              "key.column" : 5,
              "key.length" : 18,
              "key.line" : 100,
              "key.offset" : 4422
            }
          ],
          "key.bodycolumn" : 70,
          "key.bodylength" : 125,
          "key.bodyline" : 100,
          "key.bodyoffset" : 4487,
          "key.column" : 29,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@discardableResult<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>remove<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>at<\/decl.var.parameter.argument_label> <decl.var.parameter.name>index<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 167,
          "key.line" : 100,
          "key.name" : "remove(at:)",
          "key.namecolumn" : 34,
          "key.namelength" : 23,
          "key.nameline" : 100,
          "key.nameoffset" : 4451,
          "key.offset" : 4446,
          "key.parsed_declaration" : "@discardableResult open func remove(at index: Index) -> Element",
          "key.parsed_scope.end" : 105,
          "key.parsed_scope.start" : 100,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let n: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>n<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 31,
              "key.line" : 101,
              "key.name" : "n",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 101,
              "key.nameoffset" : 4500,
              "key.offset" : 4496,
              "key.parsed_declaration" : "let n = nodeAt(position: index)",
              "key.parsed_scope.end" : 101,
              "key.parsed_scope.start" : 101,
              "key.typename" : "TreeNode<Key, Value>",
              "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6remove2atx3key_q_5valuetAA9ShadowIntV_tF1nL_AA0C4NodeCyxq_Gvp"
            },
            {
              "key.annotated_decl" : "<Declaration>let e: (<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>)<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>e<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 24,
              "key.line" : 102,
              "key.name" : "e",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 102,
              "key.nameoffset" : 4540,
              "key.offset" : 4536,
              "key.parsed_declaration" : "let e = (n.key, n.value)",
              "key.parsed_scope.end" : 102,
              "key.parsed_scope.start" : 102,
              "key.typename" : "(Key, Value)",
              "key.typeusr" : "$sx_q_tD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6remove2atx3key_q_5valuetAA9ShadowIntV_tF1eL_x_q_tvp"
            }
          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (ShadowInt) -> (key: Key, value: Value)",
          "key.typeusr" : "$s2atx3key_q_5valuet7Rubicon9ShadowIntV_tcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6remove2atx3key_q_5valuetAA9ShadowIntV_tF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>@discardableResult open func removeValue(forKey key: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 24,
              "key.length" : 4,
              "key.line" : 107,
              "key.offset" : 4638
            },
            {
              "key.attribute" : "source.decl.attribute.discardableResult",
              "key.column" : 5,
              "key.length" : 18,
              "key.line" : 107,
              "key.offset" : 4619
            }
          ],
          "key.bodycolumn" : 74,
          "key.bodylength" : 143,
          "key.bodyline" : 107,
          "key.bodyoffset" : 4688,
          "key.column" : 29,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@discardableResult<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>removeValue<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>forKey<\/decl.var.parameter.argument_label> <decl.var.parameter.name>key<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 189,
          "key.line" : 107,
          "key.name" : "removeValue(forKey:)",
          "key.namecolumn" : 34,
          "key.namelength" : 28,
          "key.nameline" : 107,
          "key.nameoffset" : 4648,
          "key.offset" : 4643,
          "key.parsed_declaration" : "@discardableResult open func removeValue(forKey key: Key) -> Value?",
          "key.parsed_scope.end" : 112,
          "key.parsed_scope.start" : 107,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let v: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type><\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>v<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 15,
              "key.line" : 109,
              "key.name" : "v",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 109,
              "key.nameoffset" : 4768,
              "key.offset" : 4764,
              "key.parsed_declaration" : "let v = n.value",
              "key.parsed_scope.end" : 109,
              "key.parsed_scope.start" : 109,
              "key.typename" : "Value",
              "key.typeusr" : "$sq_D",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC11removeValue6forKeyq_Sgx_tF1vL_q_vp"
            }
          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (Key) -> Value?",
          "key.typeusr" : "$s6forKeyq_Sgx_tcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC11removeValue6forKeyq_Sgx_tF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open func removeAll(keepingCapacity keepCapacity: <Type usr=\"s:Sb\">Bool<\/Type> = false)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 114,
              "key.offset" : 4838
            }
          ],
          "key.bodycolumn" : 70,
          "key.bodylength" : 16,
          "key.bodyline" : 114,
          "key.bodyoffset" : 4903,
          "key.column" : 10,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>removeAll<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>keepingCapacity<\/decl.var.parameter.argument_label> <decl.var.parameter.name>keepCapacity<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = false<\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 77,
          "key.line" : 114,
          "key.name" : "removeAll(keepingCapacity:)",
          "key.namecolumn" : 15,
          "key.namelength" : 53,
          "key.nameline" : 114,
          "key.nameoffset" : 4848,
          "key.offset" : 4843,
          "key.parsed_declaration" : "open func removeAll(keepingCapacity keepCapacity: Bool = false)",
          "key.parsed_scope.end" : 114,
          "key.parsed_scope.start" : 114,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (Bool) -> ()",
          "key.typeusr" : "$s15keepingCapacityySb_tcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC9removeAll15keepingCapacityySb_tF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open func index(after i: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 116,
              "key.offset" : 4926
            }
          ],
          "key.bodycolumn" : 47,
          "key.bodylength" : 7,
          "key.bodyline" : 116,
          "key.bodyoffset" : 4968,
          "key.column" : 10,
          "key.doc.declaration" : "override func index(after i: Self.Index) -> Self.Index",
          "key.doc.discussion" : [
            {
              "Para" : "The successor of an index must be well defined. For an index `i` into a collection `c`, calling `c.index(after: i)` returns the same index every time."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>index(after:)<\/Name><USR>s:SK5index5after5IndexQzAD_tF<\/USR><Declaration>override func index(after i: Self.Index) -&gt; Self.Index<\/Declaration><CommentParts><Abstract><Para>Returns the position immediately after the given index.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection. <codeVoice>i<\/codeVoice> must be less than <codeVoice>endIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The index value immediately after <codeVoice>i<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><Para>The successor of an index must be well defined. For an index <codeVoice>i<\/codeVoice> into a collection <codeVoice>c<\/codeVoice>, calling <codeVoice>c.index(after: i)<\/codeVoice> returns the same index every time.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>BidirectionalCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "index(after:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "A valid index of the collection. `i` must be less than `endIndex`."
                }
              ],
              "name" : "i"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The index value immediately after `i`."
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>index<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>after<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 45,
          "key.line" : 116,
          "key.name" : "index(after:)",
          "key.namecolumn" : 15,
          "key.namelength" : 21,
          "key.nameline" : 116,
          "key.nameoffset" : 4936,
          "key.offset" : 4931,
          "key.overrides" : [
            {
              "key.usr" : "s:SK5index5after5IndexQzAD_tF"
            },
            {
              "key.usr" : "s:Sl5index5after5IndexQzAD_tF"
            },
            {
              "key.usr" : "s:Sk5index5after5IndexQzAD_tF"
            }
          ],
          "key.parsed_declaration" : "open func index(after i: Index) -> Index",
          "key.parsed_scope.end" : 116,
          "key.parsed_scope.start" : 116,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index6beforeAA9ShadowIntVAG_tF\">index(before:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index_8offsetByAA9ShadowIntVAG_SitF\">index(_:offsetBy:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index_8offsetBy07limitedG0AA9ShadowIntVSgAH_SiAHtF\">index(_:offsetBy:limitedBy:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (ShadowInt) -> ShadowInt",
          "key.typeusr" : "$s5after7Rubicon9ShadowIntVAD_tcD",
          "key.usr" : "s:SK5index5after5IndexQzAD_tF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open func index(before i: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 118,
              "key.offset" : 4982
            }
          ],
          "key.bodycolumn" : 48,
          "key.bodylength" : 7,
          "key.bodyline" : 118,
          "key.bodyoffset" : 5025,
          "key.column" : 10,
          "key.doc.declaration" : "func index(before i: Self.Index) -> Self.Index",
          "key.doc.discussion" : [
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>index(before:)<\/Name><USR>s:SK5index6before5IndexQzAD_tF<\/USR><Declaration>func index(before i: Self.Index) -&gt; Self.Index<\/Declaration><CommentParts><Abstract><Para>Returns the position immediately before the given index.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection. <codeVoice>i<\/codeVoice> must be greater than <codeVoice>startIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The index value immediately before <codeVoice>i<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>BidirectionalCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "index(before:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "A valid index of the collection. `i` must be greater than `startIndex`."
                }
              ],
              "name" : "i"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "The index value immediately before `i`."
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>index<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>before<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 46,
          "key.line" : 118,
          "key.name" : "index(before:)",
          "key.namecolumn" : 15,
          "key.namelength" : 22,
          "key.nameline" : 118,
          "key.nameoffset" : 4992,
          "key.offset" : 4987,
          "key.overrides" : [
            {
              "key.usr" : "s:SK5index6before5IndexQzAD_tF"
            },
            {
              "key.usr" : "s:Sk5index6before5IndexQzAD_tF"
            }
          ],
          "key.parsed_declaration" : "open func index(before i: Index) -> Index",
          "key.parsed_scope.end" : 118,
          "key.parsed_scope.start" : 118,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index5afterAA9ShadowIntVAG_tF\">index(after:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index_8offsetByAA9ShadowIntVAG_SitF\">index(_:offsetBy:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index_8offsetBy07limitedG0AA9ShadowIntVSgAH_SiAHtF\">index(_:offsetBy:limitedBy:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (ShadowInt) -> ShadowInt",
          "key.typeusr" : "$s6before7Rubicon9ShadowIntVAD_tcD",
          "key.usr" : "s:SK5index6before5IndexQzAD_tF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open func index(_ i: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>, offsetBy distance: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 120,
              "key.offset" : 5039
            }
          ],
          "key.bodycolumn" : 67,
          "key.bodylength" : 16,
          "key.bodyline" : 120,
          "key.bodyoffset" : 5101,
          "key.column" : 10,
          "key.doc.declaration" : "func index(_ i: Self.Index, offsetBy distance: Int) -> Self.Index",
          "key.doc.discussion" : [
            {
              "Para" : "The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The value passed as `distance` must not offset `i` beyond the bounds of the collection."
            },
            {
              "Complexity" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>index(_:offsetBy:)<\/Name><USR>s:SK5index_8offsetBy5IndexQzAD_SitF<\/USR><Declaration>func index(_ i: Self.Index, offsetBy distance: Int) -&gt; Self.Index<\/Declaration><CommentParts><Abstract><Para>Returns an index that is the specified distance from the given index.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection.<\/Para><\/Discussion><\/Parameter><Parameter><Name>distance<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The distance to offset <codeVoice>i<\/codeVoice>. <codeVoice>distance<\/codeVoice> must not be negative unless the collection conforms to the <codeVoice>BidirectionalCollection<\/codeVoice> protocol.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>An index offset by <codeVoice>distance<\/codeVoice> from the index <codeVoice>i<\/codeVoice>. If <codeVoice>distance<\/codeVoice> is positive, this is the same value as the result of <codeVoice>distance<\/codeVoice> calls to <codeVoice>index(after:)<\/codeVoice>. If <codeVoice>distance<\/codeVoice> is negative, this is the same value as the result of <codeVoice>abs(distance)<\/codeVoice> calls to <codeVoice>index(before:)<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><Para>The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let s = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let i = s.index(s.startIndex, offsetBy: 4)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(s[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The value passed as <codeVoice>distance<\/codeVoice> must not offset <codeVoice>i<\/codeVoice> beyond the bounds of the collection.<\/Para><Complexity><Para>O(1) if the collection conforms to <codeVoice>RandomAccessCollection<\/codeVoice>; otherwise, O(<emphasis>k<\/emphasis>), where <emphasis>k<\/emphasis> is the absolute value of <codeVoice>distance<\/codeVoice>.<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>BidirectionalCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "index(_:offsetBy:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "A valid index of the collection."
                }
              ],
              "name" : "i"
            },
            {
              "discussion" : [
                {
                  "Para" : "The distance to offset `i`. `distance` must not be negative unless the collection conforms to the `BidirectionalCollection` protocol."
                }
              ],
              "name" : "distance"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "An index offset by `distance` from the index `i`. If `distance` is positive, this is the same value as the result of `distance` calls to `index(after:)`. If `distance` is negative, this is the same value as the result of `abs(distance)` calls to `index(before:)`."
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>index<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offsetBy<\/decl.var.parameter.argument_label> <decl.var.parameter.name>distance<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 74,
          "key.line" : 120,
          "key.name" : "index(_:offsetBy:)",
          "key.namecolumn" : 15,
          "key.namelength" : 41,
          "key.nameline" : 120,
          "key.nameoffset" : 5049,
          "key.offset" : 5044,
          "key.overrides" : [
            {
              "key.usr" : "s:SK5index_8offsetBy5IndexQzAD_SitF"
            },
            {
              "key.usr" : "s:Sl5index_8offsetBy5IndexQzAD_SitF"
            },
            {
              "key.usr" : "s:Sk5index_8offsetBy5IndexQzAD_SitF"
            }
          ],
          "key.parsed_declaration" : "open func index(_ i: Index, offsetBy distance: Int) -> Index",
          "key.parsed_scope.end" : 120,
          "key.parsed_scope.start" : 120,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index5afterAA9ShadowIntVAG_tF\">index(after:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index6beforeAA9ShadowIntVAG_tF\">index(before:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index_8offsetBy07limitedG0AA9ShadowIntVSgAH_SiAHtF\">index(_:offsetBy:limitedBy:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (ShadowInt, Int) -> ShadowInt",
          "key.typeusr" : "$s_8offsetBy7Rubicon9ShadowIntVAD_SitcD",
          "key.usr" : "s:SK5index_8offsetBy5IndexQzAD_SitF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open func index(_ i: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>, offsetBy distance: <Type usr=\"s:Si\">Int<\/Type>, limitedBy limit: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 122,
              "key.offset" : 5124
            }
          ],
          "key.bodycolumn" : 92,
          "key.bodylength" : 112,
          "key.bodyline" : 122,
          "key.bodyoffset" : 5211,
          "key.column" : 10,
          "key.doc.declaration" : "func index(_ i: Self.Index, offsetBy distance: Int, limitedBy limit: Self.Index) -> Self.Index?",
          "key.doc.discussion" : [
            {
              "Para" : "The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting `s.endIndex` value, so it succeeds."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The next example attempts to retrieve an index six positions from `s.startIndex` but fails, because that distance is beyond the index passed as `limit`."
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "The value passed as `distance` must not offset `i` beyond the bounds of the collection, unless the index passed as `limit` prevents offsetting beyond those bounds."
            },
            {
              "Complexity" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>index(_:offsetBy:limitedBy:)<\/Name><USR>s:SK5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF<\/USR><Declaration>func index(_ i: Self.Index, offsetBy distance: Int, limitedBy limit: Self.Index) -&gt; Self.Index?<\/Declaration><CommentParts><Abstract><Para>Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection.<\/Para><\/Discussion><\/Parameter><Parameter><Name>distance<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The distance to offset <codeVoice>i<\/codeVoice>. <codeVoice>distance<\/codeVoice> must not be negative unless the collection conforms to the <codeVoice>BidirectionalCollection<\/codeVoice> protocol.<\/Para><\/Discussion><\/Parameter><Parameter><Name>limit<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection to use as a limit. If <codeVoice>distance &gt; 0<\/codeVoice>, a limit that is less than <codeVoice>i<\/codeVoice> has no effect. Likewise, if <codeVoice>distance &lt; 0<\/codeVoice>, a limit that is greater than <codeVoice>i<\/codeVoice> has no effect.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>An index offset by <codeVoice>distance<\/codeVoice> from the index <codeVoice>i<\/codeVoice>, unless that index would be beyond <codeVoice>limit<\/codeVoice> in the direction of movement. In that case, the method returns <codeVoice>nil<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><Para>The following example obtains an index advanced four positions from a string’s starting index and then prints the character at that position. The operation doesn’t require going beyond the limiting <codeVoice>s.endIndex<\/codeVoice> value, so it succeeds.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let s = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(s[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The next example attempts to retrieve an index six positions from <codeVoice>s.startIndex<\/codeVoice> but fails, because that distance is beyond the index passed as <codeVoice>limit<\/codeVoice>.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(j)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"nil\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The value passed as <codeVoice>distance<\/codeVoice> must not offset <codeVoice>i<\/codeVoice> beyond the bounds of the collection, unless the index passed as <codeVoice>limit<\/codeVoice> prevents offsetting beyond those bounds.<\/Para><Complexity><Para>O(1) if the collection conforms to <codeVoice>RandomAccessCollection<\/codeVoice>; otherwise, O(<emphasis>k<\/emphasis>), where <emphasis>k<\/emphasis> is the absolute value of <codeVoice>distance<\/codeVoice>.<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>BidirectionalCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "index(_:offsetBy:limitedBy:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "A valid index of the collection."
                }
              ],
              "name" : "i"
            },
            {
              "discussion" : [
                {
                  "Para" : "The distance to offset `i`. `distance` must not be negative unless the collection conforms to the `BidirectionalCollection` protocol."
                }
              ],
              "name" : "distance"
            },
            {
              "discussion" : [
                {
                  "Para" : "A valid index of the collection to use as a limit. If `distance > 0`, a limit that is less than `i` has no effect. Likewise, if `distance < 0`, a limit that is greater than `i` has no effect."
                }
              ],
              "name" : "limit"
            }
          ],
          "key.doc.result_discussion" : [
            {
              "Para" : "An index offset by `distance` from the index `i`, unless that index would be beyond `limit` in the direction of movement. In that case, the method returns `nil`."
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>index<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>offsetBy<\/decl.var.parameter.argument_label> <decl.var.parameter.name>distance<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>limitedBy<\/decl.var.parameter.argument_label> <decl.var.parameter.name>limit<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 195,
          "key.line" : 122,
          "key.name" : "index(_:offsetBy:limitedBy:)",
          "key.namecolumn" : 15,
          "key.namelength" : 65,
          "key.nameline" : 122,
          "key.nameoffset" : 5134,
          "key.offset" : 5129,
          "key.overrides" : [
            {
              "key.usr" : "s:SK5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"
            },
            {
              "key.usr" : "s:Sl5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"
            },
            {
              "key.usr" : "s:Sk5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"
            }
          ],
          "key.parsed_declaration" : "open func index(_ i: Index, offsetBy distance: Int, limitedBy limit: Index) -> Index?",
          "key.parsed_scope.end" : 126,
          "key.parsed_scope.start" : 122,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index5afterAA9ShadowIntVAG_tF\">index(after:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index6beforeAA9ShadowIntVAG_tF\">index(before:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC5index_8offsetByAA9ShadowIntVAG_SitF\">index(_:offsetBy:)<\/RelatedName>"
            }
          ],
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let _i: (<Type usr=\"s:7Rubicon9ShadowIntV\">ShadowInt<\/Type>)<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>_i<\/decl.name>: <decl.var.type>(<ref.struct usr=\"s:7Rubicon9ShadowIntV\">ShadowInt<\/ref.struct>)<\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 23,
              "key.line" : 123,
              "key.name" : "_i",
              "key.namecolumn" : 13,
              "key.namelength" : 2,
              "key.nameline" : 123,
              "key.nameoffset" : 5224,
              "key.offset" : 5220,
              "key.parsed_declaration" : "let _i = (i + distance)",
              "key.parsed_scope.end" : 123,
              "key.parsed_scope.start" : 123,
              "key.typename" : "(ShadowInt)",
              "key.typeusr" : "$s7Rubicon9ShadowIntVD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC5index_8offsetBy07limitedG0AA9ShadowIntVSgAH_SiAHtF2_iL_AHvp"
            }
          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (ShadowInt, Int, ShadowInt) -> ShadowInt?",
          "key.typeusr" : "$s_8offsetBy07limitedB07Rubicon9ShadowIntVSgAE_SiAEtcD",
          "key.usr" : "s:SK5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open subscript(position: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; (key: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, value: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>) { get set }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 128,
              "key.offset" : 5330
            }
          ],
          "key.bodycolumn" : 66,
          "key.bodylength" : 427,
          "key.bodyline" : 128,
          "key.bodyoffset" : 5391,
          "key.column" : 10,
          "key.doc.declaration" : "subscript(position: Self.Index) -> Self.Element { get }",
          "key.doc.discussion" : [
            {
              "Para" : "The following example accesses an element of an array through its subscript to print its value:"
            },
            {
              "CodeListing" : ""
            },
            {
              "Para" : "You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element."
            },
            {
              "Complexity" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>subscript(_:)<\/Name><USR>s:Sly7ElementQz5IndexQzcip<\/USR><Declaration>subscript(position: Self.Index) -&gt; Self.Element { get }<\/Declaration><CommentParts><Abstract><Para>Accesses the element at the specified position.<\/Para><\/Abstract><Parameters><Parameter><Name>position<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The position of the element to access. <codeVoice>position<\/codeVoice> must be a valid index of the collection that is not equal to the <codeVoice>endIndex<\/codeVoice> property.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>The following example accesses an element of an array through its subscript to print its value:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(streets[1])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Bryant\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.<\/Para><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "subscript(_:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The position of the element to access. `position` must be a valid index of the collection that is not equal to the `endIndex` property."
                }
              ],
              "name" : "position"
            }
          ],
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>position<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.argument_label>key<\/tuple.element.argument_label>: <tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.argument_label>value<\/tuple.element.argument_label>: <tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
          "key.kind" : "source.lang.swift.decl.function.subscript",
          "key.length" : 484,
          "key.line" : 128,
          "key.name" : "subscript(_:)",
          "key.namecolumn" : 10,
          "key.namelength" : 26,
          "key.nameline" : 128,
          "key.nameoffset" : 5335,
          "key.offset" : 5335,
          "key.overrides" : [
            {
              "key.usr" : "s:SKy7ElementQz5IndexQzcip"
            },
            {
              "key.usr" : "s:Sly7ElementQz5IndexQzcip"
            },
            {
              "key.usr" : "s:Sky7ElementQz5IndexQzcip"
            }
          ],
          "key.parsed_declaration" : "open subscript(position: Index) -> (key: Key, value: Value)",
          "key.parsed_scope.end" : 143,
          "key.parsed_scope.start" : 128,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCys5SliceVyACyxq_GGSnyAA9ShadowIntVGcip\">subscript(_:)<\/RelatedName>"
            },
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryCyq_Sgxcip\">subscript(_:)<\/RelatedName>"
            }
          ],
          "key.setter_accessibility" : "source.lang.swift.accessibility.open",
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (ShadowInt) -> (key: Key, value: Value)",
          "key.typeusr" : "$syx3key_q_5valuet7Rubicon9ShadowIntVcD",
          "key.usr" : "s:Sly7ElementQz5IndexQzcip"
        },
        {
          "key.annotated_decl" : "<Declaration>let node: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
          "key.column" : 13,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>node<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
          "key.kind" : "source.lang.swift.decl.var.local",
          "key.length" : 37,
          "key.line" : 130,
          "key.name" : "node",
          "key.namecolumn" : 17,
          "key.namelength" : 4,
          "key.nameline" : 130,
          "key.nameoffset" : 5422,
          "key.offset" : 5418,
          "key.parsed_declaration" : "let node = nodeAt(position: position)",
          "key.parsed_scope.end" : 130,
          "key.parsed_scope.start" : 130,
          "key.typename" : "TreeNode<Key, Value>",
          "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryCyx3key_q_5valuetAA9ShadowIntVcig4nodeL_AA0C4NodeCyxq_Gvp"
        },
        {
          "key.annotated_decl" : "<Declaration>let node: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
          "key.column" : 13,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>node<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
          "key.kind" : "source.lang.swift.decl.var.local",
          "key.length" : 37,
          "key.line" : 134,
          "key.name" : "node",
          "key.namecolumn" : 17,
          "key.namelength" : 4,
          "key.nameline" : 134,
          "key.nameoffset" : 5548,
          "key.offset" : 5544,
          "key.parsed_declaration" : "let node = nodeAt(position: position)",
          "key.parsed_scope.end" : 134,
          "key.parsed_scope.start" : 134,
          "key.typename" : "TreeNode<Key, Value>",
          "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryCyx3key_q_5valuetAA9ShadowIntVcis4nodeL_AA0C4NodeCyxq_Gvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.open",
          "key.annotated_decl" : "<Declaration>open func forEach(_ body: (<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/Type>) throws -&gt; <Type usr=\"s:s4Voida\">Void<\/Type>) rethrows<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.rethrows",
              "key.column" : 57,
              "key.length" : 8,
              "key.line" : 145,
              "key.offset" : 5877
            },
            {
              "key.attribute" : "source.decl.attribute.open",
              "key.column" : 5,
              "key.length" : 4,
              "key.line" : 145,
              "key.offset" : 5825
            }
          ],
          "key.bodycolumn" : 67,
          "key.bodylength" : 84,
          "key.bodyline" : 145,
          "key.bodyoffset" : 5887,
          "key.column" : 10,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>forEach<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.typealias usr=\"s:s4Voida\">Void<\/ref.typealias><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 142,
          "key.line" : 145,
          "key.name" : "forEach(_:)",
          "key.namecolumn" : 15,
          "key.namelength" : 41,
          "key.nameline" : 145,
          "key.nameoffset" : 5835,
          "key.offset" : 5830,
          "key.parsed_declaration" : "open func forEach(_ body: (Element) throws -> Void) rethrows",
          "key.parsed_scope.end" : 145,
          "key.parsed_scope.start" : 145,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (((key: Key, value: Value)) throws -> ()) throws -> ()",
          "key.typeusr" : "$syyyx3key_q_5valuet_tKXEKcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC7forEachyyyx3key_q_5valuet_tKXEKF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.internal",
          "key.annotated_decl" : "<Declaration>@usableFromInline func nodeAt(position: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.usableFromInline",
              "key.column" : 5,
              "key.length" : 17,
              "key.line" : 147,
              "key.offset" : 5978
            }
          ],
          "key.bodycolumn" : 77,
          "key.bodylength" : 380,
          "key.bodyline" : 147,
          "key.bodyoffset" : 6050,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>nodeAt<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>position<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 435,
          "key.line" : 147,
          "key.name" : "nodeAt(position:)",
          "key.namecolumn" : 28,
          "key.namelength" : 23,
          "key.nameline" : 147,
          "key.nameoffset" : 6001,
          "key.offset" : 5996,
          "key.parsed_declaration" : "@usableFromInline func nodeAt(position: Index) -> TreeNode<Key, Value>",
          "key.parsed_scope.end" : 154,
          "key.parsed_scope.start" : 147,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (ShadowInt) -> TreeNode<Key, Value>",
          "key.typeusr" : "$s8position7Rubicon8TreeNodeCyxq_GAB9ShadowIntV_tcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6nodeAt8positionAA0C4NodeCyxq_GAA9ShadowIntV_tF"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    },
    {
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.bodycolumn" : 33,
      "key.bodylength" : 545,
      "key.bodyline" : 157,
      "key.bodyoffset" : 6467,
      "key.column" : 1,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 578,
      "key.line" : 157,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 11,
      "key.namelength" : 20,
      "key.nameline" : 157,
      "key.nameoffset" : 6445,
      "key.offset" : 6435,
      "key.parsed_declaration" : "extension BinaryTreeDictionary",
      "key.parsed_scope.end" : 165,
      "key.parsed_scope.start" : 157,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public static func &lt;+ (lhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;, rhs: (key: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, value: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>))<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 158,
              "key.offset" : 6483
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 158,
              "key.offset" : 6472
            }
          ],
          "key.bodycolumn" : 110,
          "key.bodylength" : 26,
          "key.bodyline" : 158,
          "key.bodyoffset" : 6577,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;+ <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.argument_label>key<\/tuple.element.argument_label>: <tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.argument_label>value<\/tuple.element.argument_label>: <tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
          "key.kind" : "source.lang.swift.decl.function.method.static",
          "key.length" : 114,
          "key.line" : 158,
          "key.name" : "<+(_:_:)",
          "key.namecolumn" : 35,
          "key.namelength" : 73,
          "key.nameline" : 158,
          "key.nameoffset" : 6502,
          "key.offset" : 6490,
          "key.parsed_declaration" : "@inlinable public static func <+ (lhs: BinaryTreeDictionary<Key, Value>, rhs: (key: Key, value: Value))",
          "key.parsed_scope.end" : 158,
          "key.parsed_scope.start" : 158,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC2lpoiyyACyxq_G_SDyxq_GtFZ\">&lt;+ (_: BinaryTreeDictionary&lt;Key, Value&gt;, _: [Key : Value])<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> (BinaryTreeDictionary<Key, Value>, (key: Key, value: Value)) -> ()",
          "key.typeusr" : "$syy7Rubicon20BinaryTreeDictionaryCyxq_G_x3key_q_5valuettcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC2lpoiyyACyxq_G_x3key_q_5valuettFZ"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public static func &lt;+ (lhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;, rhs: [<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>])<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 160,
              "key.offset" : 6621
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 160,
              "key.offset" : 6610
            }
          ],
          "key.bodycolumn" : 98,
          "key.bodylength" : 48,
          "key.bodyline" : 160,
          "key.bodyoffset" : 6703,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt;+ <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
          "key.kind" : "source.lang.swift.decl.function.method.static",
          "key.length" : 124,
          "key.line" : 160,
          "key.name" : "<+(_:_:)",
          "key.namecolumn" : 35,
          "key.namelength" : 61,
          "key.nameline" : 160,
          "key.nameoffset" : 6640,
          "key.offset" : 6628,
          "key.parsed_declaration" : "@inlinable public static func <+ (lhs: BinaryTreeDictionary<Key, Value>, rhs: [Key: Value])",
          "key.parsed_scope.end" : 160,
          "key.parsed_scope.start" : 160,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC2lpoiyyACyxq_G_x3key_q_5valuettFZ\">&lt;+ (_: BinaryTreeDictionary&lt;Key, Value&gt;, _: (key: Key, value: Value))<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> (BinaryTreeDictionary<Key, Value>, [Key : Value]) -> ()",
          "key.typeusr" : "$syy7Rubicon20BinaryTreeDictionaryCyxq_G_SDyxq_GtcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC2lpoiyyACyxq_G_SDyxq_GtFZ"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public static func &gt;- (lhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;, rhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 162,
              "key.offset" : 6769
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 162,
              "key.offset" : 6758
            }
          ],
          "key.bodycolumn" : 89,
          "key.bodylength" : 30,
          "key.bodyline" : 162,
          "key.bodyoffset" : 6842,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&gt;- <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
          "key.kind" : "source.lang.swift.decl.function.method.static",
          "key.length" : 97,
          "key.line" : 162,
          "key.name" : ">-(_:_:)",
          "key.namecolumn" : 35,
          "key.namelength" : 52,
          "key.nameline" : 162,
          "key.nameoffset" : 6788,
          "key.offset" : 6776,
          "key.parsed_declaration" : "@inlinable public static func >- (lhs: BinaryTreeDictionary<Key, Value>, rhs: Key)",
          "key.parsed_scope.end" : 162,
          "key.parsed_scope.start" : 162,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC2gsoiyyACyxq_G_SayxGtFZ\">&gt;- (_: BinaryTreeDictionary&lt;Key, Value&gt;, _: [Key])<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> (BinaryTreeDictionary<Key, Value>, Key) -> ()",
          "key.typeusr" : "$syy7Rubicon20BinaryTreeDictionaryCyxq_G_xtcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC2gsoiyyACyxq_G_xtFZ"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public static func &gt;- (lhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;, rhs: [<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>])<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 164,
              "key.offset" : 6890
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 164,
              "key.offset" : 6879
            }
          ],
          "key.bodycolumn" : 91,
          "key.bodylength" : 45,
          "key.bodyline" : 164,
          "key.bodyoffset" : 6965,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&gt;- <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
          "key.kind" : "source.lang.swift.decl.function.method.static",
          "key.length" : 114,
          "key.line" : 164,
          "key.name" : ">-(_:_:)",
          "key.namecolumn" : 35,
          "key.namelength" : 54,
          "key.nameline" : 164,
          "key.nameoffset" : 6909,
          "key.offset" : 6897,
          "key.parsed_declaration" : "@inlinable public static func >- (lhs: BinaryTreeDictionary<Key, Value>, rhs: [Key])",
          "key.parsed_scope.end" : 164,
          "key.parsed_scope.start" : 164,
          "key.related_decls" : [
            {
              "key.annotated_decl" : "<RelatedName usr=\"s:7Rubicon20BinaryTreeDictionaryC2gsoiyyACyxq_G_xtFZ\">&gt;- (_: BinaryTreeDictionary&lt;Key, Value&gt;, _: Key)<\/RelatedName>"
            }
          ],
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Type) -> (BinaryTreeDictionary<Key, Value>, [Key]) -> ()",
          "key.typeusr" : "$syy7Rubicon20BinaryTreeDictionaryCyxq_G_SayxGtcD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC2gsoiyyACyxq_G_SayxGtFZ"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    },
    {
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.bodycolumn" : 67,
      "key.bodylength" : 361,
      "key.bodyline" : 167,
      "key.bodyoffset" : 7081,
      "key.column" : 1,
      "key.elements" : [
        {
          "key.column" : 33,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 9,
          "key.line" : 167,
          "key.offset" : 7047
        }
      ],
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.inheritedtypes" : [
        {
          "key.name" : "Equatable"
        }
      ],
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 428,
      "key.line" : 167,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 11,
      "key.namelength" : 20,
      "key.nameline" : 167,
      "key.nameoffset" : 7025,
      "key.offset" : 7015,
      "key.parsed_declaration" : "extension BinaryTreeDictionary: Equatable where Value: Equatable",
      "key.parsed_scope.end" : 175,
      "key.parsed_scope.start" : 167,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public static func == (lhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryCAASQR_rlE3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryCAASQR_rlE5Valueq_mfp\">Value<\/Type>&gt;, rhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryCAASQR_rlE3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryCAASQR_rlE5Valueq_mfp\">Value<\/Type>&gt;) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 169,
              "key.offset" : 7098
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 169,
              "key.offset" : 7087
            }
          ],
          "key.bodycolumn" : 126,
          "key.bodylength" : 232,
          "key.bodyline" : 169,
          "key.bodyoffset" : 7208,
          "key.column" : 23,
          "key.doc.declaration" : "static func == (lhs: Self, rhs: Self) -> Bool",
          "key.doc.discussion" : [
            {
              "Para" : "Equality is the inverse of inequality. For any values `a` and `b`, `a == b` implies that `a != b` is `false`."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>==(_:_:)<\/Name><USR>s:SQ2eeoiySbx_xtFZ<\/USR><Declaration>static func == (lhs: Self, rhs: Self) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Returns a Boolean value indicating whether two values are equal.<\/Para><\/Abstract><Parameters><Parameter><Name>lhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A value to compare.<\/Para><\/Discussion><\/Parameter><Parameter><Name>rhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Another value to compare.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Equality is the inverse of inequality. For any values <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice>, <codeVoice>a == b<\/codeVoice> implies that <codeVoice>a != b<\/codeVoice> is <codeVoice>false<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Equatable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "==(_:_:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "A value to compare."
                }
              ],
              "name" : "lhs"
            },
            {
              "discussion" : [
                {
                  "Para" : "Another value to compare."
                }
              ],
              "name" : "rhs"
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryCAASQR_rlE3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryCAASQR_rlE5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryCAASQR_rlE3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryCAASQR_rlE5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
          "key.kind" : "source.lang.swift.decl.function.method.static",
          "key.length" : 336,
          "key.line" : 169,
          "key.name" : "==(_:_:)",
          "key.namecolumn" : 35,
          "key.namelength" : 81,
          "key.nameline" : 169,
          "key.nameoffset" : 7117,
          "key.offset" : 7105,
          "key.overrides" : [
            {
              "key.usr" : "s:SQ2eeoiySbx_xtFZ"
            }
          ],
          "key.parsed_declaration" : "@inlinable public static func == (lhs: BinaryTreeDictionary<Key, Value>, rhs: BinaryTreeDictionary<Key, Value>) -> Bool",
          "key.parsed_scope.end" : 174,
          "key.parsed_scope.start" : 169,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable, Value : Equatable> (BinaryTreeDictionary<Key, Value>.Type) -> (BinaryTreeDictionary<Key, Value>, BinaryTreeDictionary<Key, Value>) -> Bool",
          "key.typeusr" : "$sySb7Rubicon20BinaryTreeDictionaryCyxq_G_ADtcD",
          "key.usr" : "s:SQ2eeoiySbx_xtFZ"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    },
    {
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.bodycolumn" : 65,
      "key.bodylength" : 351,
      "key.bodyline" : 177,
      "key.bodyoffset" : 7509,
      "key.column" : 1,
      "key.elements" : [
        {
          "key.column" : 33,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 8,
          "key.line" : 177,
          "key.offset" : 7477
        }
      ],
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.inheritedtypes" : [
        {
          "key.name" : "Hashable"
        }
      ],
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 416,
      "key.line" : 177,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 11,
      "key.namelength" : 20,
      "key.nameline" : 177,
      "key.nameoffset" : 7455,
      "key.offset" : 7445,
      "key.parsed_declaration" : "extension BinaryTreeDictionary: Hashable where Value: Hashable",
      "key.parsed_scope.end" : 188,
      "key.parsed_scope.start" : 177,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public func hash(into hasher: inout <Type usr=\"s:s6HasherV\">Hasher<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 179,
              "key.offset" : 7526
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 179,
              "key.offset" : 7515
            }
          ],
          "key.bodycolumn" : 61,
          "key.bodylength" : 62,
          "key.bodyline" : 179,
          "key.bodyoffset" : 7571,
          "key.column" : 23,
          "key.doc.declaration" : "func hash(into hasher: inout Hasher)",
          "key.doc.discussion" : [
            {
              "Para" : "Implement this method to conform to the `Hashable` protocol. The components used for hashing must be the same as the components compared in your type’s `==` operator implementation. Call `hasher.combine(_:)` with each of these components."
            },
            {
              "Important" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>hash(into:)<\/Name><USR>s:SH4hash4intoys6HasherVz_tF<\/USR><Declaration>func hash(into hasher: inout Hasher)<\/Declaration><CommentParts><Abstract><Para>Hashes the essential components of this value by feeding them into the given hasher.<\/Para><\/Abstract><Parameters><Parameter><Name>hasher<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The hasher to use when combining the components of this instance.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Implement this method to conform to the <codeVoice>Hashable<\/codeVoice> protocol. The components used for hashing must be the same as the components compared in your type’s <codeVoice>==<\/codeVoice> operator implementation. Call <codeVoice>hasher.combine(_:)<\/codeVoice> with each of these components.<\/Para><Important><Para>Never call <codeVoice>finalize()<\/codeVoice> on <codeVoice>hasher<\/codeVoice>. Doing so may become a compile-time error in the future.<\/Para><\/Important><Note><Para>This documentation comment was inherited from <codeVoice>Hashable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "hash(into:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The hasher to use when combining the components of this instance."
                }
              ],
              "name" : "hasher"
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>hash<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>into<\/decl.var.parameter.argument_label> <decl.var.parameter.name>hasher<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:s6HasherV\">Hasher<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 101,
          "key.line" : 179,
          "key.name" : "hash(into:)",
          "key.namecolumn" : 28,
          "key.namelength" : 31,
          "key.nameline" : 179,
          "key.nameoffset" : 7538,
          "key.offset" : 7533,
          "key.overrides" : [
            {
              "key.usr" : "s:SH4hash4intoys6HasherVz_tF"
            }
          ],
          "key.parsed_declaration" : "@inlinable public func hash(into hasher: inout Hasher)",
          "key.parsed_scope.end" : 179,
          "key.parsed_scope.start" : 179,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable, Value : Hashable> (BinaryTreeDictionary<Key, Value>) -> (inout Hasher) -> ()",
          "key.typeusr" : "$s4intoys6HasherVz_tcD",
          "key.usr" : "s:SH4hash4intoys6HasherVz_tF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public var hashValue: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 181,
              "key.offset" : 7651
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 181,
              "key.offset" : 7640
            }
          ],
          "key.bodycolumn" : 43,
          "key.bodylength" : 180,
          "key.bodyline" : 181,
          "key.bodyoffset" : 7678,
          "key.column" : 23,
          "key.doc.declaration" : "var hashValue: Int { get }",
          "key.doc.discussion" : [
            {
              "Para" : "Hash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution."
            },
            {
              "Important" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>hashValue<\/Name><USR>s:SH9hashValueSivp<\/USR><Declaration>var hashValue: Int { get }<\/Declaration><CommentParts><Abstract><Para>The hash value.<\/Para><\/Abstract><Discussion><Para>Hash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.<\/Para><Important><Para><codeVoice>hashValue<\/codeVoice> is deprecated as a <codeVoice>Hashable<\/codeVoice> requirement. To conform to <codeVoice>Hashable<\/codeVoice>, implement the <codeVoice>hash(into:)<\/codeVoice> requirement instead.<\/Para><\/Important><Note><Para>This documentation comment was inherited from <codeVoice>Hashable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "hashValue",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>hashValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 201,
          "key.line" : 181,
          "key.name" : "hashValue",
          "key.namecolumn" : 27,
          "key.namelength" : 9,
          "key.nameline" : 181,
          "key.nameoffset" : 7662,
          "key.offset" : 7658,
          "key.overrides" : [
            {
              "key.usr" : "s:SH9hashValueSivp"
            }
          ],
          "key.parsed_declaration" : "@inlinable public var hashValue: Int",
          "key.parsed_scope.end" : 187,
          "key.parsed_scope.start" : 181,
          "key.typename" : "Int",
          "key.typeusr" : "$sSiD",
          "key.usr" : "s:SH9hashValueSivp"
        },
        {
          "key.annotated_decl" : "<Declaration>var hasher: <Type usr=\"s:s6HasherV\">Hasher<\/Type><\/Declaration>",
          "key.column" : 9,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>hasher<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s6HasherV\">Hasher<\/ref.struct><\/decl.var.type><\/decl.var.local>",
          "key.kind" : "source.lang.swift.decl.var.local",
          "key.length" : 29,
          "key.line" : 183,
          "key.name" : "hasher",
          "key.namecolumn" : 13,
          "key.namelength" : 6,
          "key.nameline" : 183,
          "key.nameoffset" : 7734,
          "key.offset" : 7730,
          "key.parsed_declaration" : "var hasher: Hasher = Hasher()",
          "key.parsed_scope.end" : 183,
          "key.parsed_scope.start" : 183,
          "key.typename" : "Hasher",
          "key.typeusr" : "$ss6HasherVD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryCAASHR_rlE9hashValueSivg6hasherL_s6HasherVvp"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    },
    {
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.bodycolumn" : 43,
      "key.bodylength" : 963,
      "key.bodyline" : 190,
      "key.bodyoffset" : 7905,
      "key.column" : 1,
      "key.elements" : [
        {
          "key.column" : 33,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 8,
          "key.line" : 190,
          "key.offset" : 7895
        }
      ],
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.inheritedtypes" : [
        {
          "key.name" : "Sequence"
        }
      ],
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 1006,
      "key.line" : 190,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 11,
      "key.namelength" : 20,
      "key.nameline" : 190,
      "key.nameoffset" : 7873,
      "key.offset" : 7863,
      "key.parsed_declaration" : "extension BinaryTreeDictionary: Sequence",
      "key.parsed_scope.end" : 220,
      "key.parsed_scope.start" : 190,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public func makeIterator() -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC8IteratorV\">Iterator<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 191,
              "key.offset" : 7921
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 191,
              "key.offset" : 7910
            }
          ],
          "key.bodycolumn" : 56,
          "key.bodylength" : 38,
          "key.bodyline" : 191,
          "key.bodyoffset" : 7961,
          "key.column" : 23,
          "key.doc.declaration" : "override func makeIterator() -> Self.Iterator",
          "key.doc.discussion" : [
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>makeIterator()<\/Name><USR>s:Sl12makeIterator0B0QzyF<\/USR><Declaration>override func makeIterator() -&gt; Self.Iterator<\/Declaration><CommentParts><Abstract><Para>Returns an iterator over the elements of the collection.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "makeIterator()",
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>makeIterator<\/decl.name>() -&gt; <decl.function.returntype><ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC8IteratorV\">Iterator<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 72,
          "key.line" : 191,
          "key.name" : "makeIterator()",
          "key.namecolumn" : 28,
          "key.namelength" : 14,
          "key.nameline" : 191,
          "key.nameoffset" : 7933,
          "key.offset" : 7928,
          "key.overrides" : [
            {
              "key.usr" : "s:Sl12makeIterator0B0QzyF"
            },
            {
              "key.usr" : "s:ST12makeIterator0B0QzyF"
            }
          ],
          "key.parsed_declaration" : "@inlinable public func makeIterator() -> Iterator",
          "key.parsed_scope.end" : 193,
          "key.parsed_scope.start" : 191,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> () -> BinaryTreeDictionary<Key, Value>.Iterator",
          "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryC8IteratorVyxq__GycD",
          "key.usr" : "s:Sl12makeIterator0B0QzyF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public var underestimatedCount: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 195,
              "key.offset" : 8006
            }
          ],
          "key.bodycolumn" : 42,
          "key.bodylength" : 7,
          "key.bodyline" : 195,
          "key.bodyoffset" : 8043,
          "key.column" : 12,
          "key.doc.declaration" : "var underestimatedCount: Int { get }",
          "key.doc.discussion" : [
            {
              "Para" : "The default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively."
            },
            {
              "Complexity" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>underestimatedCount<\/Name><USR>s:ST19underestimatedCountSivp<\/USR><Declaration>var underestimatedCount: Int { get }<\/Declaration><CommentParts><Abstract><Para>A value less than or equal to the number of elements in the sequence, calculated nondestructively.<\/Para><\/Abstract><Discussion><Para>The default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.<\/Para><Complexity><Para>O(1), except if the sequence also conforms to <codeVoice>Collection<\/codeVoice>. In this case, see the documentation of <codeVoice>Collection.underestimatedCount<\/codeVoice>.<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Sequence<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "underestimatedCount",
          "key.doc.type" : "Other",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>underestimatedCount<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 38,
          "key.line" : 195,
          "key.name" : "underestimatedCount",
          "key.namecolumn" : 16,
          "key.namelength" : 19,
          "key.nameline" : 195,
          "key.nameoffset" : 8017,
          "key.offset" : 8013,
          "key.overrides" : [
            {
              "key.usr" : "s:ST19underestimatedCountSivp"
            }
          ],
          "key.parsed_declaration" : "public var underestimatedCount: Int",
          "key.parsed_scope.end" : 195,
          "key.parsed_scope.start" : 195,
          "key.typename" : "Int",
          "key.typeusr" : "$sSiD",
          "key.usr" : "s:ST19underestimatedCountSivp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public func withContiguousStorageIfAvailable&lt;R&gt;(_ body: (<Type usr=\"s:SR\">UnsafeBufferPointer<\/Type>&lt;(key: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, value: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>)&gt;) throws -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC32withContiguousStorageIfAvailableyqd__Sgqd__SRyx3key_q_5valuetGKXEKlF1RL_qd__mfp\">R<\/Type>) rethrows -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC32withContiguousStorageIfAvailableyqd__Sgqd__SRyx3key_q_5valuetGKXEKlF1RL_qd__mfp\">R<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.rethrows",
              "key.column" : 122,
              "key.length" : 8,
              "key.line" : 197,
              "key.offset" : 8174
            },
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 197,
              "key.offset" : 8057
            }
          ],
          "key.bodycolumn" : 138,
          "key.bodylength" : 5,
          "key.bodyline" : 197,
          "key.bodyoffset" : 8190,
          "key.column" : 12,
          "key.doc.declaration" : "func withContiguousStorageIfAvailable<R>(_ body: (UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
          "key.doc.discussion" : [
            {
              "Para" : "A `Collection` that provides its own implementation of this method must also guarantee that an equivalent buffer of its `SubSequence` can be generated by advancing the pointer by the distance to the slice’s `startIndex`."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>withContiguousStorageIfAvailable(_:)<\/Name><USR>s:ST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF<\/USR><Declaration>func withContiguousStorageIfAvailable&lt;R&gt;(_ body: (UnsafeBufferPointer&lt;Self.Element&gt;) throws -&gt; R) rethrows -&gt; R?<\/Declaration><CommentParts><Abstract><Para>Call <codeVoice>body(p)<\/codeVoice>, where <codeVoice>p<\/codeVoice> is a pointer to the collection’s contiguous storage.  If no such storage exists, it is first created.  If the collection does not support an internal representation in a form of contiguous storage, <codeVoice>body<\/codeVoice> is not called and <codeVoice>nil<\/codeVoice> is returned.<\/Para><\/Abstract><Discussion><Para>A <codeVoice>Collection<\/codeVoice> that provides its own implementation of this method must also guarantee that an equivalent buffer of its <codeVoice>SubSequence<\/codeVoice> can be generated by advancing the pointer by the distance to the slice’s <codeVoice>startIndex<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Sequence<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "withContiguousStorageIfAvailable(_:)",
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>withContiguousStorageIfAvailable<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC32withContiguousStorageIfAvailableyqd__Sgqd__SRyx3key_q_5valuetGKXEKlF1RL_qd__mfp\"><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>body<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:SR\">UnsafeBufferPointer<\/ref.struct>&lt;<tuple>(<tuple.element><tuple.element.argument_label>key<\/tuple.element.argument_label>: <tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.argument_label>value<\/tuple.element.argument_label>: <tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC32withContiguousStorageIfAvailableyqd__Sgqd__SRyx3key_q_5valuetGKXEKlF1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>rethrows<\/syntaxtype.keyword> -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC32withContiguousStorageIfAvailableyqd__Sgqd__SRyx3key_q_5valuetGKXEKlF1RL_qd__mfp\">R<\/ref.generic_type_param>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 132,
          "key.line" : 197,
          "key.name" : "withContiguousStorageIfAvailable(_:)",
          "key.namecolumn" : 17,
          "key.namelength" : 104,
          "key.nameline" : 197,
          "key.nameoffset" : 8069,
          "key.offset" : 8064,
          "key.overrides" : [
            {
              "key.usr" : "s:ST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF"
            }
          ],
          "key.parsed_declaration" : "public func withContiguousStorageIfAvailable<R>(_ body: (UnsafeBufferPointer<(key: Key, value: Value)>) throws -> R) rethrows -> R?",
          "key.parsed_scope.end" : 197,
          "key.parsed_scope.start" : 197,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>R<\/Declaration>",
              "key.column" : 50,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>",
              "key.kind" : "source.lang.swift.decl.generic_type_param",
              "key.length" : 1,
              "key.line" : 197,
              "key.name" : "R",
              "key.namecolumn" : 50,
              "key.namelength" : 1,
              "key.nameline" : 197,
              "key.nameoffset" : 8102,
              "key.offset" : 8102,
              "key.parsed_declaration" : "public func withContiguousStorageIfAvailable<R",
              "key.parsed_scope.end" : 197,
              "key.parsed_scope.start" : 197,
              "key.typename" : "R.Type",
              "key.typeusr" : "$sqd__mD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC32withContiguousStorageIfAvailableyqd__Sgqd__SRyx3key_q_5valuetGKXEKlF1RL_qd__mfp"
            }
          ],
          "key.typename" : "<Key, Value, R where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> ((UnsafeBufferPointer<(key: Key, value: Value)>) throws -> R) throws -> R?",
          "key.typeusr" : "$syqd__Sgqd__SRyx3key_q_5valuetGKXEKcluD",
          "key.usr" : "s:ST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@frozen public struct Iterator : <Type usr=\"s:St\">IteratorProtocol<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 13,
              "key.length" : 6,
              "key.line" : 199,
              "key.offset" : 8210
            },
            {
              "key.attribute" : "source.decl.attribute.frozen",
              "key.column" : 5,
              "key.length" : 7,
              "key.line" : 199,
              "key.offset" : 8202
            }
          ],
          "key.bodycolumn" : 55,
          "key.bodylength" : 614,
          "key.bodyline" : 199,
          "key.bodyoffset" : 8252,
          "key.column" : 20,
          "key.doc.declaration" : "associatedtype Iterator = IndexingIterator<Self>",
          "key.doc.discussion" : [
            {
              "Para" : "By default, a collection conforms to the `Sequence` protocol by supplying `IndexingIterator` as its associated `Iterator` type."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Other><Name>Iterator<\/Name><USR>s:Sl8IteratorQa<\/USR><Declaration>associatedtype Iterator = IndexingIterator&lt;Self&gt;<\/Declaration><CommentParts><Abstract><Para>A type that provides the collection’s iteration interface and encapsulates its iteration state.<\/Para><\/Abstract><Discussion><Para>By default, a collection conforms to the <codeVoice>Sequence<\/codeVoice> protocol by supplying <codeVoice>IndexingIterator<\/codeVoice> as its associated <codeVoice>Iterator<\/codeVoice> type.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
          "key.doc.name" : "Iterator",
          "key.doc.type" : "Other",
          "key.elements" : [
            {
              "key.column" : 37,
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 16,
              "key.line" : 199,
              "key.offset" : 8234
            }
          ],
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Iterator<\/decl.name> : <ref.protocol usr=\"s:St\">IteratorProtocol<\/ref.protocol><\/decl.struct>",
          "key.inheritedtypes" : [
            {
              "key.name" : "IteratorProtocol"
            }
          ],
          "key.kind" : "source.lang.swift.decl.struct",
          "key.length" : 650,
          "key.line" : 199,
          "key.name" : "Iterator",
          "key.namecolumn" : 27,
          "key.namelength" : 8,
          "key.nameline" : 199,
          "key.nameoffset" : 8224,
          "key.offset" : 8217,
          "key.overrides" : [
            {
              "key.usr" : "s:Sl8IteratorQa"
            },
            {
              "key.usr" : "s:ST8IteratorQa"
            }
          ],
          "key.parsed_declaration" : "@frozen public struct Iterator: IteratorProtocol",
          "key.parsed_scope.end" : 219,
          "key.parsed_scope.start" : 199,
          "key.substructure" : [
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>@usableFromInline var stack: [<Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;]<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.usableFromInline",
                  "key.column" : 9,
                  "key.length" : 17,
                  "key.line" : 200,
                  "key.offset" : 8261
                }
              ],
              "key.column" : 27,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>stack<\/decl.name>: <decl.var.type>[<ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;]<\/decl.var.type><\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 38,
              "key.line" : 200,
              "key.name" : "stack",
              "key.namecolumn" : 31,
              "key.namelength" : 5,
              "key.nameline" : 200,
              "key.nameoffset" : 8283,
              "key.offset" : 8279,
              "key.parsed_declaration" : "@usableFromInline var stack: [TreeNode<Key, Value>] = []",
              "key.parsed_scope.end" : 200,
              "key.parsed_scope.start" : 200,
              "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
              "key.typename" : "[TreeNode<Key, Value>]",
              "key.typeusr" : "$sSay7Rubicon8TreeNodeCyxq_GGD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC8IteratorV5stackSayAA0C4NodeCyxq_GGvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public init(tree: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;?)<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 202,
                  "key.offset" : 8338
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 202,
                  "key.offset" : 8327
                }
              ],
              "key.bodycolumn" : 62,
              "key.bodylength" : 41,
              "key.bodyline" : 202,
              "key.bodyoffset" : 8380,
              "key.column" : 27,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>tree<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 77,
              "key.line" : 202,
              "key.name" : "init(tree:)",
              "key.namecolumn" : 27,
              "key.namelength" : 33,
              "key.nameline" : 202,
              "key.nameoffset" : 8345,
              "key.offset" : 8345,
              "key.parsed_declaration" : "@inlinable public init(tree: TreeNode<Key, Value>?)",
              "key.parsed_scope.end" : 204,
              "key.parsed_scope.start" : 202,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Iterator.Type) -> (TreeNode<Key, Value>?) -> BinaryTreeDictionary<Key, Value>.Iterator",
              "key.typeusr" : "$s4tree7Rubicon20BinaryTreeDictionaryC8IteratorVyxq__GAB0D4NodeCyxq_GSg_tcD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC8IteratorV4treeAEyxq__GAA0C4NodeCyxq_GSg_tcfc"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>@usableFromInline mutating func descendBranch(_ node: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;?)<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.mutating",
                  "key.column" : 27,
                  "key.length" : 8,
                  "key.line" : 206,
                  "key.offset" : 8450
                },
                {
                  "key.attribute" : "source.decl.attribute.usableFromInline",
                  "key.column" : 9,
                  "key.length" : 17,
                  "key.line" : 206,
                  "key.offset" : 8432
                }
              ],
              "key.bodycolumn" : 87,
              "key.bodylength" : 140,
              "key.bodyline" : 206,
              "key.bodyoffset" : 8510,
              "key.column" : 36,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>mutating<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>descendBranch<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>node<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;?<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 192,
              "key.line" : 206,
              "key.name" : "descendBranch(_:)",
              "key.namecolumn" : 41,
              "key.namelength" : 44,
              "key.nameline" : 206,
              "key.nameoffset" : 8464,
              "key.offset" : 8459,
              "key.parsed_declaration" : "@usableFromInline mutating func descendBranch(_ node: TreeNode<Key, Value>?)",
              "key.parsed_scope.end" : 212,
              "key.parsed_scope.start" : 206,
              "key.substructure" : [
                {
                  "key.annotated_decl" : "<Declaration>var _n: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;?<\/Declaration>",
                  "key.column" : 13,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
                  "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_n<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;?<\/decl.var.type><\/decl.var.local>",
                  "key.kind" : "source.lang.swift.decl.var.local",
                  "key.length" : 13,
                  "key.line" : 207,
                  "key.name" : "_n",
                  "key.namecolumn" : 17,
                  "key.namelength" : 2,
                  "key.nameline" : 207,
                  "key.nameoffset" : 8527,
                  "key.offset" : 8523,
                  "key.parsed_declaration" : "var _n = node",
                  "key.parsed_scope.end" : 207,
                  "key.parsed_scope.start" : 207,
                  "key.typename" : "TreeNode<Key, Value>?",
                  "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GSgD",
                  "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC8IteratorV13descendBranchyyAA0C4NodeCyxq_GSgF2_nL_AJvp"
                }
              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (inout BinaryTreeDictionary<Key, Value>.Iterator) -> (TreeNode<Key, Value>?) -> ()",
              "key.typeusr" : "$syy7Rubicon8TreeNodeCyxq_GSgcD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC8IteratorV13descendBranchyyAA0C4NodeCyxq_GSgF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public mutating func next() -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/Type>?<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.mutating",
                  "key.column" : 27,
                  "key.length" : 8,
                  "key.line" : 214,
                  "key.offset" : 8679
                },
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 214,
                  "key.offset" : 8672
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 214,
                  "key.offset" : 8661
                }
              ],
              "key.bodycolumn" : 61,
              "key.bodylength" : 147,
              "key.bodyline" : 214,
              "key.bodyoffset" : 8713,
              "key.column" : 36,
              "key.doc.declaration" : "mutating func next() -> Self.Element?",
              "key.doc.discussion" : [
                {
                  "Para" : "Repeatedly calling this method returns, in order, all the elements of the underlying sequence. As soon as the sequence has run out of elements, all subsequent calls return `nil`."
                },
                {
                  "Para" : "You must not call this method if any other copy of this iterator has been advanced with a call to its `next()` method."
                },
                {
                  "Para" : "The following example shows how an iterator can be used explicitly to emulate a `for`-`in` loop. First, retrieve a sequence’s iterator, and then call the iterator’s `next()` method until it returns `nil`."
                },
                {
                  "CodeListing" : ""
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Function><Name>next()<\/Name><USR>s:St4next7ElementQzSgyF<\/USR><Declaration>mutating func next() -&gt; Self.Element?<\/Declaration><CommentParts><Abstract><Para>Advances to the next element and returns it, or <codeVoice>nil<\/codeVoice> if no next element exists.<\/Para><\/Abstract><ResultDiscussion><Para>The next element in the underlying sequence, if a next element exists; otherwise, <codeVoice>nil<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><Para>Repeatedly calling this method returns, in order, all the elements of the underlying sequence. As soon as the sequence has run out of elements, all subsequent calls return <codeVoice>nil<\/codeVoice>.<\/Para><Para>You must not call this method if any other copy of this iterator has been advanced with a call to its <codeVoice>next()<\/codeVoice> method.<\/Para><Para>The following example shows how an iterator can be used explicitly to emulate a <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loop. First, retrieve a sequence’s iterator, and then call the iterator’s <codeVoice>next()<\/codeVoice> method until it returns <codeVoice>nil<\/codeVoice>.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let numbers = [2, 3, 5, 7]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var numbersIterator = numbers.makeIterator()]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[while let num = numbersIterator.next() {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(num)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"2\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"5\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"7\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Note><Para>This documentation comment was inherited from <codeVoice>IteratorProtocol<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.name" : "next()",
              "key.doc.result_discussion" : [
                {
                  "Para" : "The next element in the underlying sequence, if a next element exists; otherwise, `nil`."
                }
              ],
              "key.doc.type" : "Function",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>mutating<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>next<\/decl.name>() -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/ref.typealias>?<\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 173,
              "key.line" : 214,
              "key.name" : "next()",
              "key.namecolumn" : 41,
              "key.namelength" : 6,
              "key.nameline" : 214,
              "key.nameoffset" : 8693,
              "key.offset" : 8688,
              "key.overrides" : [
                {
                  "key.usr" : "s:St4next7ElementQzSgyF"
                }
              ],
              "key.parsed_declaration" : "@inlinable public mutating func next() -> Element?",
              "key.parsed_scope.end" : 218,
              "key.parsed_scope.start" : 214,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (inout BinaryTreeDictionary<Key, Value>.Iterator) -> () -> (key: Key, value: Value)?",
              "key.typeusr" : "$sx3key_q_5valuetSgycD",
              "key.usr" : "s:St4next7ElementQzSgyF"
            }
          ],
          "key.typename" : "BinaryTreeDictionary<Key, Value>.Iterator.Type",
          "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryC8IteratorVyxq__GmD",
          "key.usr" : "s:Sl8IteratorQa"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    },
    {
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.bodycolumn" : 33,
      "key.bodylength" : 812,
      "key.bodyline" : 222,
      "key.bodyoffset" : 8903,
      "key.column" : 1,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 845,
      "key.line" : 222,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 11,
      "key.namelength" : 20,
      "key.nameline" : 222,
      "key.nameoffset" : 8881,
      "key.offset" : 8871,
      "key.parsed_declaration" : "extension BinaryTreeDictionary",
      "key.parsed_scope.end" : 253,
      "key.parsed_scope.start" : 222,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public var first: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/Type>? { get }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 224,
              "key.offset" : 8920
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 224,
              "key.offset" : 8909
            }
          ],
          "key.bodycolumn" : 44,
          "key.bodylength" : 112,
          "key.bodyline" : 224,
          "key.bodyoffset" : 8948,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>first<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/ref.typealias>?<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 134,
          "key.line" : 224,
          "key.name" : "first",
          "key.namecolumn" : 27,
          "key.namelength" : 5,
          "key.nameline" : 224,
          "key.nameoffset" : 8931,
          "key.offset" : 8927,
          "key.parsed_declaration" : "@inlinable public var first: Element?",
          "key.parsed_scope.end" : 228,
          "key.parsed_scope.start" : 224,
          "key.typename" : "(key: Key, value: Value)?",
          "key.typeusr" : "$sx3key_q_5valuetSgD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC5firstx3key_q_5valuetSgvp"
        },
        {
          "key.annotated_decl" : "<Declaration>let n: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
          "key.column" : 9,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>n<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
          "key.kind" : "source.lang.swift.decl.var.local",
          "key.length" : 15,
          "key.line" : 226,
          "key.name" : "n",
          "key.namecolumn" : 13,
          "key.namelength" : 1,
          "key.nameline" : 226,
          "key.nameoffset" : 9012,
          "key.offset" : 9008,
          "key.parsed_declaration" : "let n = r.first",
          "key.parsed_scope.end" : 226,
          "key.parsed_scope.start" : 226,
          "key.typename" : "TreeNode<Key, Value>",
          "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC5firstx3key_q_5valuetSgvg1nL_AA0C4NodeCyxq_Gvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public var last: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/Type>? { get }<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 230,
              "key.offset" : 9078
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 230,
              "key.offset" : 9067
            }
          ],
          "key.bodycolumn" : 43,
          "key.bodylength" : 111,
          "key.bodyline" : 230,
          "key.bodyoffset" : 9105,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>last<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/ref.typealias>?<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
          "key.kind" : "source.lang.swift.decl.var.instance",
          "key.length" : 132,
          "key.line" : 230,
          "key.name" : "last",
          "key.namecolumn" : 27,
          "key.namelength" : 4,
          "key.nameline" : 230,
          "key.nameoffset" : 9089,
          "key.offset" : 9085,
          "key.parsed_declaration" : "@inlinable public var last: Element?",
          "key.parsed_scope.end" : 234,
          "key.parsed_scope.start" : 230,
          "key.typename" : "(key: Key, value: Value)?",
          "key.typeusr" : "$sx3key_q_5valuetSgD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC4lastx3key_q_5valuetSgvp"
        },
        {
          "key.annotated_decl" : "<Declaration>let n: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
          "key.column" : 9,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>n<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
          "key.kind" : "source.lang.swift.decl.var.local",
          "key.length" : 14,
          "key.line" : 232,
          "key.name" : "n",
          "key.namecolumn" : 13,
          "key.namelength" : 1,
          "key.nameline" : 232,
          "key.nameoffset" : 9169,
          "key.offset" : 9165,
          "key.parsed_declaration" : "let n = r.last",
          "key.parsed_scope.end" : 232,
          "key.parsed_scope.start" : 232,
          "key.typename" : "TreeNode<Key, Value>",
          "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC4lastx3key_q_5valuetSgvg1nL_AA0C4NodeCyxq_Gvp"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public func popFirst() -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 236,
              "key.offset" : 9234
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 236,
              "key.offset" : 9223
            }
          ],
          "key.bodycolumn" : 52,
          "key.bodylength" : 160,
          "key.bodyline" : 236,
          "key.bodyoffset" : 9270,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>popFirst<\/decl.name>() -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/ref.typealias>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 190,
          "key.line" : 236,
          "key.name" : "popFirst()",
          "key.namecolumn" : 28,
          "key.namelength" : 10,
          "key.nameline" : 236,
          "key.nameoffset" : 9246,
          "key.offset" : 9241,
          "key.parsed_declaration" : "@inlinable public func popFirst() -> Element?",
          "key.parsed_scope.end" : 242,
          "key.parsed_scope.start" : 236,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let n: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>n<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 15,
              "key.line" : 238,
              "key.name" : "n",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 238,
              "key.nameoffset" : 9334,
              "key.offset" : 9330,
              "key.parsed_declaration" : "let n = r.first",
              "key.parsed_scope.end" : 238,
              "key.parsed_scope.start" : 238,
              "key.typename" : "TreeNode<Key, Value>",
              "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC8popFirstx3key_q_5valuetSgyF1nL_AA0C4NodeCyxq_Gvp"
            },
            {
              "key.annotated_decl" : "<Declaration>let e: (<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>)<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>e<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 24,
              "key.line" : 239,
              "key.name" : "e",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 239,
              "key.nameoffset" : 9358,
              "key.offset" : 9354,
              "key.parsed_declaration" : "let e = (n.key, n.value)",
              "key.parsed_scope.end" : 239,
              "key.parsed_scope.start" : 239,
              "key.typename" : "(Key, Value)",
              "key.typeusr" : "$sx_q_tD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC8popFirstx3key_q_5valuetSgyF1eL_x_q_tvp"
            }
          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> () -> (key: Key, value: Value)?",
          "key.typeusr" : "$sx3key_q_5valuetSgycD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC8popFirstx3key_q_5valuetSgyF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public func popLast() -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/Type>?<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 244,
              "key.offset" : 9448
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 244,
              "key.offset" : 9437
            }
          ],
          "key.bodycolumn" : 51,
          "key.bodylength" : 159,
          "key.bodyline" : 244,
          "key.bodyoffset" : 9483,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>popLast<\/decl.name>() -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC7Elementa\">Element<\/ref.typealias>?<\/decl.function.returntype><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 188,
          "key.line" : 244,
          "key.name" : "popLast()",
          "key.namecolumn" : 28,
          "key.namelength" : 9,
          "key.nameline" : 244,
          "key.nameoffset" : 9460,
          "key.offset" : 9455,
          "key.parsed_declaration" : "@inlinable public func popLast() -> Element?",
          "key.parsed_scope.end" : 250,
          "key.parsed_scope.start" : 244,
          "key.substructure" : [
            {
              "key.annotated_decl" : "<Declaration>let n: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>n<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 14,
              "key.line" : 246,
              "key.name" : "n",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 246,
              "key.nameoffset" : 9547,
              "key.offset" : 9543,
              "key.parsed_declaration" : "let n = r.last",
              "key.parsed_scope.end" : 246,
              "key.parsed_scope.start" : 246,
              "key.typename" : "TreeNode<Key, Value>",
              "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC7popLastx3key_q_5valuetSgyF1nL_AA0C4NodeCyxq_Gvp"
            },
            {
              "key.annotated_decl" : "<Declaration>let e: (<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>)<\/Declaration>",
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>e<\/decl.name>: <decl.var.type><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.type><\/decl.var.local>",
              "key.kind" : "source.lang.swift.decl.var.local",
              "key.length" : 24,
              "key.line" : 247,
              "key.name" : "e",
              "key.namecolumn" : 13,
              "key.namelength" : 1,
              "key.nameline" : 247,
              "key.nameoffset" : 9570,
              "key.offset" : 9566,
              "key.parsed_declaration" : "let e = (n.key, n.value)",
              "key.parsed_scope.end" : 247,
              "key.parsed_scope.start" : 247,
              "key.typename" : "(Key, Value)",
              "key.typeusr" : "$sx_q_tD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC7popLastx3key_q_5valuetSgyF1eL_x_q_tvp"
            }
          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> () -> (key: Key, value: Value)?",
          "key.typeusr" : "$sx3key_q_5valuetSgycD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC7popLastx3key_q_5valuetSgyF"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@inlinable public func reserveCapacity(_ minimumCapacity: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 16,
              "key.length" : 6,
              "key.line" : 252,
              "key.offset" : 9660
            },
            {
              "key.attribute" : "source.decl.attribute.inlinable",
              "key.column" : 5,
              "key.length" : 10,
              "key.line" : 252,
              "key.offset" : 9649
            }
          ],
          "key.bodycolumn" : 69,
          "key.bodylength" : 0,
          "key.bodyline" : 252,
          "key.bodyoffset" : 9713,
          "key.column" : 23,
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reserveCapacity<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>minimumCapacity<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 47,
          "key.line" : 252,
          "key.name" : "reserveCapacity(_:)",
          "key.namecolumn" : 28,
          "key.namelength" : 39,
          "key.nameline" : 252,
          "key.nameoffset" : 9672,
          "key.offset" : 9667,
          "key.parsed_declaration" : "@inlinable public func reserveCapacity(_ minimumCapacity: Int)",
          "key.parsed_scope.end" : 252,
          "key.parsed_scope.start" : 252,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (Int) -> ()",
          "key.typeusr" : "$syySicD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC15reserveCapacityyySiF"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    },
    {
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.bodycolumn" : 83,
      "key.bodylength" : 219,
      "key.bodyline" : 255,
      "key.bodyoffset" : 9800,
      "key.column" : 1,
      "key.elements" : [
        {
          "key.column" : 33,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 9,
          "key.line" : 255,
          "key.offset" : 9750
        }
      ],
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.inheritedtypes" : [
        {
          "key.name" : "Encodable"
        }
      ],
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 302,
      "key.line" : 255,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 11,
      "key.namelength" : 20,
      "key.nameline" : 255,
      "key.nameoffset" : 9728,
      "key.offset" : 9718,
      "key.parsed_declaration" : "extension BinaryTreeDictionary: Encodable where Key: Encodable, Value: Encodable",
      "key.parsed_scope.end" : 264,
      "key.parsed_scope.start" : 255,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public func encode(to encoder: <Type usr=\"s:s7EncoderP\">Encoder<\/Type>) throws<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 257,
              "key.offset" : 9806
            }
          ],
          "key.bodycolumn" : 53,
          "key.bodylength" : 163,
          "key.bodyline" : 257,
          "key.bodyoffset" : 9854,
          "key.column" : 12,
          "key.doc.declaration" : "func encode(to encoder: Encoder) throws",
          "key.doc.discussion" : [
            {
              "Para" : "If the value fails to encode anything, `encoder` will encode an empty keyed container in its place."
            },
            {
              "Para" : "This function throws an error if any values are invalid for the given encoder’s format."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>encode(to:)<\/Name><USR>s:SE6encode2toys7Encoder_p_tKF<\/USR><Declaration>func encode(to encoder: Encoder) throws<\/Declaration><CommentParts><Abstract><Para>Encodes this value into the given encoder.<\/Para><\/Abstract><Parameters><Parameter><Name>encoder<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The encoder to write data to.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>If the value fails to encode anything, <codeVoice>encoder<\/codeVoice> will encode an empty keyed container in its place.<\/Para><Para>This function throws an error if any values are invalid for the given encoder’s format.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Encodable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "encode(to:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The encoder to write data to."
                }
              ],
              "name" : "encoder"
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>encode<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>encoder<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.protocol usr=\"s:s7EncoderP\">Encoder<\/ref.protocol><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>throws<\/syntaxtype.keyword><\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 205,
          "key.line" : 257,
          "key.name" : "encode(to:)",
          "key.namecolumn" : 17,
          "key.namelength" : 27,
          "key.nameline" : 257,
          "key.nameoffset" : 9818,
          "key.offset" : 9813,
          "key.overrides" : [
            {
              "key.usr" : "s:SE6encode2toys7Encoder_p_tKF"
            }
          ],
          "key.parsed_declaration" : "public func encode(to encoder: Encoder) throws",
          "key.parsed_scope.end" : 263,
          "key.parsed_scope.start" : 257,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Encodable, Key : Hashable, Value : Encodable> (BinaryTreeDictionary<Key, Value>) -> (Encoder) throws -> ()",
          "key.typeusr" : "$s2toys7Encoder_p_tKcD",
          "key.usr" : "s:SE6encode2toys7Encoder_p_tKF"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    },
    {
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.bodycolumn" : 83,
      "key.bodylength" : 0,
      "key.bodyline" : 266,
      "key.bodyoffset" : 10104,
      "key.column" : 1,
      "key.elements" : [
        {
          "key.column" : 33,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 9,
          "key.line" : 266,
          "key.offset" : 10054
        }
      ],
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.inheritedtypes" : [
        {
          "key.name" : "Decodable"
        }
      ],
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 83,
      "key.line" : 266,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 11,
      "key.namelength" : 20,
      "key.nameline" : 266,
      "key.nameoffset" : 10032,
      "key.offset" : 10022,
      "key.parsed_declaration" : "extension BinaryTreeDictionary: Decodable where Key: Decodable, Value: Decodable",
      "key.parsed_scope.end" : 266,
      "key.parsed_scope.start" : 266,
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    },
    {
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.bodycolumn" : 33,
      "key.bodylength" : 2530,
      "key.bodyline" : 268,
      "key.bodyoffset" : 10139,
      "key.column" : 1,
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 2563,
      "key.line" : 268,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 11,
      "key.namelength" : 20,
      "key.nameline" : 268,
      "key.nameoffset" : 10117,
      "key.offset" : 10107,
      "key.parsed_declaration" : "extension BinaryTreeDictionary",
      "key.parsed_scope.end" : 329,
      "key.parsed_scope.start" : 268,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@frozen public struct Keys : <Type usr=\"s:Sl\">Collection<\/Type>, <Type usr=\"s:SQ\">Equatable<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 13,
              "key.length" : 6,
              "key.line" : 270,
              "key.offset" : 10153
            },
            {
              "key.attribute" : "source.decl.attribute.frozen",
              "key.column" : 5,
              "key.length" : 7,
              "key.line" : 270,
              "key.offset" : 10145
            }
          ],
          "key.bodycolumn" : 66,
          "key.bodylength" : 1181,
          "key.bodyline" : 270,
          "key.bodyoffset" : 10206,
          "key.column" : 20,
          "key.elements" : [
            {
              "key.column" : 33,
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 10,
              "key.line" : 270,
              "key.offset" : 10173
            },
            {
              "key.column" : 45,
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 9,
              "key.line" : 270,
              "key.offset" : 10185
            },
            {
              "key.column" : 56,
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 8,
              "key.line" : 270,
              "key.offset" : 10196
            }
          ],
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Keys<\/decl.name> : <ref.protocol usr=\"s:Sl\">Collection<\/ref.protocol>, <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.struct>",
          "key.inheritedtypes" : [
            {
              "key.name" : "Collection"
            },
            {
              "key.name" : "Equatable"
            },
            {
              "key.name" : "Hashable"
            }
          ],
          "key.kind" : "source.lang.swift.decl.struct",
          "key.length" : 1228,
          "key.line" : 270,
          "key.name" : "Keys",
          "key.namecolumn" : 27,
          "key.namelength" : 4,
          "key.nameline" : 270,
          "key.nameoffset" : 10167,
          "key.offset" : 10160,
          "key.parsed_declaration" : "@frozen public struct Keys: Collection, Equatable, Hashable",
          "key.parsed_scope.end" : 297,
          "key.parsed_scope.start" : 270,
          "key.substructure" : [
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/Type>.Element = <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 9,
                  "key.length" : 6,
                  "key.line" : 271,
                  "key.offset" : 10215
                }
              ],
              "key.column" : 16,
              "key.doc.declaration" : "associatedtype Element where Self.Element == Self.Iterator.Element",
              "key.doc.discussion" : [
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>Element<\/Name><USR>s:ST7ElementQa<\/USR><Declaration>associatedtype Element where Self.Element == Self.Iterator.Element<\/Declaration><CommentParts><Abstract><Para>A type representing the sequence’s elements.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Sequence<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "Element",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/ref.struct>.<decl.name>Element<\/decl.name> = <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param><\/decl.typealias>",
              "key.kind" : "source.lang.swift.decl.typealias",
              "key.length" : 23,
              "key.line" : 271,
              "key.name" : "Element",
              "key.namecolumn" : 26,
              "key.namelength" : 7,
              "key.nameline" : 271,
              "key.nameoffset" : 10232,
              "key.offset" : 10222,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl7ElementQa"
                },
                {
                  "key.usr" : "s:ST7ElementQa"
                }
              ],
              "key.parsed_declaration" : "public typealias Element = Key",
              "key.parsed_scope.end" : 271,
              "key.parsed_scope.start" : 271,
              "key.typename" : "Key.Type",
              "key.typeusr" : "$sxmD",
              "key.usr" : "s:ST7ElementQa"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/Type>.SubSequence = <Type usr=\"s:s5SliceV\">Slice<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/Type>&gt;<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 9,
                  "key.length" : 6,
                  "key.line" : 272,
                  "key.offset" : 10254
                }
              ],
              "key.column" : 16,
              "key.doc.declaration" : "associatedtype SubSequence : Collection = Slice<Self> where Self.Element == Self.SubSequence.Element, Self.SubSequence == Self.SubSequence.SubSequence",
              "key.doc.discussion" : [
                {
                  "Para" : "This associated type appears as a requirement in the `Sequence` protocol, but it is restated here with stricter constraints. In a collection, the subsequence should also conform to `Collection`."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>SubSequence<\/Name><USR>s:Sl11SubSequenceQa<\/USR><Declaration>associatedtype SubSequence : Collection = Slice&lt;Self&gt; where Self.Element == Self.SubSequence.Element, Self.SubSequence == Self.SubSequence.SubSequence<\/Declaration><CommentParts><Abstract><Para>A sequence that represents a contiguous subrange of the collection’s elements.<\/Para><\/Abstract><Discussion><Para>This associated type appears as a requirement in the <codeVoice>Sequence<\/codeVoice> protocol, but it is restated here with stricter constraints. In a collection, the subsequence should also conform to <codeVoice>Collection<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "SubSequence",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/ref.struct>.<decl.name>SubSequence<\/decl.name> = <ref.struct usr=\"s:s5SliceV\">Slice<\/ref.struct>&lt;<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/ref.struct>&gt;<\/decl.typealias>",
              "key.kind" : "source.lang.swift.decl.typealias",
              "key.length" : 35,
              "key.line" : 272,
              "key.name" : "SubSequence",
              "key.namecolumn" : 26,
              "key.namelength" : 11,
              "key.nameline" : 272,
              "key.nameoffset" : 10271,
              "key.offset" : 10261,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl11SubSequenceQa"
                }
              ],
              "key.parsed_declaration" : "public typealias SubSequence = Slice<Keys>",
              "key.parsed_scope.end" : 272,
              "key.parsed_scope.start" : 272,
              "key.typename" : "Slice<BinaryTreeDictionary<Key, Value>.Keys>.Type",
              "key.typeusr" : "$ss5SliceVy7Rubicon20BinaryTreeDictionaryC4KeysVyxq__GGmD",
              "key.usr" : "s:Sl11SubSequenceQa"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/Type>.Indices = <Type usr=\"s:SI\">DefaultIndices<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/Type>&gt;<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 9,
                  "key.length" : 6,
                  "key.line" : 273,
                  "key.offset" : 10305
                }
              ],
              "key.column" : 16,
              "key.doc.declaration" : "associatedtype Indices : Collection = DefaultIndices<Self> where Self.Indices == Self.Indices.SubSequence",
              "key.doc.discussion" : [
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>Indices<\/Name><USR>s:Sl7IndicesQa<\/USR><Declaration>associatedtype Indices : Collection = DefaultIndices&lt;Self&gt; where Self.Indices == Self.Indices.SubSequence<\/Declaration><CommentParts><Abstract><Para>A type that represents the indices that are valid for subscripting the collection, in ascending order.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "Indices",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/ref.struct>.<decl.name>Indices<\/decl.name> = <ref.struct usr=\"s:SI\">DefaultIndices<\/ref.struct>&lt;<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/ref.struct>&gt;<\/decl.typealias>",
              "key.kind" : "source.lang.swift.decl.typealias",
              "key.length" : 40,
              "key.line" : 273,
              "key.name" : "Indices",
              "key.namecolumn" : 26,
              "key.namelength" : 7,
              "key.nameline" : 273,
              "key.nameoffset" : 10322,
              "key.offset" : 10312,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl7IndicesQa"
                }
              ],
              "key.parsed_declaration" : "public typealias Indices = DefaultIndices<Keys>",
              "key.parsed_scope.end" : 273,
              "key.parsed_scope.start" : 273,
              "key.typename" : "DefaultIndices<BinaryTreeDictionary<Key, Value>.Keys>.Type",
              "key.typeusr" : "$sSIy7Rubicon20BinaryTreeDictionaryC4KeysVyxq__GGmD",
              "key.usr" : "s:Sl7IndicesQa"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public var startIndex: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 275,
                  "key.offset" : 10373
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 275,
                  "key.offset" : 10362
                }
              ],
              "key.bodycolumn" : 50,
              "key.bodylength" : 17,
              "key.bodyline" : 275,
              "key.bodyoffset" : 10403,
              "key.column" : 27,
              "key.doc.declaration" : "var startIndex: Self.Index { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "If the collection is empty, `startIndex` is equal to `endIndex`."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>startIndex<\/Name><USR>s:Sl10startIndex0B0Qzvp<\/USR><Declaration>var startIndex: Self.Index { get }<\/Declaration><CommentParts><Abstract><Para>The position of the first element in a nonempty collection.<\/Para><\/Abstract><Discussion><Para>If the collection is empty, <codeVoice>startIndex<\/codeVoice> is equal to <codeVoice>endIndex<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "startIndex",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>startIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 41,
              "key.line" : 275,
              "key.name" : "startIndex",
              "key.namecolumn" : 31,
              "key.namelength" : 10,
              "key.nameline" : 275,
              "key.nameoffset" : 10384,
              "key.offset" : 10380,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl10startIndex0B0Qzvp"
                }
              ],
              "key.parsed_declaration" : "@inlinable public var startIndex: Index",
              "key.parsed_scope.end" : 275,
              "key.parsed_scope.start" : 275,
              "key.typename" : "ShadowInt",
              "key.typeusr" : "$s7Rubicon9ShadowIntVD",
              "key.usr" : "s:Sl10startIndex0B0Qzvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public var endIndex: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 276,
                  "key.offset" : 10441
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 276,
                  "key.offset" : 10430
                }
              ],
              "key.bodycolumn" : 50,
              "key.bodylength" : 15,
              "key.bodyline" : 276,
              "key.bodyoffset" : 10471,
              "key.column" : 27,
              "key.doc.declaration" : "var endIndex: Self.Index { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "When you need a range that includes the last element of a collection, use the half-open range operator (`..<`) with `endIndex`. The `..<` operator creates a range that doesn’t include the upper bound, so it’s always safe to use with `endIndex`. For example:"
                },
                {
                  "CodeListing" : ""
                },
                {
                  "Para" : "If the collection is empty, `endIndex` is equal to `startIndex`."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>endIndex<\/Name><USR>s:Sl8endIndex0B0Qzvp<\/USR><Declaration>var endIndex: Self.Index { get }<\/Declaration><CommentParts><Abstract><Para>The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.<\/Para><\/Abstract><Discussion><Para>When you need a range that includes the last element of a collection, use the half-open range operator (<codeVoice>..&lt;<\/codeVoice>) with <codeVoice>endIndex<\/codeVoice>. The <codeVoice>..&lt;<\/codeVoice> operator creates a range that doesn’t include the upper bound, so it’s always safe to use with <codeVoice>endIndex<\/codeVoice>. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let numbers = [10, 20, 30, 40, 50]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let index = numbers.firstIndex(of: 30) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(numbers[index ..< numbers.endIndex])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[30, 40, 50]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If the collection is empty, <codeVoice>endIndex<\/codeVoice> is equal to <codeVoice>startIndex<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "endIndex",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>endIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 39,
              "key.line" : 276,
              "key.name" : "endIndex",
              "key.namecolumn" : 31,
              "key.namelength" : 8,
              "key.nameline" : 276,
              "key.nameoffset" : 10452,
              "key.offset" : 10448,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl8endIndex0B0Qzvp"
                }
              ],
              "key.parsed_declaration" : "@inlinable public var endIndex:   Index",
              "key.parsed_scope.end" : 276,
              "key.parsed_scope.start" : 276,
              "key.typename" : "ShadowInt",
              "key.typeusr" : "$s7Rubicon9ShadowIntVD",
              "key.usr" : "s:Sl8endIndex0B0Qzvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public var count: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 277,
                  "key.offset" : 10507
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 277,
                  "key.offset" : 10496
                }
              ],
              "key.bodycolumn" : 48,
              "key.bodylength" : 12,
              "key.bodyline" : 277,
              "key.bodyoffset" : 10535,
              "key.column" : 27,
              "key.doc.declaration" : "var count: Int { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "To check whether a collection is empty, use its `isEmpty` property instead of comparing `count` to zero. Unless the collection guarantees random-access performance, calculating `count` can be an O() operation."
                },
                {
                  "Complexity" : ""
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>count<\/Name><USR>s:Sl5countSivp<\/USR><Declaration>var count: Int { get }<\/Declaration><CommentParts><Abstract><Para>The number of elements in the collection.<\/Para><\/Abstract><Discussion><Para>To check whether a collection is empty, use its <codeVoice>isEmpty<\/codeVoice> property instead of comparing <codeVoice>count<\/codeVoice> to zero. Unless the collection guarantees random-access performance, calculating <codeVoice>count<\/codeVoice> can be an O(<emphasis>n<\/emphasis>) operation.<\/Para><Complexity><Para>O(1) if the collection conforms to <codeVoice>RandomAccessCollection<\/codeVoice>; otherwise, O(<emphasis>n<\/emphasis>), where <emphasis>n<\/emphasis> is the length of the collection.<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "count",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 34,
              "key.line" : 277,
              "key.name" : "count",
              "key.namecolumn" : 31,
              "key.namelength" : 5,
              "key.nameline" : 277,
              "key.nameoffset" : 10518,
              "key.offset" : 10514,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl5countSivp"
                }
              ],
              "key.parsed_declaration" : "@inlinable public var count:      Int",
              "key.parsed_scope.end" : 277,
              "key.parsed_scope.start" : 277,
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:Sl5countSivp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public var isEmpty: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 278,
                  "key.offset" : 10568
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 278,
                  "key.offset" : 10557
                }
              ],
              "key.bodycolumn" : 49,
              "key.bodylength" : 14,
              "key.bodyline" : 278,
              "key.bodyoffset" : 10597,
              "key.column" : 27,
              "key.doc.declaration" : "var isEmpty: Bool { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "When you need to check whether your collection is empty, use the `isEmpty` property instead of checking that the `count` property is equal to zero. For collections that don’t conform to `RandomAccessCollection`, accessing the `count` property iterates through the elements of the collection."
                },
                {
                  "CodeListing" : ""
                },
                {
                  "Complexity" : ""
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>isEmpty<\/Name><USR>s:Sl7isEmptySbvp<\/USR><Declaration>var isEmpty: Bool { get }<\/Declaration><CommentParts><Abstract><Para>A Boolean value indicating whether the collection is empty.<\/Para><\/Abstract><Discussion><Para>When you need to check whether your collection is empty, use the <codeVoice>isEmpty<\/codeVoice> property instead of checking that the <codeVoice>count<\/codeVoice> property is equal to zero. For collections that don’t conform to <codeVoice>RandomAccessCollection<\/codeVoice>, accessing the <codeVoice>count<\/codeVoice> property iterates through the elements of the collection.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let horseName = \"Silver\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if horseName.isEmpty {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"My horse has no name.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Hi ho, \\(horseName)!\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Hi ho, Silver!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "isEmpty",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isEmpty<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 37,
              "key.line" : 278,
              "key.name" : "isEmpty",
              "key.namecolumn" : 31,
              "key.namelength" : 7,
              "key.nameline" : 278,
              "key.nameoffset" : 10579,
              "key.offset" : 10575,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl7isEmptySbvp"
                }
              ],
              "key.parsed_declaration" : "@inlinable public var isEmpty:    Bool",
              "key.parsed_scope.end" : 278,
              "key.parsed_scope.start" : 278,
              "key.typename" : "Bool",
              "key.typeusr" : "$sSbD",
              "key.usr" : "s:Sl7isEmptySbvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>@usableFromInline let tree: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.usableFromInline",
                  "key.column" : 9,
                  "key.length" : 17,
                  "key.line" : 280,
                  "key.offset" : 10622
                }
              ],
              "key.column" : 27,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>tree<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 42,
              "key.line" : 280,
              "key.name" : "tree",
              "key.namecolumn" : 31,
              "key.namelength" : 4,
              "key.nameline" : 280,
              "key.nameoffset" : 10644,
              "key.offset" : 10640,
              "key.parsed_declaration" : "@usableFromInline let tree: BinaryTreeDictionary<Key, Value>",
              "key.parsed_scope.end" : 280,
              "key.parsed_scope.start" : 280,
              "key.typename" : "BinaryTreeDictionary<Key, Value>",
              "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC4KeysV4treeACyxq_Gvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>init(_ tree: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;)<\/Declaration>",
              "key.bodycolumn" : 57,
              "key.bodylength" : 18,
              "key.bodyline" : 282,
              "key.bodyoffset" : 10740,
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tree<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 67,
              "key.line" : 282,
              "key.name" : "init(_:)",
              "key.namecolumn" : 9,
              "key.namelength" : 46,
              "key.nameline" : 282,
              "key.nameoffset" : 10692,
              "key.offset" : 10692,
              "key.parsed_declaration" : "init(_ tree: BinaryTreeDictionary<Key, Value>)",
              "key.parsed_scope.end" : 282,
              "key.parsed_scope.start" : 282,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Keys.Type) -> (BinaryTreeDictionary<Key, Value>) -> BinaryTreeDictionary<Key, Value>.Keys",
              "key.typeusr" : "$sy7Rubicon20BinaryTreeDictionaryC4KeysVyxq__GACyxq_GcD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC4KeysVyAEyxq__GACyxq_Gcfc"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public func index(after i: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 284,
                  "key.offset" : 10780
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 284,
                  "key.offset" : 10769
                }
              ],
              "key.bodycolumn" : 64,
              "key.bodylength" : 22,
              "key.bodyline" : 284,
              "key.bodyoffset" : 10824,
              "key.column" : 27,
              "key.doc.declaration" : "func index(after i: Self.Index) -> Self.Index",
              "key.doc.discussion" : [
                {
                  "Para" : "The successor of an index must be well defined. For an index `i` into a collection `c`, calling `c.index(after: i)` returns the same index every time."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Function><Name>index(after:)<\/Name><USR>s:Sl5index5after5IndexQzAD_tF<\/USR><Declaration>func index(after i: Self.Index) -&gt; Self.Index<\/Declaration><CommentParts><Abstract><Para>Returns the position immediately after the given index.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection. <codeVoice>i<\/codeVoice> must be less than <codeVoice>endIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The index value immediately after <codeVoice>i<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><Para>The successor of an index must be well defined. For an index <codeVoice>i<\/codeVoice> into a collection <codeVoice>c<\/codeVoice>, calling <codeVoice>c.index(after: i)<\/codeVoice> returns the same index every time.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.name" : "index(after:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "A valid index of the collection. `i` must be less than `endIndex`."
                    }
                  ],
                  "name" : "i"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "Para" : "The index value immediately after `i`."
                }
              ],
              "key.doc.type" : "Function",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>index<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>after<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 60,
              "key.line" : 284,
              "key.name" : "index(after:)",
              "key.namecolumn" : 32,
              "key.namelength" : 21,
              "key.nameline" : 284,
              "key.nameoffset" : 10792,
              "key.offset" : 10787,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl5index5after5IndexQzAD_tF"
                }
              ],
              "key.parsed_declaration" : "@inlinable public func index(after i: Index) -> Index",
              "key.parsed_scope.end" : 284,
              "key.parsed_scope.start" : 284,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Keys) -> (ShadowInt) -> ShadowInt",
              "key.typeusr" : "$s5after7Rubicon9ShadowIntVAD_tcD",
              "key.usr" : "s:Sl5index5after5IndexQzAD_tF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public func formIndex(after i: inout <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>)<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 286,
                  "key.offset" : 10868
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 286,
                  "key.offset" : 10857
                }
              ],
              "key.bodycolumn" : 65,
              "key.bodylength" : 27,
              "key.bodyline" : 286,
              "key.bodyoffset" : 10913,
              "key.column" : 27,
              "key.doc.declaration" : "func formIndex(after i: inout Self.Index)",
              "key.doc.discussion" : [
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Function><Name>formIndex(after:)<\/Name><USR>s:Sl9formIndex5aftery0B0Qzz_tF<\/USR><Declaration>func formIndex(after i: inout Self.Index)<\/Declaration><CommentParts><Abstract><Para>Replaces the given index with its successor.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection. <codeVoice>i<\/codeVoice> must be less than <codeVoice>endIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.name" : "formIndex(after:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "A valid index of the collection. `i` must be less than `endIndex`."
                    }
                  ],
                  "name" : "i"
                }
              ],
              "key.doc.type" : "Function",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formIndex<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>after<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 66,
              "key.line" : 286,
              "key.name" : "formIndex(after:)",
              "key.namecolumn" : 32,
              "key.namelength" : 31,
              "key.nameline" : 286,
              "key.nameoffset" : 10880,
              "key.offset" : 10875,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl9formIndex5aftery0B0Qzz_tF"
                }
              ],
              "key.parsed_declaration" : "@inlinable public func formIndex(after i: inout Index)",
              "key.parsed_scope.end" : 286,
              "key.parsed_scope.start" : 286,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Keys) -> (inout ShadowInt) -> ()",
              "key.typeusr" : "$s5aftery7Rubicon9ShadowIntVz_tcD",
              "key.usr" : "s:Sl9formIndex5aftery0B0Qzz_tF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public subscript(position: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV7Elementa\">Element<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 288,
                  "key.offset" : 10962
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 288,
                  "key.offset" : 10951
                }
              ],
              "key.bodycolumn" : 66,
              "key.bodylength" : 20,
              "key.bodyline" : 288,
              "key.bodyoffset" : 11008,
              "key.column" : 27,
              "key.doc.declaration" : "subscript(position: Self.Index) -> Self.Element { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "The following example accesses an element of an array through its subscript to print its value:"
                },
                {
                  "CodeListing" : ""
                },
                {
                  "Para" : "You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element."
                },
                {
                  "Complexity" : ""
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>subscript(_:)<\/Name><USR>s:Sly7ElementQz5IndexQzcip<\/USR><Declaration>subscript(position: Self.Index) -&gt; Self.Element { get }<\/Declaration><CommentParts><Abstract><Para>Accesses the element at the specified position.<\/Para><\/Abstract><Parameters><Parameter><Name>position<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The position of the element to access. <codeVoice>position<\/codeVoice> must be a valid index of the collection that is not equal to the <codeVoice>endIndex<\/codeVoice> property.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>The following example accesses an element of an array through its subscript to print its value:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(streets[1])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Bryant\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.<\/Para><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "subscript(_:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The position of the element to access. `position` must be a valid index of the collection that is not equal to the `endIndex` property."
                    }
                  ],
                  "name" : "position"
                }
              ],
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>position<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV7Elementa\">Element<\/ref.typealias><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.function.subscript>",
              "key.kind" : "source.lang.swift.decl.function.subscript",
              "key.length" : 60,
              "key.line" : 288,
              "key.name" : "subscript(_:)",
              "key.namecolumn" : 27,
              "key.namelength" : 26,
              "key.nameline" : 288,
              "key.nameoffset" : 10969,
              "key.offset" : 10969,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sly7ElementQz5IndexQzcip"
                }
              ],
              "key.parsed_declaration" : "@inlinable public subscript(position: Index) -> Element",
              "key.parsed_scope.end" : 288,
              "key.parsed_scope.start" : 288,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (ShadowInt) -> Key",
              "key.typeusr" : "$syx7Rubicon9ShadowIntVcD",
              "key.usr" : "s:Sly7ElementQz5IndexQzcip"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public static func == (lhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/Type>, rhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 290,
                  "key.offset" : 11050
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 290,
                  "key.offset" : 11039
                }
              ],
              "key.bodycolumn" : 74,
              "key.bodylength" : 178,
              "key.bodyline" : 290,
              "key.bodyoffset" : 11104,
              "key.column" : 27,
              "key.doc.declaration" : "static func == (lhs: Self, rhs: Self) -> Bool",
              "key.doc.discussion" : [
                {
                  "Para" : "Equality is the inverse of inequality. For any values `a` and `b`, `a == b` implies that `a != b` is `false`."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Function><Name>==(_:_:)<\/Name><USR>s:SQ2eeoiySbx_xtFZ<\/USR><Declaration>static func == (lhs: Self, rhs: Self) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Returns a Boolean value indicating whether two values are equal.<\/Para><\/Abstract><Parameters><Parameter><Name>lhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A value to compare.<\/Para><\/Discussion><\/Parameter><Parameter><Name>rhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Another value to compare.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Equality is the inverse of inequality. For any values <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice>, <codeVoice>a == b<\/codeVoice> implies that <codeVoice>a != b<\/codeVoice> is <codeVoice>false<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Equatable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.name" : "==(_:_:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "A value to compare."
                    }
                  ],
                  "name" : "lhs"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "Another value to compare."
                    }
                  ],
                  "name" : "rhs"
                }
              ],
              "key.doc.type" : "Function",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC4KeysV\">Keys<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
              "key.kind" : "source.lang.swift.decl.function.method.static",
              "key.length" : 226,
              "key.line" : 290,
              "key.name" : "==(_:_:)",
              "key.namecolumn" : 39,
              "key.namelength" : 25,
              "key.nameline" : 290,
              "key.nameoffset" : 11069,
              "key.offset" : 11057,
              "key.overrides" : [
                {
                  "key.usr" : "s:SQ2eeoiySbx_xtFZ"
                }
              ],
              "key.parsed_declaration" : "@inlinable public static func == (lhs: Keys, rhs: Keys) -> Bool",
              "key.parsed_scope.end" : 294,
              "key.parsed_scope.start" : 290,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Keys.Type) -> (BinaryTreeDictionary<Key, Value>.Keys, BinaryTreeDictionary<Key, Value>.Keys) -> Bool",
              "key.typeusr" : "$sySb7Rubicon20BinaryTreeDictionaryC4KeysVyxq__G_AFtcD",
              "key.usr" : "s:SQ2eeoiySbx_xtFZ"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public func hash(into hasher: inout <Type usr=\"s:s6HasherV\">Hasher<\/Type>)<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 296,
                  "key.offset" : 11304
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 296,
                  "key.offset" : 11293
                }
              ],
              "key.bodycolumn" : 65,
              "key.bodylength" : 32,
              "key.bodyline" : 296,
              "key.bodyoffset" : 11349,
              "key.column" : 27,
              "key.doc.declaration" : "func hash(into hasher: inout Hasher)",
              "key.doc.discussion" : [
                {
                  "Para" : "Implement this method to conform to the `Hashable` protocol. The components used for hashing must be the same as the components compared in your type’s `==` operator implementation. Call `hasher.combine(_:)` with each of these components."
                },
                {
                  "Important" : ""
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Function><Name>hash(into:)<\/Name><USR>s:SH4hash4intoys6HasherVz_tF<\/USR><Declaration>func hash(into hasher: inout Hasher)<\/Declaration><CommentParts><Abstract><Para>Hashes the essential components of this value by feeding them into the given hasher.<\/Para><\/Abstract><Parameters><Parameter><Name>hasher<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The hasher to use when combining the components of this instance.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Implement this method to conform to the <codeVoice>Hashable<\/codeVoice> protocol. The components used for hashing must be the same as the components compared in your type’s <codeVoice>==<\/codeVoice> operator implementation. Call <codeVoice>hasher.combine(_:)<\/codeVoice> with each of these components.<\/Para><Important><Para>Never call <codeVoice>finalize()<\/codeVoice> on <codeVoice>hasher<\/codeVoice>. Doing so may become a compile-time error in the future.<\/Para><\/Important><Note><Para>This documentation comment was inherited from <codeVoice>Hashable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.name" : "hash(into:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The hasher to use when combining the components of this instance."
                    }
                  ],
                  "name" : "hasher"
                }
              ],
              "key.doc.type" : "Function",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>hash<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>into<\/decl.var.parameter.argument_label> <decl.var.parameter.name>hasher<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:s6HasherV\">Hasher<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 71,
              "key.line" : 296,
              "key.name" : "hash(into:)",
              "key.namecolumn" : 32,
              "key.namelength" : 31,
              "key.nameline" : 296,
              "key.nameoffset" : 11316,
              "key.offset" : 11311,
              "key.overrides" : [
                {
                  "key.usr" : "s:SH4hash4intoys6HasherVz_tF"
                }
              ],
              "key.parsed_declaration" : "@inlinable public func hash(into hasher: inout Hasher)",
              "key.parsed_scope.end" : 296,
              "key.parsed_scope.start" : 296,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Keys) -> (inout Hasher) -> ()",
              "key.typeusr" : "$s4intoys6HasherVz_tcD",
              "key.usr" : "s:SH4hash4intoys6HasherVz_tF"
            }
          ],
          "key.typename" : "BinaryTreeDictionary<Key, Value>.Keys.Type",
          "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryC4KeysVyxq__GmD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC4KeysV"
        },
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>@frozen public struct Values : <Type usr=\"s:SM\">MutableCollection<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 13,
              "key.length" : 6,
              "key.line" : 299,
              "key.offset" : 11402
            },
            {
              "key.attribute" : "source.decl.attribute.frozen",
              "key.column" : 5,
              "key.length" : 7,
              "key.line" : 299,
              "key.offset" : 11394
            }
          ],
          "key.bodycolumn" : 54,
          "key.bodylength" : 1224,
          "key.bodyline" : 299,
          "key.bodyoffset" : 11443,
          "key.column" : 20,
          "key.elements" : [
            {
              "key.column" : 35,
              "key.kind" : "source.lang.swift.structure.elem.typeref",
              "key.length" : 17,
              "key.line" : 299,
              "key.offset" : 11424
            }
          ],
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Values<\/decl.name> : <ref.protocol usr=\"s:SM\">MutableCollection<\/ref.protocol><\/decl.struct>",
          "key.inheritedtypes" : [
            {
              "key.name" : "MutableCollection"
            }
          ],
          "key.kind" : "source.lang.swift.decl.struct",
          "key.length" : 1259,
          "key.line" : 299,
          "key.name" : "Values",
          "key.namecolumn" : 27,
          "key.namelength" : 6,
          "key.nameline" : 299,
          "key.nameoffset" : 11416,
          "key.offset" : 11409,
          "key.parsed_declaration" : "@frozen public struct Values: MutableCollection",
          "key.parsed_scope.end" : 328,
          "key.parsed_scope.start" : 299,
          "key.substructure" : [
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/Type>.Element = <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 9,
                  "key.length" : 6,
                  "key.line" : 300,
                  "key.offset" : 11452
                }
              ],
              "key.column" : 16,
              "key.doc.declaration" : "associatedtype Element where Self.Element == Self.Iterator.Element",
              "key.doc.discussion" : [
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>Element<\/Name><USR>s:ST7ElementQa<\/USR><Declaration>associatedtype Element where Self.Element == Self.Iterator.Element<\/Declaration><CommentParts><Abstract><Para>A type representing the sequence’s elements.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Sequence<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "Element",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/ref.struct>.<decl.name>Element<\/decl.name> = <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param><\/decl.typealias>",
              "key.kind" : "source.lang.swift.decl.typealias",
              "key.length" : 25,
              "key.line" : 300,
              "key.name" : "Element",
              "key.namecolumn" : 26,
              "key.namelength" : 7,
              "key.nameline" : 300,
              "key.nameoffset" : 11469,
              "key.offset" : 11459,
              "key.overrides" : [
                {
                  "key.usr" : "s:SM7ElementQa"
                },
                {
                  "key.usr" : "s:Sl7ElementQa"
                },
                {
                  "key.usr" : "s:ST7ElementQa"
                }
              ],
              "key.parsed_declaration" : "public typealias Element = Value",
              "key.parsed_scope.end" : 300,
              "key.parsed_scope.start" : 300,
              "key.typename" : "Value.Type",
              "key.typeusr" : "$sq_mD",
              "key.usr" : "s:ST7ElementQa"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/Type>.Indices = <Type usr=\"s:SI\">DefaultIndices<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/Type>&gt;<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 9,
                  "key.length" : 6,
                  "key.line" : 301,
                  "key.offset" : 11493
                }
              ],
              "key.column" : 16,
              "key.doc.declaration" : "associatedtype Indices : Collection = DefaultIndices<Self> where Self.Indices == Self.Indices.SubSequence",
              "key.doc.discussion" : [
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>Indices<\/Name><USR>s:Sl7IndicesQa<\/USR><Declaration>associatedtype Indices : Collection = DefaultIndices&lt;Self&gt; where Self.Indices == Self.Indices.SubSequence<\/Declaration><CommentParts><Abstract><Para>A type that represents the indices that are valid for subscripting the collection, in ascending order.<\/Para><\/Abstract><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "Indices",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/ref.struct>.<decl.name>Indices<\/decl.name> = <ref.struct usr=\"s:SI\">DefaultIndices<\/ref.struct>&lt;<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/ref.struct>&gt;<\/decl.typealias>",
              "key.kind" : "source.lang.swift.decl.typealias",
              "key.length" : 42,
              "key.line" : 301,
              "key.name" : "Indices",
              "key.namecolumn" : 26,
              "key.namelength" : 7,
              "key.nameline" : 301,
              "key.nameoffset" : 11510,
              "key.offset" : 11500,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl7IndicesQa"
                }
              ],
              "key.parsed_declaration" : "public typealias Indices = DefaultIndices<Values>",
              "key.parsed_scope.end" : 301,
              "key.parsed_scope.start" : 301,
              "key.typename" : "DefaultIndices<BinaryTreeDictionary<Key, Value>.Values>.Type",
              "key.typeusr" : "$sSIy7Rubicon20BinaryTreeDictionaryC6ValuesVyxq__GGmD",
              "key.usr" : "s:Sl7IndicesQa"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/Type>.SubSequence = <Type usr=\"s:s5SliceV\">Slice<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/Type>&gt;<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 9,
                  "key.length" : 6,
                  "key.line" : 302,
                  "key.offset" : 11551
                }
              ],
              "key.column" : 16,
              "key.doc.declaration" : "associatedtype SubSequence : Collection = Slice<Self> where Self.Element == Self.SubSequence.Element, Self.SubSequence == Self.SubSequence.SubSequence",
              "key.doc.discussion" : [
                {
                  "Para" : "This associated type appears as a requirement in the `Sequence` protocol, but it is restated here with stricter constraints. In a collection, the subsequence should also conform to `Collection`."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>SubSequence<\/Name><USR>s:Sl11SubSequenceQa<\/USR><Declaration>associatedtype SubSequence : Collection = Slice&lt;Self&gt; where Self.Element == Self.SubSequence.Element, Self.SubSequence == Self.SubSequence.SubSequence<\/Declaration><CommentParts><Abstract><Para>A sequence that represents a contiguous subrange of the collection’s elements.<\/Para><\/Abstract><Discussion><Para>This associated type appears as a requirement in the <codeVoice>Sequence<\/codeVoice> protocol, but it is restated here with stricter constraints. In a collection, the subsequence should also conform to <codeVoice>Collection<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "SubSequence",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;.<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/ref.struct>.<decl.name>SubSequence<\/decl.name> = <ref.struct usr=\"s:s5SliceV\">Slice<\/ref.struct>&lt;<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/ref.struct>&gt;<\/decl.typealias>",
              "key.kind" : "source.lang.swift.decl.typealias",
              "key.length" : 37,
              "key.line" : 302,
              "key.name" : "SubSequence",
              "key.namecolumn" : 26,
              "key.namelength" : 11,
              "key.nameline" : 302,
              "key.nameoffset" : 11568,
              "key.offset" : 11558,
              "key.overrides" : [
                {
                  "key.usr" : "s:SM11SubSequenceQa"
                },
                {
                  "key.usr" : "s:Sl11SubSequenceQa"
                }
              ],
              "key.parsed_declaration" : "public typealias SubSequence = Slice<Values>",
              "key.parsed_scope.end" : 302,
              "key.parsed_scope.start" : 302,
              "key.typename" : "Slice<BinaryTreeDictionary<Key, Value>.Values>.Type",
              "key.typeusr" : "$ss5SliceVy7Rubicon20BinaryTreeDictionaryC6ValuesVyxq__GGmD",
              "key.usr" : "s:Sl11SubSequenceQa"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public var startIndex: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 304,
                  "key.offset" : 11616
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 304,
                  "key.offset" : 11605
                }
              ],
              "key.bodycolumn" : 50,
              "key.bodylength" : 17,
              "key.bodyline" : 304,
              "key.bodyoffset" : 11646,
              "key.column" : 27,
              "key.doc.declaration" : "var startIndex: Self.Index { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "If the collection is empty, `startIndex` is equal to `endIndex`."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>startIndex<\/Name><USR>s:Sl10startIndex0B0Qzvp<\/USR><Declaration>var startIndex: Self.Index { get }<\/Declaration><CommentParts><Abstract><Para>The position of the first element in a nonempty collection.<\/Para><\/Abstract><Discussion><Para>If the collection is empty, <codeVoice>startIndex<\/codeVoice> is equal to <codeVoice>endIndex<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "startIndex",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>startIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 41,
              "key.line" : 304,
              "key.name" : "startIndex",
              "key.namecolumn" : 31,
              "key.namelength" : 10,
              "key.nameline" : 304,
              "key.nameoffset" : 11627,
              "key.offset" : 11623,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl10startIndex0B0Qzvp"
                }
              ],
              "key.parsed_declaration" : "@inlinable public var startIndex: Index",
              "key.parsed_scope.end" : 304,
              "key.parsed_scope.start" : 304,
              "key.typename" : "ShadowInt",
              "key.typeusr" : "$s7Rubicon9ShadowIntVD",
              "key.usr" : "s:Sl10startIndex0B0Qzvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public var endIndex: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 305,
                  "key.offset" : 11684
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 305,
                  "key.offset" : 11673
                }
              ],
              "key.bodycolumn" : 50,
              "key.bodylength" : 15,
              "key.bodyline" : 305,
              "key.bodyoffset" : 11714,
              "key.column" : 27,
              "key.doc.declaration" : "var endIndex: Self.Index { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "When you need a range that includes the last element of a collection, use the half-open range operator (`..<`) with `endIndex`. The `..<` operator creates a range that doesn’t include the upper bound, so it’s always safe to use with `endIndex`. For example:"
                },
                {
                  "CodeListing" : ""
                },
                {
                  "Para" : "If the collection is empty, `endIndex` is equal to `startIndex`."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>endIndex<\/Name><USR>s:Sl8endIndex0B0Qzvp<\/USR><Declaration>var endIndex: Self.Index { get }<\/Declaration><CommentParts><Abstract><Para>The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.<\/Para><\/Abstract><Discussion><Para>When you need a range that includes the last element of a collection, use the half-open range operator (<codeVoice>..&lt;<\/codeVoice>) with <codeVoice>endIndex<\/codeVoice>. The <codeVoice>..&lt;<\/codeVoice> operator creates a range that doesn’t include the upper bound, so it’s always safe to use with <codeVoice>endIndex<\/codeVoice>. For example:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let numbers = [10, 20, 30, 40, 50]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let index = numbers.firstIndex(of: 30) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(numbers[index ..< numbers.endIndex])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[30, 40, 50]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>If the collection is empty, <codeVoice>endIndex<\/codeVoice> is equal to <codeVoice>startIndex<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "endIndex",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>endIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 39,
              "key.line" : 305,
              "key.name" : "endIndex",
              "key.namecolumn" : 31,
              "key.namelength" : 8,
              "key.nameline" : 305,
              "key.nameoffset" : 11695,
              "key.offset" : 11691,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl8endIndex0B0Qzvp"
                }
              ],
              "key.parsed_declaration" : "@inlinable public var endIndex:   Index",
              "key.parsed_scope.end" : 305,
              "key.parsed_scope.start" : 305,
              "key.typename" : "ShadowInt",
              "key.typeusr" : "$s7Rubicon9ShadowIntVD",
              "key.usr" : "s:Sl8endIndex0B0Qzvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public var count: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 306,
                  "key.offset" : 11750
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 306,
                  "key.offset" : 11739
                }
              ],
              "key.bodycolumn" : 48,
              "key.bodylength" : 12,
              "key.bodyline" : 306,
              "key.bodyoffset" : 11778,
              "key.column" : 27,
              "key.doc.declaration" : "var count: Int { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "To check whether a collection is empty, use its `isEmpty` property instead of comparing `count` to zero. Unless the collection guarantees random-access performance, calculating `count` can be an O() operation."
                },
                {
                  "Complexity" : ""
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>count<\/Name><USR>s:Sl5countSivp<\/USR><Declaration>var count: Int { get }<\/Declaration><CommentParts><Abstract><Para>The number of elements in the collection.<\/Para><\/Abstract><Discussion><Para>To check whether a collection is empty, use its <codeVoice>isEmpty<\/codeVoice> property instead of comparing <codeVoice>count<\/codeVoice> to zero. Unless the collection guarantees random-access performance, calculating <codeVoice>count<\/codeVoice> can be an O(<emphasis>n<\/emphasis>) operation.<\/Para><Complexity><Para>O(1) if the collection conforms to <codeVoice>RandomAccessCollection<\/codeVoice>; otherwise, O(<emphasis>n<\/emphasis>), where <emphasis>n<\/emphasis> is the length of the collection.<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "count",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 34,
              "key.line" : 306,
              "key.name" : "count",
              "key.namecolumn" : 31,
              "key.namelength" : 5,
              "key.nameline" : 306,
              "key.nameoffset" : 11761,
              "key.offset" : 11757,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl5countSivp"
                }
              ],
              "key.parsed_declaration" : "@inlinable public var count:      Int",
              "key.parsed_scope.end" : 306,
              "key.parsed_scope.start" : 306,
              "key.typename" : "Int",
              "key.typeusr" : "$sSiD",
              "key.usr" : "s:Sl5countSivp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public var isEmpty: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 307,
                  "key.offset" : 11811
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 307,
                  "key.offset" : 11800
                }
              ],
              "key.bodycolumn" : 49,
              "key.bodylength" : 14,
              "key.bodyline" : 307,
              "key.bodyoffset" : 11840,
              "key.column" : 27,
              "key.doc.declaration" : "var isEmpty: Bool { get }",
              "key.doc.discussion" : [
                {
                  "Para" : "When you need to check whether your collection is empty, use the `isEmpty` property instead of checking that the `count` property is equal to zero. For collections that don’t conform to `RandomAccessCollection`, accessing the `count` property iterates through the elements of the collection."
                },
                {
                  "CodeListing" : ""
                },
                {
                  "Complexity" : ""
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>isEmpty<\/Name><USR>s:Sl7isEmptySbvp<\/USR><Declaration>var isEmpty: Bool { get }<\/Declaration><CommentParts><Abstract><Para>A Boolean value indicating whether the collection is empty.<\/Para><\/Abstract><Discussion><Para>When you need to check whether your collection is empty, use the <codeVoice>isEmpty<\/codeVoice> property instead of checking that the <codeVoice>count<\/codeVoice> property is equal to zero. For collections that don’t conform to <codeVoice>RandomAccessCollection<\/codeVoice>, accessing the <codeVoice>count<\/codeVoice> property iterates through the elements of the collection.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let horseName = \"Silver\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if horseName.isEmpty {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"My horse has no name.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Hi ho, \\(horseName)!\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Hi ho, Silver!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "isEmpty",
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isEmpty<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 37,
              "key.line" : 307,
              "key.name" : "isEmpty",
              "key.namecolumn" : 31,
              "key.namelength" : 7,
              "key.nameline" : 307,
              "key.nameoffset" : 11822,
              "key.offset" : 11818,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl7isEmptySbvp"
                }
              ],
              "key.parsed_declaration" : "@inlinable public var isEmpty:    Bool",
              "key.parsed_scope.end" : 307,
              "key.parsed_scope.start" : 307,
              "key.typename" : "Bool",
              "key.typeusr" : "$sSbD",
              "key.usr" : "s:Sl7isEmptySbvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>@usableFromInline let tree: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.usableFromInline",
                  "key.column" : 9,
                  "key.length" : 17,
                  "key.line" : 309,
                  "key.offset" : 11865
                }
              ],
              "key.column" : 27,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@usableFromInline<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>tree<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.instance>",
              "key.kind" : "source.lang.swift.decl.var.instance",
              "key.length" : 42,
              "key.line" : 309,
              "key.name" : "tree",
              "key.namecolumn" : 31,
              "key.namelength" : 4,
              "key.nameline" : 309,
              "key.nameoffset" : 11887,
              "key.offset" : 11883,
              "key.parsed_declaration" : "@usableFromInline let tree: BinaryTreeDictionary<Key, Value>",
              "key.parsed_scope.end" : 309,
              "key.parsed_scope.start" : 309,
              "key.typename" : "BinaryTreeDictionary<Key, Value>",
              "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6ValuesV4treeACyxq_Gvp"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.internal",
              "key.annotated_decl" : "<Declaration>init(_ tree: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;)<\/Declaration>",
              "key.bodycolumn" : 57,
              "key.bodylength" : 18,
              "key.bodyline" : 311,
              "key.bodyoffset" : 11983,
              "key.column" : 9,
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tree<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 67,
              "key.line" : 311,
              "key.name" : "init(_:)",
              "key.namecolumn" : 9,
              "key.namelength" : 46,
              "key.nameline" : 311,
              "key.nameoffset" : 11935,
              "key.offset" : 11935,
              "key.parsed_declaration" : "init(_ tree: BinaryTreeDictionary<Key, Value>)",
              "key.parsed_scope.end" : 311,
              "key.parsed_scope.start" : 311,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Values.Type) -> (BinaryTreeDictionary<Key, Value>) -> BinaryTreeDictionary<Key, Value>.Values",
              "key.typeusr" : "$sy7Rubicon20BinaryTreeDictionaryC6ValuesVyxq__GACyxq_GcD",
              "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6ValuesVyAEyxq__GACyxq_Gcfc"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public func index(after i: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type><\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 313,
                  "key.offset" : 12023
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 313,
                  "key.offset" : 12012
                }
              ],
              "key.bodycolumn" : 64,
              "key.bodylength" : 22,
              "key.bodyline" : 313,
              "key.bodyoffset" : 12067,
              "key.column" : 27,
              "key.doc.declaration" : "func index(after i: Self.Index) -> Self.Index",
              "key.doc.discussion" : [
                {
                  "Para" : "The successor of an index must be well defined. For an index `i` into a collection `c`, calling `c.index(after: i)` returns the same index every time."
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Function><Name>index(after:)<\/Name><USR>s:Sl5index5after5IndexQzAD_tF<\/USR><Declaration>func index(after i: Self.Index) -&gt; Self.Index<\/Declaration><CommentParts><Abstract><Para>Returns the position immediately after the given index.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection. <codeVoice>i<\/codeVoice> must be less than <codeVoice>endIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>The index value immediately after <codeVoice>i<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><Para>The successor of an index must be well defined. For an index <codeVoice>i<\/codeVoice> into a collection <codeVoice>c<\/codeVoice>, calling <codeVoice>c.index(after: i)<\/codeVoice> returns the same index every time.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.name" : "index(after:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "A valid index of the collection. `i` must be less than `endIndex`."
                    }
                  ],
                  "name" : "i"
                }
              ],
              "key.doc.result_discussion" : [
                {
                  "Para" : "The index value immediately after `i`."
                }
              ],
              "key.doc.type" : "Function",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>index<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>after<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 60,
              "key.line" : 313,
              "key.name" : "index(after:)",
              "key.namecolumn" : 32,
              "key.namelength" : 21,
              "key.nameline" : 313,
              "key.nameoffset" : 12035,
              "key.offset" : 12030,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl5index5after5IndexQzAD_tF"
                }
              ],
              "key.parsed_declaration" : "@inlinable public func index(after i: Index) -> Index",
              "key.parsed_scope.end" : 313,
              "key.parsed_scope.start" : 313,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Values) -> (ShadowInt) -> ShadowInt",
              "key.typeusr" : "$s5after7Rubicon9ShadowIntVAD_tcD",
              "key.usr" : "s:Sl5index5after5IndexQzAD_tF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public func formIndex(after i: inout <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>)<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 315,
                  "key.offset" : 12111
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 315,
                  "key.offset" : 12100
                }
              ],
              "key.bodycolumn" : 65,
              "key.bodylength" : 27,
              "key.bodyline" : 315,
              "key.bodyoffset" : 12156,
              "key.column" : 27,
              "key.doc.declaration" : "func formIndex(after i: inout Self.Index)",
              "key.doc.discussion" : [
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Function><Name>formIndex(after:)<\/Name><USR>s:Sl9formIndex5aftery0B0Qzz_tF<\/USR><Declaration>func formIndex(after i: inout Self.Index)<\/Declaration><CommentParts><Abstract><Para>Replaces the given index with its successor.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection. <codeVoice>i<\/codeVoice> must be less than <codeVoice>endIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>Collection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.name" : "formIndex(after:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "A valid index of the collection. `i` must be less than `endIndex`."
                    }
                  ],
                  "name" : "i"
                }
              ],
              "key.doc.type" : "Function",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formIndex<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>after<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 66,
              "key.line" : 315,
              "key.name" : "formIndex(after:)",
              "key.namecolumn" : 32,
              "key.namelength" : 31,
              "key.nameline" : 315,
              "key.nameoffset" : 12123,
              "key.offset" : 12118,
              "key.overrides" : [
                {
                  "key.usr" : "s:Sl9formIndex5aftery0B0Qzz_tF"
                }
              ],
              "key.parsed_declaration" : "@inlinable public func formIndex(after i: inout Index)",
              "key.parsed_scope.end" : 315,
              "key.parsed_scope.start" : 315,
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>.Values) -> (inout ShadowInt) -> ()",
              "key.typeusr" : "$s5aftery7Rubicon9ShadowIntVz_tcD",
              "key.usr" : "s:Sl9formIndex5aftery0B0Qzz_tF"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public subscript(position: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/Type>.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV7Elementa\">Element<\/Type> { get set }<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 317,
                  "key.offset" : 12205
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 317,
                  "key.offset" : 12194
                }
              ],
              "key.bodycolumn" : 73,
              "key.bodylength" : 142,
              "key.bodyline" : 317,
              "key.bodyoffset" : 12258,
              "key.column" : 27,
              "key.doc.declaration" : "override subscript(position: Self.Index) -> Self.Element { get set }",
              "key.doc.discussion" : [
                {
                  "Para" : "For example, you can replace an element of an array by using its subscript."
                },
                {
                  "CodeListing" : ""
                },
                {
                  "Para" : "You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element."
                },
                {
                  "Complexity" : ""
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Other><Name>subscript(_:)<\/Name><USR>s:SMy7ElementQz5IndexQzcip<\/USR><Declaration>override subscript(position: Self.Index) -&gt; Self.Element { get set }<\/Declaration><CommentParts><Abstract><Para>Accesses the element at the specified position.<\/Para><\/Abstract><Parameters><Parameter><Name>position<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The position of the element to access. <codeVoice>position<\/codeVoice> must be a valid index of the collection that is not equal to the <codeVoice>endIndex<\/codeVoice> property.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>For example, you can replace an element of an array by using its subscript.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[streets[1] = \"Butler\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(streets[1])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Butler\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can subscript a collection with any valid index other than the collection’s end index. The end index refers to the position one past the last element of a collection, so it doesn’t correspond with an element.<\/Para><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>MutableCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Other>",
              "key.doc.name" : "subscript(_:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The position of the element to access. `position` must be a valid index of the collection that is not equal to the `endIndex` property."
                    }
                  ],
                  "name" : "position"
                }
              ],
              "key.doc.type" : "Other",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>position<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/ref.struct>.<ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV7Elementa\">Element<\/ref.typealias><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.function.subscript>",
              "key.kind" : "source.lang.swift.decl.function.subscript",
              "key.length" : 189,
              "key.line" : 317,
              "key.name" : "subscript(_:)",
              "key.namecolumn" : 27,
              "key.namelength" : 26,
              "key.nameline" : 317,
              "key.nameoffset" : 12212,
              "key.offset" : 12212,
              "key.overrides" : [
                {
                  "key.usr" : "s:SMy7ElementQz5IndexQzcip"
                },
                {
                  "key.usr" : "s:Sly7ElementQz5IndexQzcip"
                }
              ],
              "key.parsed_declaration" : "@inlinable public subscript(position: Index) -> Values.Element",
              "key.parsed_scope.end" : 320,
              "key.parsed_scope.start" : 317,
              "key.setter_accessibility" : "source.lang.swift.accessibility.public",
              "key.substructure" : [

              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (ShadowInt) -> Value",
              "key.typeusr" : "$syq_7Rubicon9ShadowIntVcD",
              "key.usr" : "s:SMy7ElementQz5IndexQzcip"
            },
            {
              "key.accessibility" : "source.lang.swift.accessibility.public",
              "key.annotated_decl" : "<Declaration>@inlinable public mutating func swapAt(_ i: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>, _ j: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>)<\/Declaration>",
              "key.attributes" : [
                {
                  "key.attribute" : "source.decl.attribute.mutating",
                  "key.column" : 27,
                  "key.length" : 8,
                  "key.line" : 322,
                  "key.offset" : 12429
                },
                {
                  "key.attribute" : "source.decl.attribute.public",
                  "key.column" : 20,
                  "key.length" : 6,
                  "key.line" : 322,
                  "key.offset" : 12422
                },
                {
                  "key.attribute" : "source.decl.attribute.inlinable",
                  "key.column" : 9,
                  "key.length" : 10,
                  "key.line" : 322,
                  "key.offset" : 12411
                }
              ],
              "key.bodycolumn" : 73,
              "key.bodylength" : 186,
              "key.bodyline" : 322,
              "key.bodyoffset" : 12475,
              "key.column" : 36,
              "key.doc.declaration" : "mutating func swapAt(_ i: Self.Index, _ j: Self.Index)",
              "key.doc.discussion" : [
                {
                  "Para" : "Both parameters must be valid indices of the collection and not equal to `endIndex`. Passing the same index as both `i` and `j` has no effect."
                },
                {
                  "Complexity" : ""
                },
                {
                  "Note" : ""
                }
              ],
              "key.doc.full_as_xml" : "<Function><Name>swapAt(_:_:)<\/Name><USR>s:SM6swapAtyy5IndexQz_ACtF<\/USR><Declaration>mutating func swapAt(_ i: Self.Index, _ j: Self.Index)<\/Declaration><CommentParts><Abstract><Para>Exchanges the values at the specified indices of the collection.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The index of the first value to swap.<\/Para><\/Discussion><\/Parameter><Parameter><Name>j<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The index of the second value to swap.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Both parameters must be valid indices of the collection and not equal to <codeVoice>endIndex<\/codeVoice>. Passing the same index as both <codeVoice>i<\/codeVoice> and <codeVoice>j<\/codeVoice> has no effect.<\/Para><Complexity><Para>O(1)<\/Para><\/Complexity><Note><Para>This documentation comment was inherited from <codeVoice>MutableCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
              "key.doc.name" : "swapAt(_:_:)",
              "key.doc.parameters" : [
                {
                  "discussion" : [
                    {
                      "Para" : "The index of the first value to swap."
                    }
                  ],
                  "name" : "i"
                },
                {
                  "discussion" : [
                    {
                      "Para" : "The index of the second value to swap."
                    }
                  ],
                  "name" : "j"
                }
              ],
              "key.doc.type" : "Function",
              "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
              "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@inlinable<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>mutating<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>swapAt<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>j<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
              "key.kind" : "source.lang.swift.decl.function.method.instance",
              "key.length" : 224,
              "key.line" : 322,
              "key.name" : "swapAt(_:_:)",
              "key.namecolumn" : 41,
              "key.namelength" : 30,
              "key.nameline" : 322,
              "key.nameoffset" : 12443,
              "key.offset" : 12438,
              "key.overrides" : [
                {
                  "key.usr" : "s:SM6swapAtyy5IndexQz_ACtF"
                }
              ],
              "key.parsed_declaration" : "@inlinable public mutating func swapAt(_ i: Index, _ j: Index)",
              "key.parsed_scope.end" : 327,
              "key.parsed_scope.start" : 322,
              "key.substructure" : [
                {
                  "key.annotated_decl" : "<Declaration>let nodeI: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
                  "key.column" : 13,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
                  "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>nodeI<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
                  "key.kind" : "source.lang.swift.decl.var.local",
                  "key.length" : 36,
                  "key.line" : 323,
                  "key.name" : "nodeI",
                  "key.namecolumn" : 17,
                  "key.namelength" : 5,
                  "key.nameline" : 323,
                  "key.nameoffset" : 12492,
                  "key.offset" : 12488,
                  "key.parsed_declaration" : "let nodeI = tree.nodeAt(position: i)",
                  "key.parsed_scope.end" : 323,
                  "key.parsed_scope.start" : 323,
                  "key.typename" : "TreeNode<Key, Value>",
                  "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GD",
                  "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6ValuesV6swapAtyyAA9ShadowIntV_AHtF5nodeIL_AA0C4NodeCyxq_Gvp"
                },
                {
                  "key.annotated_decl" : "<Declaration>let nodeJ: <Type usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/Type>&lt;<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/Type>&gt;<\/Declaration>",
                  "key.column" : 13,
                  "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
                  "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>nodeJ<\/decl.name>: <decl.var.type><ref.class usr=\"s:7Rubicon8TreeNodeC\">TreeNode<\/ref.class>&lt;<ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param>, <ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\">Value<\/ref.generic_type_param>&gt;<\/decl.var.type><\/decl.var.local>",
                  "key.kind" : "source.lang.swift.decl.var.local",
                  "key.length" : 36,
                  "key.line" : 324,
                  "key.name" : "nodeJ",
                  "key.namecolumn" : 17,
                  "key.namelength" : 5,
                  "key.nameline" : 324,
                  "key.nameoffset" : 12541,
                  "key.offset" : 12537,
                  "key.parsed_declaration" : "let nodeJ = tree.nodeAt(position: j)",
                  "key.parsed_scope.end" : 324,
                  "key.parsed_scope.start" : 324,
                  "key.typename" : "TreeNode<Key, Value>",
                  "key.typeusr" : "$s7Rubicon8TreeNodeCyxq_GD",
                  "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6ValuesV6swapAtyyAA9ShadowIntV_AHtF5nodeJL_AA0C4NodeCyxq_Gvp"
                }
              ],
              "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (inout BinaryTreeDictionary<Key, Value>.Values) -> (ShadowInt, ShadowInt) -> ()",
              "key.typeusr" : "$syy7Rubicon9ShadowIntV_ACtcD",
              "key.usr" : "s:SM6swapAtyy5IndexQz_ACtF"
            }
          ],
          "key.typename" : "BinaryTreeDictionary<Key, Value>.Values.Type",
          "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryC6ValuesVyxq__GmD",
          "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6ValuesV"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    },
    {
      "key.annotated_decl" : "<Declaration>@frozen public struct Values : <Type usr=\"s:SM\">MutableCollection<\/Type><\/Declaration>",
      "key.bodycolumn" : 74,
      "key.bodylength" : 300,
      "key.bodyline" : 331,
      "key.bodyoffset" : 12745,
      "key.column" : 1,
      "key.elements" : [
        {
          "key.column" : 40,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 9,
          "key.line" : 331,
          "key.offset" : 12711
        }
      ],
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Values<\/decl.name> : <ref.protocol usr=\"s:SM\">MutableCollection<\/ref.protocol><\/decl.struct>",
      "key.inheritedtypes" : [
        {
          "key.name" : "Equatable"
        }
      ],
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 374,
      "key.line" : 331,
      "key.name" : "BinaryTreeDictionary.Values",
      "key.namecolumn" : 11,
      "key.namelength" : 27,
      "key.nameline" : 331,
      "key.nameoffset" : 12682,
      "key.offset" : 12672,
      "key.parsed_declaration" : "extension BinaryTreeDictionary.Values: Equatable where Value: Equatable",
      "key.parsed_scope.end" : 337,
      "key.parsed_scope.start" : 331,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public static func == (lhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/Type>, rhs: <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/Type>.<Type usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 332,
              "key.offset" : 12750
            }
          ],
          "key.bodycolumn" : 105,
          "key.bodylength" : 193,
          "key.bodyline" : 332,
          "key.bodyoffset" : 12850,
          "key.column" : 12,
          "key.doc.declaration" : "static func == (lhs: Self, rhs: Self) -> Bool",
          "key.doc.discussion" : [
            {
              "Para" : "Equality is the inverse of inequality. For any values `a` and `b`, `a == b` implies that `a != b` is `false`."
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>==(_:_:)<\/Name><USR>s:SQ2eeoiySbx_xtFZ<\/USR><Declaration>static func == (lhs: Self, rhs: Self) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>Returns a Boolean value indicating whether two values are equal.<\/Para><\/Abstract><Parameters><Parameter><Name>lhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A value to compare.<\/Para><\/Discussion><\/Parameter><Parameter><Name>rhs<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Another value to compare.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Equality is the inverse of inequality. For any values <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice>, <codeVoice>a == b<\/codeVoice> implies that <codeVoice>a != b<\/codeVoice> is <codeVoice>false<\/codeVoice>.<\/Para><Note><Para>This documentation comment was inherited from <codeVoice>Equatable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "==(_:_:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "A value to compare."
                }
              ],
              "name" : "lhs"
            },
            {
              "discussion" : [
                {
                  "Para" : "Another value to compare."
                }
              ],
              "name" : "rhs"
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>.<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:7Rubicon20BinaryTreeDictionaryC\">BinaryTreeDictionary<\/ref.class>.<ref.struct usr=\"s:7Rubicon20BinaryTreeDictionaryC6ValuesV\">Values<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
          "key.kind" : "source.lang.swift.decl.function.method.static",
          "key.length" : 287,
          "key.line" : 332,
          "key.name" : "==(_:_:)",
          "key.namecolumn" : 24,
          "key.namelength" : 71,
          "key.nameline" : 332,
          "key.nameoffset" : 12769,
          "key.offset" : 12757,
          "key.overrides" : [
            {
              "key.usr" : "s:SQ2eeoiySbx_xtFZ"
            }
          ],
          "key.parsed_declaration" : "public static func == (lhs: BinaryTreeDictionary.Values, rhs: BinaryTreeDictionary.Values) -> Bool",
          "key.parsed_scope.end" : 336,
          "key.parsed_scope.start" : 332,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable, Value : Equatable> (BinaryTreeDictionary<Key, Value>.Values.Type) -> (BinaryTreeDictionary<Key, Value>.Values, BinaryTreeDictionary<Key, Value>.Values) -> Bool",
          "key.typeusr" : "$sySb7Rubicon20BinaryTreeDictionaryC6ValuesVyxq__G_AFtcD",
          "key.usr" : "s:SQ2eeoiySbx_xtFZ"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Values.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryC6ValuesVyxq__GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6ValuesV"
    },
    {
      "key.annotated_decl" : "<Declaration>@frozen public struct Values : <Type usr=\"s:SM\">MutableCollection<\/Type><\/Declaration>",
      "key.bodycolumn" : 72,
      "key.bodylength" : 84,
      "key.bodyline" : 339,
      "key.bodyoffset" : 13119,
      "key.column" : 1,
      "key.elements" : [
        {
          "key.column" : 40,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 8,
          "key.line" : 339,
          "key.offset" : 13087
        }
      ],
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.struct><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@frozen<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Values<\/decl.name> : <ref.protocol usr=\"s:SM\">MutableCollection<\/ref.protocol><\/decl.struct>",
      "key.inheritedtypes" : [
        {
          "key.name" : "Hashable"
        }
      ],
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 156,
      "key.line" : 339,
      "key.name" : "BinaryTreeDictionary.Values",
      "key.namecolumn" : 11,
      "key.namelength" : 27,
      "key.nameline" : 339,
      "key.nameoffset" : 13058,
      "key.offset" : 13048,
      "key.parsed_declaration" : "extension BinaryTreeDictionary.Values: Hashable where Value: Hashable",
      "key.parsed_scope.end" : 341,
      "key.parsed_scope.start" : 339,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public func hash(into hasher: inout <Type usr=\"s:s6HasherV\">Hasher<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 340,
              "key.offset" : 13124
            }
          ],
          "key.bodycolumn" : 50,
          "key.bodylength" : 32,
          "key.bodyline" : 340,
          "key.bodyoffset" : 13169,
          "key.column" : 12,
          "key.doc.declaration" : "func hash(into hasher: inout Hasher)",
          "key.doc.discussion" : [
            {
              "Para" : "Implement this method to conform to the `Hashable` protocol. The components used for hashing must be the same as the components compared in your type’s `==` operator implementation. Call `hasher.combine(_:)` with each of these components."
            },
            {
              "Important" : ""
            },
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>hash(into:)<\/Name><USR>s:SH4hash4intoys6HasherVz_tF<\/USR><Declaration>func hash(into hasher: inout Hasher)<\/Declaration><CommentParts><Abstract><Para>Hashes the essential components of this value by feeding them into the given hasher.<\/Para><\/Abstract><Parameters><Parameter><Name>hasher<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The hasher to use when combining the components of this instance.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>Implement this method to conform to the <codeVoice>Hashable<\/codeVoice> protocol. The components used for hashing must be the same as the components compared in your type’s <codeVoice>==<\/codeVoice> operator implementation. Call <codeVoice>hasher.combine(_:)<\/codeVoice> with each of these components.<\/Para><Important><Para>Never call <codeVoice>finalize()<\/codeVoice> on <codeVoice>hasher<\/codeVoice>. Doing so may become a compile-time error in the future.<\/Para><\/Important><Note><Para>This documentation comment was inherited from <codeVoice>Hashable<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "hash(into:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "The hasher to use when combining the components of this instance."
                }
              ],
              "name" : "hasher"
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>hash<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>into<\/decl.var.parameter.argument_label> <decl.var.parameter.name>hasher<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:s6HasherV\">Hasher<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 71,
          "key.line" : 340,
          "key.name" : "hash(into:)",
          "key.namecolumn" : 17,
          "key.namelength" : 31,
          "key.nameline" : 340,
          "key.nameoffset" : 13136,
          "key.offset" : 13131,
          "key.overrides" : [
            {
              "key.usr" : "s:SH4hash4intoys6HasherVz_tF"
            }
          ],
          "key.parsed_declaration" : "public func hash(into hasher: inout Hasher)",
          "key.parsed_scope.end" : 340,
          "key.parsed_scope.start" : 340,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable, Value : Hashable> (BinaryTreeDictionary<Key, Value>.Values) -> (inout Hasher) -> ()",
          "key.typeusr" : "$s4intoys6HasherVz_tcD",
          "key.usr" : "s:SH4hash4intoys6HasherVz_tF"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Values.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryC6ValuesVyxq__GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC6ValuesV"
    },
    {
      "key.annotated_decl" : "<Declaration>open class BinaryTreeDictionary&lt;Key, Value&gt; : <Type usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/Type>, <Type usr=\"s:SK\">BidirectionalCollection<\/Type> where <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SL\">Comparable<\/Type>, <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/Type> : <Type usr=\"s:SH\">Hashable<\/Type><\/Declaration>",
      "key.bodycolumn" : 57,
      "key.bodylength" : 74,
      "key.bodyline" : 343,
      "key.bodyoffset" : 13262,
      "key.column" : 1,
      "key.elements" : [
        {
          "key.column" : 33,
          "key.kind" : "source.lang.swift.structure.elem.typeref",
          "key.length" : 22,
          "key.line" : 343,
          "key.offset" : 13238
        }
      ],
      "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
      "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>open<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>BinaryTreeDictionary<\/decl.name>&lt;<decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\"><decl.generic_type_param.name>Key<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC5Valueq_mfp\"><decl.generic_type_param.name>Value<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s30ExpressibleByDictionaryLiteralP\">ExpressibleByDictionaryLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:7Rubicon20BinaryTreeDictionaryC3Keyxmfp\">Key<\/ref.generic_type_param> : <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
      "key.inheritedtypes" : [
        {
          "key.name" : "RandomAccessCollection"
        }
      ],
      "key.kind" : "source.lang.swift.decl.extension",
      "key.length" : 131,
      "key.line" : 343,
      "key.name" : "BinaryTreeDictionary",
      "key.namecolumn" : 11,
      "key.namelength" : 20,
      "key.nameline" : 343,
      "key.nameoffset" : 13216,
      "key.offset" : 13206,
      "key.parsed_declaration" : "extension BinaryTreeDictionary: RandomAccessCollection",
      "key.parsed_scope.end" : 345,
      "key.parsed_scope.start" : 343,
      "key.substructure" : [
        {
          "key.accessibility" : "source.lang.swift.accessibility.public",
          "key.annotated_decl" : "<Declaration>public func formIndex(before i: inout <Type usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/Type>)<\/Declaration>",
          "key.attributes" : [
            {
              "key.attribute" : "source.decl.attribute.public",
              "key.column" : 5,
              "key.length" : 6,
              "key.line" : 344,
              "key.offset" : 13267
            }
          ],
          "key.bodycolumn" : 51,
          "key.bodylength" : 21,
          "key.bodyline" : 344,
          "key.bodyoffset" : 13313,
          "key.column" : 12,
          "key.doc.declaration" : "func formIndex(before i: inout Self.Index)",
          "key.doc.discussion" : [
            {
              "Note" : ""
            }
          ],
          "key.doc.full_as_xml" : "<Function><Name>formIndex(before:)<\/Name><USR>s:SK9formIndex6beforey0B0Qzz_tF<\/USR><Declaration>func formIndex(before i: inout Self.Index)<\/Declaration><CommentParts><Abstract><Para>Replaces the given index with its predecessor.<\/Para><\/Abstract><Parameters><Parameter><Name>i<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A valid index of the collection. <codeVoice>i<\/codeVoice> must be greater than <codeVoice>startIndex<\/codeVoice>.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Note><Para>This documentation comment was inherited from <codeVoice>BidirectionalCollection<\/codeVoice>.<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
          "key.doc.name" : "formIndex(before:)",
          "key.doc.parameters" : [
            {
              "discussion" : [
                {
                  "Para" : "A valid index of the collection. `i` must be greater than `startIndex`."
                }
              ],
              "name" : "i"
            }
          ],
          "key.doc.type" : "Function",
          "key.filepath" : "\/Users\/grhodes\/Projects\/2020\/SwiftProjects\/Rubicon\/Sources\/Rubicon\/BinaryTree\/BinaryTreeDictionary.swift",
          "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formIndex<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>before<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.typealias usr=\"s:7Rubicon20BinaryTreeDictionaryC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
          "key.kind" : "source.lang.swift.decl.function.method.instance",
          "key.length" : 61,
          "key.line" : 344,
          "key.name" : "formIndex(before:)",
          "key.namecolumn" : 17,
          "key.namelength" : 32,
          "key.nameline" : 344,
          "key.nameoffset" : 13279,
          "key.offset" : 13274,
          "key.overrides" : [
            {
              "key.usr" : "s:SK9formIndex6beforey0B0Qzz_tF"
            },
            {
              "key.usr" : "s:Sk9formIndex6beforey0B0Qzz_tF"
            }
          ],
          "key.parsed_declaration" : "public func formIndex(before i: inout Index)",
          "key.parsed_scope.end" : 344,
          "key.parsed_scope.start" : 344,
          "key.substructure" : [

          ],
          "key.typename" : "<Key, Value where Key : Comparable, Key : Hashable> (BinaryTreeDictionary<Key, Value>) -> (inout ShadowInt) -> ()",
          "key.typeusr" : "$s6beforey7Rubicon9ShadowIntVz_tcD",
          "key.usr" : "s:SK9formIndex6beforey0B0Qzz_tF"
        }
      ],
      "key.typename" : "BinaryTreeDictionary<Key, Value>.Type",
      "key.typeusr" : "$s7Rubicon20BinaryTreeDictionaryCyxq_GmD",
      "key.usr" : "s:7Rubicon20BinaryTreeDictionaryC"
    }
  ]
}